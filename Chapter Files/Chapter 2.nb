(* Content-type: application/vnd.wolfram.cdf.text *)

(*** Wolfram CDF File ***)
(* http://www.wolfram.com/cdf *)

(* CreatedBy='WolframDesktop 12.0' *)

(***************************************************************************)
(*                                                                         *)
(*                                                                         *)
(*  Under the Wolfram FreeCDF terms of use, this file and its content are  *)
(*  bound by the Creative Commons BY-SA Attribution-ShareAlike license.    *)
(*                                                                         *)
(*        For additional information concerning CDF licensing, see:        *)
(*                                                                         *)
(*         www.wolfram.com/cdf/adopting-cdf/licensing-options.html         *)
(*                                                                         *)
(*                                                                         *)
(***************************************************************************)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[      1091,         20]
NotebookDataLength[     79508,       1792]
NotebookOptionsPosition[     67534,       1611]
NotebookOutlinePosition[     67878,       1626]
CellTagsIndexPosition[     67835,       1623]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Chapter 2: Additional Data Types and Sources", "Chapter",
 CellChangeTimes->{{3.7825181358923206`*^9, 
  3.7825181579233694`*^9}},ExpressionUUID->"3874914f-f6d9-416e-997d-\
aa4a8d2d1bc9"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.7825184147851725`*^9, 
  3.78251841901578*^9}},ExpressionUUID->"1297906f-a5c4-48c0-be6c-\
0f75da1c59fe"],

Cell["\<\
In the first chapter we demonstrated how to build  simple components to track \
electrical energy consumption by recording register readings from the face of \
the meter.  In this chapter we will explore how to define components to track \
other data types, such as records of bulk deliveries of commodities such as \
fuel oil, or wood. 

We will also explore how to import historical data into the application from \
a spreadsheet.  If you engage with your school administrators you will \
probably find that someone at your school has a spreadsheet of monthly \
utility bills that goes back many years.  Importing data from a spreadsheet \
will enable you to quickly add your school\[CloseCurlyQuote]s historical \
energy consumption to your application.  

You may also find that your school\[CloseCurlyQuote]s utility company makes \
historical bills, or even much finer grained data, available for download \
from their website.  Take some time to explore the website of your utility \
company, and keep an eye open for the \[OpenCurlyDoubleQuote]Green Button\
\[CloseCurlyDoubleQuote].  The Green Button Initiative defined a standard \
data format that many utilities use to enable their customers to download \
their data.  \
\>", "Text",
 CellChangeTimes->{{3.7825184279953423`*^9, 3.782518438173025*^9}, {
   3.7825185627408857`*^9, 3.782518584125287*^9}, {3.7825196254013453`*^9, 
   3.7825196644890404`*^9}, {3.7825197798474183`*^9, 3.782519855662917*^9}, {
   3.782521618473936*^9, 3.7825216484809933`*^9}, {3.7825218363655214`*^9, 
   3.782521874164909*^9}, {3.7825221132374754`*^9, 3.7825221136073666`*^9}, {
   3.7825225860286922`*^9, 3.782522618827344*^9}, {3.7825226875428247`*^9, 
   3.782522738101033*^9}, {3.7825229226349835`*^9, 3.7825229576488113`*^9}, {
   3.7825231593859234`*^9, 3.7825232235693054`*^9}, {3.7825235187504225`*^9, 
   3.782523548800327*^9}, {3.7825237417868333`*^9, 3.7825237473562455`*^9}, {
   3.7825243186199603`*^9, 3.782524336180976*^9}, {3.782524372213895*^9, 
   3.7825244052992334`*^9}, {3.78260422466164*^9, 3.7826043072922783`*^9}, 
   3.782604339243723*^9, {3.7826043735347214`*^9, 3.7826044816517153`*^9}, {
   3.7832134167852592`*^9, 3.783213424516701*^9}, {3.783213456590485*^9, 
   3.7832134739777174`*^9}, {3.7833825653187857`*^9, 3.783382589375515*^9}, {
   3.783382662765668*^9, 3.7833827459213333`*^9}, {3.784421465583664*^9, 
   3.784421531550855*^9}},ExpressionUUID->"36bde9a5-9c79-4e40-9b0f-\
e0b15ea86048"],

Cell[BoxData[
 RowBox[{"WebImageSearch", "[", 
  RowBox[{"\"\<Green Button Initiative\>\"", ",", "\"\<Images\>\"", ",", 
   RowBox[{"MaxItems", "\[Rule]", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7826036732720895`*^9, 3.782603684721946*^9}, {
  3.782603725568551*^9, 3.782603760927023*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"e525e102-9263-4359-aa81-41888381f5e5"],

Cell[BoxData[
 RowBox[{"WebSearch", "[", 
  RowBox[{"\"\<Green Button\>\"", ",", 
   RowBox[{"MaxItems", "\[Rule]", "5"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.782603784148283*^9, 3.7826037944961367`*^9}, {
  3.782604078711113*^9, 3.7826040895023427`*^9}, {3.782604138786166*^9, 
  3.7826041473225393`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"6aedad36-7e09-417a-8708-98c5e5c0261c"],

Cell["\<\
At the end of this chapter we will have all of the tools necessary to build \
an application that can track all of the fuel consumption of a single \
building.  In Chapter 3 we will pull everything together to deploy a working \
application.  \
\>", "Text",
 CellChangeTimes->{{3.7832167162516255`*^9, 3.7832168232069206`*^9}, {
  3.7833828871037035`*^9, 
  3.7833829823462343`*^9}},ExpressionUUID->"066af97f-4680-42a2-a984-\
ad7233d05aaf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["User Stories", "Section",
 CellChangeTimes->{{3.7832147742525043`*^9, 
  3.783214776486792*^9}},ExpressionUUID->"a2653a56-1706-4bc8-be5b-\
ab543eda3781"],

Cell[CellGroupData[{

Cell["Plot Fuel Oil Deliveries Over Time", "Subsection",
 CellChangeTimes->{{3.783214679448919*^9, 
  3.7832147032498026`*^9}},ExpressionUUID->"0364e56f-e1e1-4f10-bd60-\
a67a320d5725"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"1cd356d8-9f8c-4306-b403-\
34d7b3c739e1"],

Cell["\<\
As a participant in my school\[CloseCurlyQuote]s energy tracking initiative,  \
I want to plot my school\[CloseCurlyQuote]s fuel oil deliveries  over time.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, {
  3.7823477238829556`*^9, 3.782347765264*^9}, {3.783213616465279*^9, 
  3.783213695293866*^9}, {3.783214597068052*^9, 3.783214601767187*^9}, {
  3.7838156964686613`*^9, 
  3.78381570531289*^9}},ExpressionUUID->"748dcee7-f4e8-42f2-93da-\
3e74b2d6a6a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"ee3de24e-ceac-44b6-bee3-\
bcb66f530214"],

Cell["\<\
Some energy sources such as fuel oil, or wood, are delivered in large \
quantities, at irregular intervals, stored on site, and consumed over time.   \
 Plots of the delivery of these commodities over time may benefit from  \
different presentation than plots of regular time series data due to the \
irregularity of the deliveries .  For instance, if you wish to create a \
monthly plot of fuel oil deliveries, you may find that some months have \
several deliveries, while some have none.  A continuous line plot depicting \
this type of data can make it difficult to discern when deliveries occur.  \
\>", "Text",
 CellChangeTimes->{{3.7823477770614805`*^9, 3.782347780995039*^9}, {
   3.7823478159672375`*^9, 3.782347935689645*^9}, 3.782422137812658*^9, {
   3.782422310673532*^9, 3.7824223725137696`*^9}, {3.7832137172366886`*^9, 
   3.7832137962396326`*^9}, {3.7832148341339684`*^9, 
   3.7832148946466722`*^9}, {3.783214955073513*^9, 
   3.783214964686789*^9}},ExpressionUUID->"b0e5cea6-ee86-4bf4-ba37-\
4f5179a3d61d"],

Cell["\<\
It is also worth remembering that the time of delivery and time of \
consumption are quite different.  In later sections we will examine ways of \
estimating the time of consumption from the operation time of boilers, or \
thermostat data that provides information about when fuel is being used.\
\>", "Text",
 CellChangeTimes->{{3.7824221419228444`*^9, 3.782422156167042*^9}, {
  3.782422540544016*^9, 3.782422595172253*^9}, {3.782423070815074*^9, 
  3.7824230866048503`*^9}, {3.782423229065263*^9, 3.7824232564343634`*^9}, {
  3.782423313630209*^9, 3.7824234049412518`*^9}, {3.7832138249078727`*^9, 
  3.783213826739625*^9}},ExpressionUUID->"d2d469e7-270b-46bd-aebe-\
54fabe586f6c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"aa103892-67b2-4777-a996-\
4c7059c7d91f"],

Cell["\<\
First, we create a list of time-value pairs that account for the deliveries \
to a single location over a year.  \
\>", "Text",
 CellChangeTimes->{{3.7832138492895327`*^9, 
  3.783213894821068*^9}},ExpressionUUID->"0f59e036-1e17-42d1-8199-\
ecd18e19f696"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fueloildeliveries", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "1", ",", "10"}], "}"}], "]"}], ",", "250"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "1", ",", "25"}], "}"}], "]"}], ",", "200"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "3", ",", "5"}], "}"}], "]"}], ",", "370"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "3", ",", "20"}], "}"}], "]"}], ",", "250"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "5", ",", "1"}], "}"}], "]"}], ",", "260"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "6", ",", "30"}], "}"}], "]"}], ",", "150"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "8", ",", "30"}], "}"}], "]"}], ",", "110"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "10", ",", "5"}], "}"}], "]"}], ",", "200"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "11", ",", "15"}], "}"}], "]"}], ",", "220"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "12", ",", "14"}], "}"}], "]"}], ",", "270"}], 
      "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.782348237086318*^9, 3.7823482788585997`*^9}, 
   3.7861040475997887`*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"bbbc88fa-7e98-4cda-994f-40db9207c8b7"],

Cell["Now we create a TimeSeries of the data and plot it.", "Text",
 CellChangeTimes->{{3.7832139292735705`*^9, 
  3.783213949210739*^9}},ExpressionUUID->"cf00e8b1-d03a-431e-b169-\
fbe95d0ad083"],

Cell[BoxData[
 RowBox[{"fueloildeliveriesTimeSeries", "=", 
  RowBox[{"TimeSeries", "[", "fueloildeliveries", "]"}]}]], "Input",
 CellChangeTimes->{{3.782349752070755*^9, 3.7823497996196775`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"212771d5-8895-4cd2-8241-94a1588bdde1"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", "fueloildeliveriesTimeSeries", "]"}]], "Input",
 CellChangeTimes->{{3.782349772999341*^9, 3.7823498097446766`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2885b6a7-d835-44cc-b60a-4f8d984d8e3f"],

Cell["\<\
Since the data is irregular, it may be useful to regularize the data into \
monthly totals. The TimeSeriesAggregate function allows us to do that.\
\>", "Text",
 CellChangeTimes->{{3.7824197889973097`*^9, 3.782419819543386*^9}, {
  3.783214031800453*^9, 
  3.783214125397977*^9}},ExpressionUUID->"3dd8c3c3-6312-4fa9-9e68-\
d91620472cee"],

Cell[BoxData[
 RowBox[{"fueloildeliveriesTimeSeriesAggregate", "=", 
  RowBox[{"TimeSeriesAggregate", "[", 
   RowBox[{
    RowBox[{"TimeSeries", "[", "fueloildeliveriesTimeSeries", "]"}], ",", 
    "\"\<Month\>\"", ",", "Total"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.782349828149951*^9, 3.782349861938423*^9}, {
  3.782349894043723*^9, 
  3.782349933492323*^9}},ExpressionUUID->"2282018d-12af-45b0-80aa-\
826fe34ff61a"],

Cell["\<\
This plot has both the monthly aggregate, and individual delivery time \
series.  \
\>", "Text",
 CellChangeTimes->{{3.7824198248988113`*^9, 3.7824198382166796`*^9}, {
   3.782420094403119*^9, 3.782420149610607*^9}, {3.7832142945483203`*^9, 
   3.7832143183774805`*^9}, {3.7832150164290266`*^9, 3.78321508522871*^9}, 
   3.7832969330962524`*^9},ExpressionUUID->"1f29a52d-f37a-4248-87dd-\
dd179272c0e4"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fueloildeliveriesTimeSeries", ",", 
     "fueloildeliveriesTimeSeriesAggregate"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Deliveries\>\"", ",", "\"\<Monthly Totals\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7823499146161156`*^9, 3.7823499612031364`*^9}, {
  3.782428412467269*^9, 3.782428413826743*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"e52a1c55-f6d5-460b-b06d-05deed94f03b"],

Cell["\<\
An alternate presentation that clarifies each discrete time point is to use \
the DateListStepPlot. \
\>", "Text",
 CellChangeTimes->{{3.783214209600233*^9, 3.783214282095298*^9}, 
   3.783214327947667*^9},ExpressionUUID->"4271f4e6-e56f-45f8-9a74-\
1c618ea4cc4a"],

Cell[BoxData[
 RowBox[{"DateListStepPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fueloildeliveriesTimeSeries", ",", 
     "fueloildeliveriesTimeSeriesAggregate"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Deliveries\>\"", ",", "\"\<Monthly Totals\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7823500174015784`*^9, 3.782350031040827*^9}, {
  3.7823500754373417`*^9, 3.782350080328532*^9}, {3.782350181562868*^9, 
  3.7823501912525153`*^9}, {3.7824282101348248`*^9, 3.7824282939298334`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"124bf195-8829-40c4-9279-31814e910638"],

Cell["\<\
Setting Joined to False on a DateListPlot also clarifies the individual \
deliveries, and their spacing over time.\
\>", "Text",
 CellChangeTimes->{{3.782428760472994*^9, 3.782428768524995*^9}, {
   3.782428912713748*^9, 3.782428961291758*^9}, {3.78321441126976*^9, 
   3.7832144664418325`*^9}, 3.7832151127409678`*^9, {3.78338313669354*^9, 
   3.7833831375905533`*^9}},ExpressionUUID->"d6e45859-a6af-4800-b779-\
b784a78dd9b8"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"fueloildeliveriesTimeSeries", ",", "\[IndentingNewLine]", 
   RowBox[{"Filling", "->", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"Last", "@", "#1"}], ",", "Above"}], "]"}], " ", "&"}], 
     ")"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.782351054622991*^9, 3.7823510863210597`*^9}, {
  3.7823513563504806`*^9, 3.782351368618893*^9}, {3.7824278174870057`*^9, 
  3.782427876105569*^9}, {3.7824289772676363`*^9, 3.782428990309209*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"01ad6447-12b3-46dc-b850-b8e145d6c913"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fueloildeliveriesTimeSeries", ",", 
     "fueloildeliveriesTimeSeriesAggregate"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Filling", "->", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Deliveries\>\"", ",", "\"\<Monthly Totals\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.782351054622991*^9, 3.7823510863210597`*^9}, {
  3.7823513563504806`*^9, 3.782351368618893*^9}, {3.7823514696130886`*^9, 
  3.7823514806270375`*^9}, {3.782428322412281*^9, 3.782428340163123*^9}, {
  3.7824292713929625`*^9, 3.782429274460479*^9}, {3.78242931967974*^9, 
  3.782429322709369*^9}, {3.782429477138751*^9, 3.7824294780483327`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"1142f7dd-ea8f-4b3d-a042-ec045e8c3f0c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Create a form for entering fuel oil deliveries that allows the user to \
specify the date.\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.7824348243728476`*^9, 
  3.7824349083561964`*^9}},ExpressionUUID->"410ac7d2-c813-4dd5-be15-\
9e01b7d37134"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"82205d40-868c-4f8d-8ebe-\
eaf3414eee80"],

Cell["\<\
As a participant  in my school\[CloseCurlyQuote]s energy tracking initiative \
I want to be able to record fuel oil deliveries in a form, and specify the \
date that the delivery occurred.  \
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, {
  3.78243037000322*^9, 3.7824303893207693`*^9}, {3.7824304643802395`*^9, 
  3.7824304891173863`*^9}, {3.783216889279603*^9, 
  3.783216891388103*^9}},ExpressionUUID->"3fda4992-ee4f-473e-9f58-\
f2b311147642"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.7832169111291203`*^9, 
  3.783216913100068*^9}},ExpressionUUID->"83b2b9d6-33e7-44dd-86c3-\
dbc0124e41dc"],

Cell[TextData[{
 "In Chapter 1 the forms for entering register readings  assumed the date was \
Yesterday or Today.  In this form we add a new field to specify the date.   \
The Wolfram Language Interpreter function allows you to specify a wide \
variety of ways of interpreting a form\[CloseCurlyQuote]s fields.  In this \
case, we specify that the form be interpreted as a \
\[OpenCurlyDoubleQuote]Date\[CloseCurlyDoubleQuote], which according to",
 ButtonBox[" the documentation ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/interpreter/Date.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/interpreter/Date.html"],
 "will accept \[OpenCurlyDoubleQuote]any standard format or in natural \
language\[CloseCurlyDoubleQuote].  A \[OpenCurlyDoubleQuote]Hint\
\[CloseCurlyDoubleQuote] is added, which suggests the format that the user \
should enter, although it does not actually restrict the format.  "
}], "Text",
 CellChangeTimes->{{3.783216958342289*^9, 3.783217026746956*^9}, {
  3.7832173460903745`*^9, 
  3.7832173502986865`*^9}},ExpressionUUID->"ed978ce0-12e4-4316-a01b-\
e954d2f887f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"81541d6b-07f5-4c65-b354-\
b57edb977b5b"],

Cell[BoxData[
 RowBox[{"DeleteCloudExpression", "[", 
  "\"\<fueloildeliveriesCloudExpression\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7839592677379956`*^9, 3.7839592758357387`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"ed7d4ef5-6bff-4165-a51f-9302e0c1e9ab"],

Cell["\<\
First, we create a CloudExpression to hold the fuel oil deliveries.\
\>", "Text",
 CellChangeTimes->{{3.781564472131273*^9, 3.7815645101045523`*^9}, {
  3.781564561788581*^9, 3.7815645722421255`*^9}, {3.7815650688108115`*^9, 
  3.7815651165439577`*^9}, {3.781565167645939*^9, 3.781565246202303*^9}, {
  3.7815656487300854`*^9, 3.7815656783538065`*^9}, {3.781830502189267*^9, 
  3.7818305025591187`*^9}, {3.782435574639546*^9, 3.7824355863986464`*^9}, {
  3.7824356596980515`*^9, 
  3.782435680774643*^9}},ExpressionUUID->"5384a2ed-c941-4fe9-98f0-\
ea5573088a1f"],

Cell[BoxData[
 RowBox[{"fueloildeliveriesCloudExpression", "=", 
  RowBox[{"CreateCloudExpression", "[", 
   RowBox[{
   "fueloildeliveries", ",", "\"\<fueloildeliveriesCloudExpression\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7815645816959*^9, 3.7815646164664345`*^9}, {
  3.7818285868165627`*^9, 3.781828605668002*^9}, {3.782430983683997*^9, 
  3.7824310133471813`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"3b153795-1ca5-4f91-ab2d-dab160a6f950"],

Cell["\<\
The first Argument of FormPage creates a Date field that will interpret the \
entered value as a Date.  Try entering Dates in different formats within the \
Date field to test the flexibility of the Date Interpreter.  This form will \
add records of fuel oil deliveries to the CloudExpression from the prior \
story.  \
\>", "Text",
 CellChangeTimes->{{3.783217176949232*^9, 3.7832173139151697`*^9}, {
  3.7832174037534547`*^9, 
  3.7832175128652444`*^9}},ExpressionUUID->"35428bd9-4034-4f2b-af3a-\
3575d22249ab"],

Cell[BoxData[
 RowBox[{"fuelOilFormPage", "=", 
  RowBox[{"FormPage", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Date\>\"", "\[Rule]", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"Interpreter", "->", "\"\<Date\>\""}], ",", 
         RowBox[{
         "\"\<Hint\>\"", "\[Rule]", "\"\<Example January 15, 2019\>\""}]}], 
        "|>"}]}], ",", 
      RowBox[{"\"\<Gallons\>\"", "\[Rule]", "\"\<Integer\>\""}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{
       RowBox[{
       "CloudExpression", "[", "\"\<fueloildeliveriesCloudExpression\>\"", 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"#Date", ",", "#Gallons"}], "}"}]}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"AppearanceRules", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{
       "\"\<Title\>\"", "\[Rule]", "\"\<Enter a fuel oil delivery\>\""}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
       "\"\<Description\>\"", "\[Rule]", 
        "\"\<Enter a date and the number of gallons delivered\>\""}]}], 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.782431380212435*^9, 3.782431382648143*^9}, {
   3.78243158042542*^9, 3.7824317094936113`*^9}, {3.7824318868197193`*^9, 
   3.782431895788891*^9}, {3.782432197758339*^9, 3.782432321643605*^9}, {
   3.7824326532872458`*^9, 3.7824326815925903`*^9}, {3.7824328083079157`*^9, 
   3.78243283398748*^9}, 3.782433058666377*^9, {3.7824335544937973`*^9, 
   3.7824335885251856`*^9}, 3.7824337555033555`*^9, {3.7832170921137524`*^9, 
   3.7832171375023623`*^9}, {3.7850820586651974`*^9, 3.785082069195261*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f6725adb-381b-449c-9ef4-b5f4a099a279"],

Cell["\<\
As you enter new values in the form, evaluate the DateListPlot below to see \
if the form successfully added a record to the CloudExpression.\
\>", "Text",
 CellChangeTimes->{{3.782435947965622*^9, 3.7824360243312716`*^9}, {
  3.7832175182778244`*^9, 
  3.783217531276106*^9}},ExpressionUUID->"0d078073-38a1-45e2-a9ad-\
760d49c5f5f5"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"TimeSeries", "[", "\[IndentingNewLine]", 
    RowBox[{"Get", "[", 
     RowBox[{
     "CloudExpression", "[", "\"\<fueloildeliveriesCloudExpression\>\"", 
      "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Filling", "->", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"Last", "@", "#1"}], ",", "Above"}], "]"}], " ", "&"}], 
     ")"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.782432482664812*^9, 3.7824325081121087`*^9}, 
   3.7824325552086115`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"e84dabff-7459-4f64-9494-06391c4ea71f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import Monthly Bills from a Spreadsheet to a CloudExpression", \
"Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.7826034987631035`*^9, 
  3.782603512912363*^9}},ExpressionUUID->"8f04e260-d11b-40cb-871a-\
4f6a91dbddf8"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"23955c8f-04a4-4337-9855-\
f32aa099228e"],

Cell["\<\
-As a participant in my school\[CloseCurlyQuote]s energy tracking initiative \
I want to be able to import the school\[CloseCurlyQuote]s monthly bill data \
stored in a spreadsheet into a CloudExpression so that the data can be used \
by an application, or user with access to the CloudExpression.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.7826035203406916`*^9, 3.7826036175244665`*^9}, {
   3.783297115358287*^9, 
   3.7832971317873497`*^9}},ExpressionUUID->"862a74ca-868d-4033-a090-\
6e1d29090e88"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"d3cdd986-2436-4649-b8fe-\
b7c846d79b62"],

Cell["\<\
It is likely that someone in your school keeps a spreadsheet with years of \
utility bill data.  If you can access that spreadsheet, the data in it can be \
imported into the Wolfram Language and stored in a CloudExpression with a few \
lines of code.  \
\>", "Text",
 CellChangeTimes->{{3.7832159156055946`*^9, 3.783215958098325*^9}, {
  3.783216468421407*^9, 
  3.7832165262665076`*^9}},ExpressionUUID->"01f98725-4025-4915-b452-\
4abec59b1033"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"cc21a6c4-2db9-4ef6-b76b-\
a68b72a83509"],

Cell["\<\
In this story we will briefly touch upon additional data structures within \
the Wolfram Language.  In the first chapter we worked with lists of \
date-value pairs.  We still want to store the data as lists of date-value \
pairs, but the data will be imported into a Dataset structure, transformed \
into a structure that uses Associations, and is finally transformed to the \
list of date-value pairs that we will store in the cloud expression.

Dataset is similar to a typical table structure in a relational database, or \
even a spreadsheet.  The imported Dataset has columns with column Headers \
that define the data. The SemanticImport function will import data in a \
spreadsheet or similar file format, and return a Dataset object.\
\>", "Text",
 CellChangeTimes->{{3.782605491471799*^9, 3.7826055671338005`*^9}, {
  3.782605740285879*^9, 3.7826057478170185`*^9}, {3.783815971508592*^9, 
  3.7838161166539288`*^9}, {3.783816154046994*^9, 3.783816338452961*^9}, {
  3.783816387886318*^9, 3.7838165154701104`*^9}, {3.7838171420180225`*^9, 
  3.783817143148555*^9}, {3.7838171783564806`*^9, 
  3.7838172436941204`*^9}},ExpressionUUID->"6fcabc0e-a51d-4edd-ba88-\
0cbd903cd34f"],

Cell[BoxData[
 RowBox[{"monthlyBillDataset", "=", 
  RowBox[{
  "SemanticImport", "[", 
   "\"\<C:\\\\Users\\\\kylem\\\\Documents\\\\GitHub\\\\Computational-\
Sustainability-Toolkit\\\\Sample Data\\\\Sample_Monthly_Bills.csv\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.782605260943576*^9, 3.782605277223777*^9}, {
  3.7826053129286957`*^9, 3.7826053150586863`*^9}, {3.7826058725638595`*^9, 
  3.782605878351966*^9}, {3.782607942110058*^9, 3.7826079466745267`*^9}, {
  3.7833835043112726`*^9, 3.7833835453029385`*^9}, {3.785889754087166*^9, 
  3.7858897571541643`*^9}, {3.785889880564657*^9, 3.7858898820579576`*^9}, {
  3.785889932899312*^9, 3.7858899367603793`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"195879ad-6964-4438-a00d-74e064a3aa4a"],

Cell["\<\

   The use of Normal in the code below transforms the Dataset to a list of \
pairs of Associations.   \
\>", "Text",
 CellChangeTimes->{{3.782608007538926*^9, 3.782608039146466*^9}, {
  3.7832159935943885`*^9, 3.783216050861543*^9}, {3.7838172642131176`*^9, 
  3.7838172810018425`*^9}, {3.7871797141700535`*^9, 
  3.7871797155298285`*^9}},ExpressionUUID->"41893f77-f564-4a32-94fb-\
0cde0213a753"],

Cell[BoxData[
 RowBox[{"normalmonthlyBillDataset", "=", 
  RowBox[{"Normal", "[", "monthlyBillDataset", "]"}]}]], "Input",
 CellChangeTimes->{{3.7826079576433163`*^9, 3.7826079825781364`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"af4c2fd6-90e7-4bc2-87bf-17a0c352ff3e"],

Cell["\<\
The Map function, applies a function to each entry in a list.  In this case \
the code below takes each pair of associations, and creates a list of pairs \
of  Bill Date and KWH values.  This is the form that we save in the \
CloudExpression.\
\>", "Text",
 CellChangeTimes->{{3.782605758358466*^9, 3.7826057712479925`*^9}, {
   3.782606149411418*^9, 3.7826061775800133`*^9}, {3.7826063039752383`*^9, 
   3.7826063854693327`*^9}, {3.7826066321693482`*^9, 
   3.7826066720536027`*^9}, {3.7826067215020003`*^9, 3.782606772206865*^9}, {
   3.7826068095679574`*^9, 3.782606893738783*^9}, 3.782608002303982*^9, 
   3.782608049132856*^9, {3.782608126561119*^9, 3.7826081583710527`*^9}, {
   3.783216109724594*^9, 3.7832161363549976`*^9}, {3.7832161708648834`*^9, 
   3.783216255745957*^9}},ExpressionUUID->"d305d85b-8867-4d2a-af49-\
b0e250d4ae75"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"listofMonthlyBills", "=", 
    RowBox[{"Map", "[", "\n", "\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", "\"\<Bill Date\>\"", "]"}], ",", " ", 
         RowBox[{"#", "[", "\"\<KWH\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
      "\n", "\t\t", "normalmonthlyBillDataset"}], "]"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{
  3.782605866769375*^9, {3.782605904529055*^9, 3.782605975252324*^9}, {
   3.7826080722895517`*^9, 3.782608095600955*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"9dc75baf-d9f9-47ee-a25f-2a1366ab0792"],

Cell[BoxData[
 RowBox[{"CreateCloudExpression", "[", 
  RowBox[{"listofMonthlyBills", ",", "\"\<listofMonthlyBills\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7826069280200377`*^9, 3.78260694447195*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"51207e65-5e65-41b8-8ddb-73299f520275"],

Cell[BoxData[
 RowBox[{"DeleteCloudExpression", "[", "\"\<listofMonthlyBills\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7839593713613615`*^9, 3.7839594128079376`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"6d42a7c2-d35b-4258-a8d5-26fcea7a19d5"],

Cell["\<\
Now we can retrieve the values from the CloudExpression, and plot them.  \
\>", "Text",
 CellChangeTimes->{{3.7826076507759914`*^9, 
  3.7826076754796658`*^9}},ExpressionUUID->"c46ac32c-5adb-437b-91e1-\
830c03cd30fb"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<listofMonthlyBills\>\"", "]"}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826073448391848`*^9, 3.782607420402771*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"ef354c17-26f5-4a92-a243-b2e0fce359d0"],

Cell["\<\
Now we can tie the set of functions above into a single operation that we \
could could use on other spreadsheets.\
\>", "Text",
 CellChangeTimes->{{3.7826081817168484`*^9, 3.7826082586744604`*^9}, {
  3.7826083509774323`*^9, 3.7826083865993657`*^9}, {3.783383732087945*^9, 
  3.7833837411496935`*^9}},ExpressionUUID->"7d647f47-2ab2-42aa-9d7b-\
686dda43e2aa"],

Cell[BoxData[
 RowBox[{"CreateCloudExpression", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", "\"\<Bill Date\>\"", "]"}], ",", " ", 
        RowBox[{"#", "[", "\"\<KWH\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
     RowBox[{"Normal", "[", 
      RowBox[{"SemanticImport", "[", "\"\<enter file path\>\"", "]"}], 
      "]"}]}], "]"}], ",", "\"\<Monthly Bills\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.782607781952243*^9, 3.7826078417631474`*^9}, {
  3.782607897061167*^9, 3.782607902285023*^9}, {3.782608289776026*^9, 
  3.78260832806606*^9}, {3.7833837089608727`*^9, 3.7833837141242867`*^9}, {
  3.783384481184347*^9, 
  3.783384481689581*^9}},ExpressionUUID->"e6f96bf6-0c3d-4f16-bf33-\
68887663a38e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Import Interval Data from a Spreadsheet into a New CloudExpression\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
   3.7813835709195538`*^9, 3.781383573336465*^9}, 3.782691137393975*^9, {
   3.783118833560048*^9, 
   3.7831188341354427`*^9}},ExpressionUUID->"c5767d8d-3607-4906-bc25-\
ab1a8f4cda48"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"5425ca80-2e0e-4e49-8154-\
254b83a07fd3"],

Cell["\<\
As a participant in my School\[CloseCurlyQuote]s energy tracking initiative I \
want to be able to  import the interval data that is in a spreadsheet into a \
new CloudExpression so that the data can be stored in a central location and \
shared so that other users or applications can view or analyze the data.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.782691235351514*^9, 3.7826913583860674`*^9}, {
   3.7831192095670633`*^9, 3.7831193128373604`*^9}, {3.7831194636253924`*^9, 
   3.7831194975888443`*^9}, 3.7832974220274897`*^9, {3.7833837647302656`*^9, 
   3.783383787952819*^9}, 
   3.7871798184808207`*^9},ExpressionUUID->"2ebe2f53-2553-44d5-b10f-\
7e8b7e24e84f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"2bcd8bdf-9ad7-4a12-98e4-\
bd3a167e035e"],

Cell["\<\
Modern electrical meters, often referred to as \[OpenCurlyDoubleQuote]smart \
meters\[CloseCurlyDoubleQuote] are capable of recording and reporting energy \
consumption within relatively short intervals.  Many utilities now program \
their meters to record intervals of 15 , 30 or 60 minutes.  Many meters are \
capable of recording intervals as short as 1 minute, but the cost of \
processing and storing the volume of data resulting from 1 minute intervals \
is considerable.  

Interval data provides significant insight into how a building uses energy.  \
You can see when a building uses energy during the day, and infer what the \
major consumers are at different points of the day.  \
\>", "Text",
 CellChangeTimes->{{3.782691542488536*^9, 3.7826916991495686`*^9}, {
   3.7826919602175627`*^9, 3.7826921793229604`*^9}, {3.782692355899662*^9, 
   3.782692396842759*^9}, {3.7826924280934896`*^9, 3.782692444542083*^9}, {
   3.782692484522188*^9, 3.7826925159026957`*^9}, {3.782692566937211*^9, 
   3.782692620666343*^9}, {3.7826927913147354`*^9, 3.782692932730089*^9}, 
   3.7832974701673884`*^9, {3.787179835602309*^9, 
   3.7871798470307145`*^9}},ExpressionUUID->"bfb15df5-4ee4-4f51-b2f5-\
b0d5b3ed11a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"5b2324ff-c15c-4db0-b8ff-\
3be53205b124"],

Cell["\<\
One can use the same code to import interval data as we used to import \
monthly bill data.  The primary difference here is that the column headers on \
the imported file are different, and we name this CloudExpression \
\[OpenCurlyDoubleQuote]Interval Data\[CloseCurlyDoubleQuote].\[LineSeparator]\
\>", "Text",
 CellChangeTimes->{{3.782693096509152*^9, 3.782693133022027*^9}, {
  3.7826932640482492`*^9, 3.782693275936928*^9}, {3.782693358187136*^9, 
  3.782693371616357*^9}, {3.7826936083919754`*^9, 3.7826936356440516`*^9}, {
  3.783383893733053*^9, 3.783383910286925*^9}, {3.7833853753397093`*^9, 
  3.783385376808918*^9}},ExpressionUUID->"679ada35-3a88-40c0-940d-\
3d7059476f78"],

Cell[BoxData[
 RowBox[{"DeleteCloudExpression", "[", "\"\<Interval Data\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.78346432694279*^9, 3.7834643352491865`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"d3822027-a005-4231-8859-7236f9812975"],

Cell[BoxData[
 RowBox[{"CreateCloudExpression", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
        RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
     RowBox[{"Normal", "[", 
      RowBox[{
      "SemanticImport", "[", 
       "\"\<C:\\\\Users\\\\kylem\\\\Documents\\\\GitHub\\\\Computational-\
Sustainability-Toolkit\\\\Sample Data\\\\Sample_Interval_September.csv\>\"", 
       "]"}], "]"}]}], "]"}], ",", "\"\<Interval Data\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.782607781952243*^9, 3.7826078417631474`*^9}, {
   3.782607897061167*^9, 3.782607902285023*^9}, {3.782608289776026*^9, 
   3.78260832806606*^9}, {3.7826934505814857`*^9, 3.7826935923145733`*^9}, {
   3.783383847810232*^9, 3.783383882664234*^9}, 3.7833854127553062`*^9, {
   3.7858900708835397`*^9, 3.78589009847038*^9}, {3.785890229172728*^9, 
   3.7858902424117823`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"d9da9faf-34c3-43a9-a637-7215fbb521b5"],

Cell["\<\
Here we plot the interval data.  Notice the density of the data points.  A \
meter recording 15 minute interval data generates 96 data points in a day if \
it is measuring a single time series.  This is 2880 data points in a month \
compared to the single data point  that was available in the era of manually \
collected meter readings.  \
\>", "Text",
 CellChangeTimes->{{3.7832975271847477`*^9, 3.7832975458844433`*^9}, {
   3.783297831562169*^9, 3.7832979110805945`*^9}, {3.7832980062278557`*^9, 
   3.783298072879308*^9}, 3.7832981164851522`*^9, {3.783298164369691*^9, 
   3.783298235970495*^9}, {3.7832982799850197`*^9, 3.783298281635127*^9}, {
   3.787179942763199*^9, 
   3.7871799595417433`*^9}},ExpressionUUID->"d46c4352-945d-45a0-a5ba-\
565271be24c2"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826936656989613`*^9, 3.7826937078480787`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"46cdea8d-85d9-4992-adf3-34fe168bc6ff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Add Interval Data from a Spreadsheet  to an Existing CloudExpression\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.783118803258808*^9, 
  3.783118824886382*^9}, {3.7831198825690403`*^9, 
  3.783119888750103*^9}},ExpressionUUID->"641d7c4e-00a7-44f3-b8de-\
ec644f397045"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"63c278d9-fd22-4e35-9e82-\
9f6cb7002b34"],

Cell["\<\
As a participant in my school\[CloseCurlyQuote]s energy tracking initiative I \
want to be able to upload interval readings in a spreadsheet to an existing \
CloudExpression that contains additional interval data.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, 3.7831198955092444`*^9, {3.7831199373025646`*^9, 
   3.783119978793053*^9}, {3.783128318854502*^9, 3.783128320248164*^9}, {
   3.7833839962864833`*^9, 
   3.7833840088867497`*^9}},ExpressionUUID->"466388c3-aa39-4c7d-84c8-\
12b022ed8d60"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"45512cba-c7f7-46a4-aeee-\
671743c8985e"],

Cell["\<\
In the first story uploading interval data to a CloudExpression we created \
the CloudExpression, and uploaded a complete list of time-value pairs within \
the same function.  We require different code to add incremental data to an \
existing CloudExpression. \
\>", "Text",
 CellChangeTimes->{{3.7831270991645746`*^9, 3.7831272175759735`*^9}, {
   3.7831272578188086`*^9, 3.783127315062298*^9}, {3.7831273533869658`*^9, 
   3.783127356236942*^9}, {3.783127433114335*^9, 3.7831274856136947`*^9}, {
   3.7831275745387383`*^9, 3.783127591399539*^9}, 
   3.78759221552769*^9},ExpressionUUID->"e9a1464b-eff1-4c94-802d-\
03b8bec27695"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"4d937c56-654c-4b3e-a9f1-\
1511feca19da"],

Cell["\<\
First, we will use our code to create a list of time-value pairs of the \
incremental data that we wish to add.  The spreadsheet used here contains \
data for the month following the data imported in the prior user story.\
\>", "Text",
 CellChangeTimes->{{3.7831275982945127`*^9, 3.7831276030218906`*^9}, {
  3.7831277303392086`*^9, 3.7831277654815397`*^9}, {3.7833840860592117`*^9, 
  3.7833841261827607`*^9}},ExpressionUUID->"bb4a3dd7-cb3c-4789-9f5a-\
b95c8d728248"],

Cell[BoxData[
 RowBox[{"incrementalIntervalData", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
       RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
    RowBox[{"Normal", "[", 
     RowBox[{
     "SemanticImport", "[", 
      "\"\<C:\\\\Users\\\\kylem\\\\Documents\\\\GitHub\\\\Computational-\
Sustainability-Toolkit\\\\Sample Data\\\\Sample_Interval_October.csv\>\"", 
      "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.783125221793974*^9, 3.7831252296811943`*^9}, {
  3.7833840644447603`*^9, 3.7833840815835257`*^9}, {3.7871810465822487`*^9, 
  3.7871810737990446`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"b7e2a6b9-2808-4701-838d-88e597a0df54"],

Cell["\<\
Where we used AppendTo to add new register readings to an existing \
CloudExpression in the first chapter, that function would be very inefficient \
in the context of adding thousands of new records to a CloudExpression, as \
AppendTo returns an updated CloudExpression with each incremental value. This \
code uses the Put function to fully replace the existing content of \
CloudExpression \[OpenCurlyDoubleQuote]Interval Data\[CloseCurlyDoubleQuote] \
with completely new content.  The new content is a union of the existing data \
within the CloudExpression and the incrementalIntervalData.\
\>", "Text",
 CellChangeTimes->{{3.7831277751907916`*^9, 3.7831282812778897`*^9}, {
  3.783128352562916*^9, 3.7831283790073996`*^9}, {3.7831284120704737`*^9, 
  3.7831284292839947`*^9}, {3.783128471699484*^9, 3.7831284851570454`*^9}, {
  3.7832986014346313`*^9, 3.7832986192866116`*^9}, {3.783384208895087*^9, 
  3.7833842942901535`*^9}, {3.7833843260105224`*^9, 3.783384386220423*^9}, {
  3.783464537786643*^9, 3.7834646712577314`*^9}, {3.7834647147342424`*^9, 
  3.783464747172994*^9}, {3.783464951339049*^9, 3.7834649529213915`*^9}, {
  3.78346516594335*^9, 3.783465212208404*^9}, {3.783465332781146*^9, 
  3.7834653662864776`*^9}, {3.783465408501912*^9, 
  3.783465484151333*^9}},ExpressionUUID->"5cb41e44-8cc2-444d-9c4f-\
055b2f6f808f"],

Cell[BoxData[
 RowBox[{"Put", "[", 
  RowBox[{
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Get", "[", 
      RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
     ",", "\[IndentingNewLine]", "incrementalIntervalData"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.78346367786073*^9, 3.783463765043811*^9}, 
   3.783463821349887*^9, 3.783463862951646*^9, {3.783472156515688*^9, 
   3.7834721612262836`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"8f1b06af-9ddb-40b1-b7ce-07018aa1d66d"],

Cell["\<\
We can now visualize the CloudExpression to see an additional month of data \
has been added.\
\>", "Text",
 CellChangeTimes->{{3.7833845284557133`*^9, 3.7833845520776043`*^9}, {
  3.7875922840599146`*^9, 
  3.7875922858521214`*^9}},ExpressionUUID->"0722cd85-3b67-476d-af71-\
04b7a598a5b8"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826936656989613`*^9, 3.7826937078480787`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"83861167-a260-4df8-af4e-d5f43b5f3493"],

Cell["The code below ties it all together.", "Text",
 CellChangeTimes->{{3.783298706485909*^9, 
  3.783298720757865*^9}},ExpressionUUID->"c67976ed-1668-447c-afcb-\
ead6a018245b"],

Cell[BoxData[
 RowBox[{"Put", "[", 
  RowBox[{
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Get", "[", 
      RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
          RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], " ", "&"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"Normal", "[", 
        RowBox[{
        "SemanticImport", "[", 
         "\"\<C:\\\\Users\\\\kylem\\\\OneDrive\\\\Holderness \
Project\\\\Computational Sustainability \
Toolkit\\\\Sample_Interval_October.csv\>\"", "]"}], "]"}]}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7834657000303*^9, 3.7834657339979143`*^9}, {
   3.783471511296405*^9, 3.783471520426447*^9}, 3.7834721985571885`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"054c0ea6-4b25-4293-84c0-6f6bb0714414"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Not Complete- Use a Form to Add Interval Data from a Spreadsheet to an \
existing CloudExpression\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.7832118171159477`*^9, 
  3.783211901259347*^9}, {3.783384668158696*^9, 3.7833846860882835`*^9}, {
  3.7871812554479475`*^9, 
  3.787181260217619*^9}},ExpressionUUID->"9832afd5-a032-4b63-b1e9-\
9726497ec05d"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"b4436d23-37c2-42d9-9e9c-\
e4bd31f00cb1"],

Cell["\<\
As a participant in my school\[CloseCurlyQuote]s energy tracking initiative I \
want to be able to upload interval data from a CSV file to an existing \
CloudExpression through a web form.  \
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.7829532021676865`*^9, 3.7829532213222027`*^9}, {
   3.7829533459935102`*^9, 3.7829533789758043`*^9}, {3.783211640302099*^9, 
   3.7832116588135805`*^9}, {3.7832117710021877`*^9, 
   3.7832117921484303`*^9}, {3.7832121137773113`*^9, 3.783212143748186*^9}, 
   3.7871812315286965`*^9},ExpressionUUID->"e869defa-d13f-4035-a095-\
303e840dc410"],

Cell["\<\
To date I can\[CloseCurlyQuote]t get the form, either cloud deployed or \
locally to work.\
\>", "Text",
 CellChangeTimes->{{3.7871812693297315`*^9, 
  3.7871812858100233`*^9}},ExpressionUUID->"904e2594-3813-40fa-b01c-\
3cd097cf5857"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"16aad963-7ae0-4845-92cd-\
e3e03ee20e25"],

Cell["\<\
This code takes our function that appends interval data to an existing \
CloudExpression and places it in a FormPage.  The inputs to the page are a \
CSV file, and the name of the CloudExpression.  \
\>", "Text",
 CellChangeTimes->{{3.783212255620867*^9, 3.7832124068863907`*^9}, {
  3.7832125377825656`*^9, 
  3.7832125421147366`*^9}},ExpressionUUID->"a9240785-f209-4152-96d5-\
6ea8be64f423"],

Cell[BoxData[
 RowBox[{"intervalDataForm", "=", 
  RowBox[{"FormPage", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<CSV\>\"", "\[Rule]", "\"\<CSV\>\""}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<ExpressionName\>\"", ",", "\"\<Expression Name\>\""}], 
        "}"}], "\[Rule]", "\"\<String\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Put", "[", 
      RowBox[{
       RowBox[{"Union", "[", 
        RowBox[{
         RowBox[{"Get", "[", 
          RowBox[{"CloudExpression", "[", "#ExpressionName", "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
              RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], "&"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Normal", "[", 
            RowBox[{"SemanticImport", "[", "#CSV", "]"}], "]"}]}], "]"}]}], 
        "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"CloudExpression", "[", "#ExpressionName", "]"}]}], "]"}], 
     "&"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AppearanceRules", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{
       "\"\<Title\>\"", "\[Rule]", 
        "\"\<Upload a CSV with interval data\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<Description\>\"", "\[Rule]", 
        "\"\<Select a CSV file and provide Cloud Expression name.  The CSV \
should have columns with headers named IntervalEnd and Quantity.\>\""}]}], 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.782953404173899*^9, 3.7829534059051695`*^9}, {
   3.7829534688150473`*^9, 3.7829535124524827`*^9}, {3.782953644374713*^9, 
   3.7829536476870604`*^9}, {3.782955059154894*^9, 3.7829550602804956`*^9}, {
   3.782955167067848*^9, 3.78295517207465*^9}, {3.7829552063687754`*^9, 
   3.782955207270015*^9}, {3.7829562872398486`*^9, 3.78295631450456*^9}, {
   3.7829563680529413`*^9, 3.78295636893655*^9}, {3.7829565116259494`*^9, 
   3.7829565337792735`*^9}, {3.7829585578643885`*^9, 3.782958560898571*^9}, {
   3.782958897043867*^9, 3.782958961852641*^9}, {3.7829590162611694`*^9, 
   3.782959017686178*^9}, {3.7832102211083937`*^9, 3.7832102600584345`*^9}, {
   3.783210294965558*^9, 3.7832103202420893`*^9}, {3.783210396172617*^9, 
   3.7832104574043555`*^9}, {3.7832105772305527`*^9, 
   3.7832106252249546`*^9}, {3.7832122356504407`*^9, 3.78321223911904*^9}, 
   3.7832123427118287`*^9, {3.7832125780344543`*^9, 3.7832126095507326`*^9}, {
   3.783212647821923*^9, 3.783212722805827*^9}, 3.7832129829779587`*^9, 
   3.7833855653976994`*^9, {3.7834658298428946`*^9, 3.7834658570500484`*^9}, 
   3.7834659870300255`*^9, 3.783466041904434*^9, {3.7834714681745605`*^9, 
   3.7834714759056764`*^9}, {3.7834715764881144`*^9, 
   3.7834716099706917`*^9}, {3.7834716829093018`*^9, 
   3.7834716863539677`*^9}, {3.7834723086533184`*^9, 3.783472395561101*^9}, 
   3.783472438724613*^9, 3.7834724946669536`*^9, {3.7834729844942985`*^9, 
   3.783473038668968*^9}, {3.783473156697112*^9, 3.7834731686988235`*^9}, {
   3.7834733376596537`*^9, 3.783473349276293*^9}, {3.7834734674138255`*^9, 
   3.7834735052842236`*^9}, {3.783513654124173*^9, 3.783513749207389*^9}, 
   3.7835138894551554`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"90cb3cc2-0434-4c97-bdcd-6fff01b98b6f"],

Cell["\<\
When the form is defined we can CloudDeploy it so that anyone with permission \
can use it to upload data.  \
\>", "Text",
 CellChangeTimes->{{3.783298868569607*^9, 
  3.783298973251873*^9}},ExpressionUUID->"b36e5481-55f4-463d-b3cb-\
e4b1ad639a24"],

Cell[BoxData[
 RowBox[{"CloudDeploy", "[", "intervalDataForm", "]"}]], "Input",
 CellChangeTimes->{{3.7832112827479143`*^9, 3.78321129721129*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"e2ebc918-1f8a-4544-97c1-8532a3f28c33"],

Cell["\<\
We can plot the data again to see that additional data has been added.\
\>", "Text",
 CellChangeTimes->{{3.7833846167866187`*^9, 
  3.783384651147871*^9}},ExpressionUUID->"99fa105b-4b38-464b-b52d-\
8d254c1105a6"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.783514119473675*^9, 3.783514119703454*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"7e9efde0-201a-4404-bff2-7e52b2767659"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826936656989613`*^9, 3.7826937078480787`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"a33bdeac-9110-4c82-a328-08f01ace0377"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Specify the window of interval data displayed in a DateListPlot\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.782695233487632*^9, 
  3.7826952462265472`*^9}, {3.782695342503796*^9, 3.78269539095397*^9}, {
  3.7826955610668364`*^9, 3.7826955729152975`*^9}, {3.7832990759202123`*^9, 
  3.783299084620849*^9}},ExpressionUUID->"0fea2c02-785c-4aa3-8234-\
36f9f7ece4fb"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"05bbc73a-7db1-449a-950b-\
822c42cdd672"],

Cell["\<\
-As a participant in my school\[CloseCurlyQuote]s energy tracking initiative \
trying to understand how my school consumes electricity, I want to be able to \
specify the time window of interval data displayed in a DateListPlot or \
similar visualization.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.7826955858562403`*^9, 3.7826956387851954`*^9}, {
   3.7826956814125843`*^9, 3.782695690396172*^9}, {3.7828655050393853`*^9, 
   3.7828655058107*^9}, {3.7832991035782843`*^9, 3.783299115701083*^9}, {
   3.7875923783058386`*^9, 
   3.7875923805460043`*^9}},ExpressionUUID->"c2f12a3e-9683-44e5-961e-\
57d371bb9b30"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"bfa36419-a462-42f5-ad1d-\
ccb33a163c6a"],

Cell["\<\
In this story we introduce Manipulate, which is a primary function through \
which users of the system can manipulate the variables of an expression.  \
Manipulate \
\>", "Text",
 CellChangeTimes->{{3.7838180332605686`*^9, 
  3.7838181163361835`*^9}},ExpressionUUID->"0dafd423-634c-4e8d-8b95-\
37cc8038da1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"7b3fd20b-0b0a-4c1b-a19b-\
9b55e62ec9f9"],

Cell["\<\
To simplify our code later, first we will define a local TimeSeries object \
with our CloudExpression data.\
\>", "Text",
 CellChangeTimes->{{3.7828420452558374`*^9, 
  3.7828420899979925`*^9}},ExpressionUUID->"a51a177a-b0ac-4a75-afa1-\
e2a1e3024095"],

Cell[BoxData[
 RowBox[{"intervaldataTimeSeries", "=", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7828420045171933`*^9, 3.78284203227662*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"763c236c-4ebb-46b6-bd43-6aca323945d7"],

Cell["\<\
If you want to plot only a portion of a TimeSeries, instead of a complete \
TimeSeries, you apply the TimeSeriesWindow function to a TimeSeries object.  \
The first argument of the TimeSeriesWindow is the TimeSeries, and the second \
and third arguments (or perhaps second) are the first time and last time of \
the window that you wish to select.  First we will plot the complete \
TimeSeries.\
\>", "Text",
 CellChangeTimes->{{3.7828420982786417`*^9, 3.7828422078220887`*^9}, {
  3.782842353650498*^9, 3.7828424217060537`*^9}, {3.7828424625893726`*^9, 
  3.7828424743512974`*^9}},ExpressionUUID->"91487e0f-4b44-4237-bb9a-\
47fa937a864e"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", "intervaldataTimeSeries", "]"}]], "Input",
 CellChangeTimes->{{3.7828424460451655`*^9, 3.7828424561651306`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"0e86c8dd-cd91-418f-bdbb-de10739833cc"],

Cell["\<\
Here we will use TimeSeriesWindow to visualize a full day of interval data.\
\>", "Text",
 CellChangeTimes->{{3.7828426099337234`*^9, 
  3.782842639974512*^9}},ExpressionUUID->"61b136c2-67d0-4349-9f83-\
fde275d3ccaf"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeriesWindow", "[", 
   RowBox[{"intervaldataTimeSeries", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"2019", ",", "10", ",", "14", ",", "0", ",", "0"}], "}"}], 
       "]"}], ",", 
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"2019", ",", "10", ",", "15", ",", "0", ",", "0"}], "}"}], 
       "]"}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826972194301133`*^9, 3.7826973500716305`*^9}, {
  3.782697384353961*^9, 3.7826973970699635`*^9}, {3.7828424874563227`*^9, 
  3.782842494932201*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"0339766d-8388-4572-8d6b-639b91e1e0ea"],

Cell["\<\
That works, but we don\[CloseCurlyQuote]t really want to make people type in \
a date every time they want to select a different window.  We can make the \
user\[CloseCurlyQuote]s life easier by integrating Manipulate into the \
expression.  Manipulate is the primary function that allows users to interact \
with data on the screen.  The manipulate function allows you to manipulate \
multiple variables within an expression.  In this case we will allow the user \
to manipulate both the lower bound, and the upper bound of the \
TimeSeriesWindow.  To do this, we will take advantage of the TimeSeries \
properties \[OpenCurlyDoubleQuote]FirstTime\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]LastTime\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.782842687231789*^9, 3.782842743747988*^9}, {
   3.7828430073958445`*^9, 3.7828431769756517`*^9}, {3.7828432402442837`*^9, 
   3.7828433530267963`*^9}, 3.7828624900730195`*^9, {3.7828625261031275`*^9, 
   3.7828625283618174`*^9}, {3.7828655777924166`*^9, 3.7828656191542797`*^9}, 
   3.7875924281264715`*^9},ExpressionUUID->"4ee60f21-43c5-4f4f-bc14-\
fc64191ff389"],

Cell["\<\
To retrieve a property of a TimeSeries you can use the following form.\
\>", "Text",
 CellChangeTimes->{{3.782843377196599*^9, 3.782843400208971*^9}, 
   3.7828635977778864`*^9},ExpressionUUID->"7f6c8aff-e312-411e-a346-\
358c0f052fdc"],

Cell[BoxData[
 RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.78284336123862*^9, 3.782843370651904*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"c7dbb961-2c5f-4ebd-aeb0-a68dfd6acb48"],

Cell["\<\
This output is UnixTime, which is precise, but not exactly meaningful.  To \
see a human readable value we can wrap that in a DateObject.\
\>", "Text",
 CellChangeTimes->{{3.7828434099479523`*^9, 3.782843466743167*^9}, 
   3.7828596727766647`*^9, {3.7828597126974993`*^9, 3.7828597179882917`*^9}, {
   3.7828656404140253`*^9, 
   3.782865641774828*^9}},ExpressionUUID->"b8ff6fa7-bbab-4793-abfb-\
bf8aee3fd4ae"],

Cell[BoxData[
 RowBox[{"DateObject", "[", 
  RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7828431913205805`*^9, 3.782843218567355*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"72c12528-355a-4cbb-9ab0-5fde38b4e89d"],

Cell["\<\
In a Manipulate expression you specify the variables within the expression \
that you wish to manipulate, and then you define the parameters for each \
variable individually.  In this case \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote] \
define the window of the TimeSeriesWindow function.  The syntax used here to \
define each variable is {{variable, default value, \
\[OpenCurlyDoubleQuote]label\[CloseCurlyDoubleQuote]}, the lower bound of the \
window, and the upper bound of the window}. Note that the default value, and \
the lower and upper bounds of the window are defined as the \
\[OpenCurlyDoubleQuote]FirstTime\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]LastTime\[CloseCurlyDoubleQuote] of the TimeSeries \
being visualized.  This ensures that the complete TimeSeries can be viewed, \
and prevents selection of dates outside of the TimeSeries.\
\>", "Text",
 CellChangeTimes->{{3.7828613486030803`*^9, 3.7828614091279483`*^9}, 
   3.782862486508301*^9, {3.7828625452071824`*^9, 3.78286279932487*^9}, {
   3.782862839234349*^9, 3.7828628410932903`*^9}, {3.782862871926119*^9, 
   3.782863002947194*^9}, {3.78286363876204*^9, 
   3.7828636444452753`*^9}},ExpressionUUID->"2583cd8f-9afd-4dc0-993e-\
2dda4bed660e"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
    RowBox[{"TimeSeriesWindow", "[", 
     RowBox[{"intervaldataTimeSeries", ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", 
       RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], 
       ",", "\"\<Start Date\>\""}], "}"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<LastTime\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", 
       RowBox[{"intervaldataTimeSeries", "[", "\"\<LastTime\>\"", "]"}], ",", 
       "\"\<End Date\>\""}], "}"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<LastTime\>\"", "]"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7827802351623907`*^9, 3.782780272008725*^9}, {
  3.7827803096397114`*^9, 3.7827803339345407`*^9}, {3.7827804737115955`*^9, 
  3.782780590356553*^9}, {3.7827806295469475`*^9, 3.7827806977720594`*^9}, {
  3.7827813804067087`*^9, 3.782781578272168*^9}, {3.782781614232648*^9, 
  3.7827816512798414`*^9}, {3.7827817544642057`*^9, 3.782781763027568*^9}, {
  3.782859768452764*^9, 3.7828598719551096`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"d30c7146-0859-4686-9c29-5b8cd1de6671"],

Cell["\<\
Here we will define our first Function.  Functions allow you to simplify the \
task of using code that you will use repeatedly.  In the expression below we \
name the function manipulateDateListPlotTimeSeries, and name the argument \
timeseries_.  The code of the function is identical to the code above, but \
\[OpenCurlyDoubleQuote]timeseries\[CloseCurlyDoubleQuote] is used in every \
instance within the function that a specific TimeSeries would be specified.  \
After you evaluate the Function, you can use it with any TimeSeries as the \
argument.  \
\>", "Text",
 CellChangeTimes->{{3.78286306420121*^9, 3.782863410640526*^9}, {
  3.7875925017346163`*^9, 
  3.787592502494918*^9}},ExpressionUUID->"14ed4ac1-386f-4f89-8218-\
5baeea52fb2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"manipulateDateListPlotTimeSeries", "[", "timeseries_", "]"}], ":=", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
     RowBox[{"TimeSeriesWindow", "[", 
      RowBox[{"timeseries", ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", 
        RowBox[{"timeseries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
        "\"\<Start Date\>\""}], "}"}], ",", 
      RowBox[{"timeseries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
      RowBox[{"timeseries", "[", "\"\<LastTime\>\"", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"b", ",", 
        RowBox[{"timeseries", "[", "\"\<LastTime\>\"", "]"}], ",", 
        "\"\<End Date\>\""}], "}"}], ",", 
      RowBox[{"timeseries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
      RowBox[{"timeseries", "[", "\"\<LastTime\>\"", "]"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7828601158118153`*^9, 3.782860126913407*^9}, {
  3.782860246622946*^9, 3.7828603427945557`*^9}, {3.7828607907363124`*^9, 
  3.7828607916698704`*^9}, {3.7828608639614534`*^9, 3.7828609607818375`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"d64c8a47-4918-4bf5-bf5e-fb67d3259f62"],

Cell[BoxData[
 RowBox[{"manipulateDateListPlotTimeSeries", "[", "intervaldataTimeSeries", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7828607663046145`*^9, 3.782860772263241*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"2f286e00-df46-49a6-a393-bee5090dcf7c"],

Cell[BoxData[
 RowBox[{"manipulateDateListPlotTimeSeries", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.782865127605563*^9, 3.782865167612151*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"f857a89e-41a7-43d3-a658-703e6eddc771"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CloudDeploy", "[", 
   RowBox[{"Delayed", "[", "\[IndentingNewLine]", 
    RowBox[{"manipulateDateListPlotTimeSeries", "[", 
     RowBox[{"Get", "[", 
      RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
     "]"}], "]"}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.782905083981124*^9, 3.782905131791093*^9}, {
  3.78290522346834*^9, 3.7829052453197556`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"5818e0f6-2e1b-4305-bc2a-49a5147087da"],

Cell[BoxData[
 RowBox[{"CloudObjectInformation", "[", 
  RowBox[{
  "CloudObject", "[", 
   "\"\<https://www.wolframcloud.com/obj/b3f01761-a460-4540-be31-f76123eed2c9\
\>\"", "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[4]:=",ExpressionUUID->"704fba27-0704-44fc-8b58-691976706dbc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.787181627986189*^9, 
  3.787181657656258*^9}},ExpressionUUID->"d53a3e67-4e5c-4c45-848b-\
b82bc3d4bff1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1368, 829},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[1513, 35, 193, 3, 67, "Chapter",ExpressionUUID->"3874914f-f6d9-416e-997d-aa4a8d2d1bc9"],
Cell[CellGroupData[{
Cell[1731, 42, 158, 3, 67, "Section",ExpressionUUID->"1297906f-a5c4-48c0-be6c-0f75da1c59fe"],
Cell[1892, 47, 2479, 38, 188, "Text",ExpressionUUID->"36bde9a5-9c79-4e40-9b0f-e0b15ea86048"],
Cell[4374, 87, 375, 6, 28, "Input",ExpressionUUID->"e525e102-9263-4359-aa81-41888381f5e5"],
Cell[4752, 95, 390, 7, 28, "Input",ExpressionUUID->"6aedad36-7e09-417a-8708-98c5e5c0261c"],
Cell[5145, 104, 450, 9, 56, "Text",ExpressionUUID->"066af97f-4680-42a2-a984-ad7233d05aaf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5632, 118, 159, 3, 67, "Section",ExpressionUUID->"a2653a56-1706-4bc8-be5b-ab543eda3781"],
Cell[CellGroupData[{
Cell[5816, 125, 184, 3, 53, "Subsection",ExpressionUUID->"0364e56f-e1e1-4f10-bd60-a67a320d5725"],
Cell[CellGroupData[{
Cell[6025, 132, 164, 3, 44, "Subsubsection",ExpressionUUID->"1cd356d8-9f8c-4306-b403-34d7b3c739e1"],
Cell[6192, 137, 497, 9, 34, "Text",ExpressionUUID->"748dcee7-f4e8-42f2-93da-3e74b2d6a6a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6726, 151, 177, 3, 44, "Subsubsection",ExpressionUUID->"ee3de24e-ceac-44b6-bee3-bcb66f530214"],
Cell[6906, 156, 1035, 16, 78, "Text",ExpressionUUID->"b0e5cea6-ee86-4bf4-ba37-4f5179a3d61d"],
Cell[7944, 174, 694, 11, 56, "Text",ExpressionUUID->"d2d469e7-270b-46bd-aebe-54fabe586f6c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8675, 190, 171, 3, 44, "Subsubsection",ExpressionUUID->"aa103892-67b2-4777-a996-4c7059c7d91f"],
Cell[8849, 195, 265, 6, 34, "Text",ExpressionUUID->"0f59e036-1e17-42d1-8199-ecd18e19f696"],
Cell[9117, 203, 2157, 67, 67, "Input",ExpressionUUID->"bbbc88fa-7e98-4cda-994f-40db9207c8b7"],
Cell[11277, 272, 195, 3, 34, "Text",ExpressionUUID->"cf00e8b1-d03a-431e-b169-fbe95d0ad083"],
Cell[11475, 277, 275, 4, 28, "Input",ExpressionUUID->"212771d5-8895-4cd2-8241-94a1588bdde1"],
Cell[11753, 283, 237, 3, 28, "Input",ExpressionUUID->"2885b6a7-d835-44cc-b60a-4f8d984d8e3f"],
Cell[11993, 288, 347, 7, 34, "Text",ExpressionUUID->"3dd8c3c3-6312-4fa9-9e68-d91620472cee"],
Cell[12343, 297, 425, 9, 28, "Input",ExpressionUUID->"2282018d-12af-45b0-80aa-826fe34ff61a"],
Cell[12771, 308, 412, 8, 34, "Text",ExpressionUUID->"1f29a52d-f37a-4248-87dd-dd179272c0e4"],
Cell[13186, 318, 565, 14, 48, "Input",ExpressionUUID->"e52a1c55-f6d5-460b-b06d-05deed94f03b"],
Cell[13754, 334, 273, 6, 34, "Text",ExpressionUUID->"4271f4e6-e56f-45f8-9a74-1c618ea4cc4a"],
Cell[14030, 342, 643, 14, 28, "Input",ExpressionUUID->"124bf195-8829-40c4-9279-31814e910638"],
Cell[14676, 358, 437, 8, 34, "Text",ExpressionUUID->"d6e45859-a6af-4800-b779-b784a78dd9b8"],
Cell[15116, 368, 947, 18, 124, "Input",ExpressionUUID->"01ad6447-12b3-46dc-b850-b8e145d6c913"],
Cell[16066, 388, 1126, 23, 124, "Input",ExpressionUUID->"1142f7dd-ea8f-4b3d-a042-ec045e8c3f0c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[17241, 417, 347, 7, 53, "Subsection",ExpressionUUID->"410ac7d2-c813-4dd5-be15-9e01b7d37134"],
Cell[CellGroupData[{
Cell[17613, 428, 164, 3, 44, "Subsubsection",ExpressionUUID->"82205d40-868c-4f8d-8ebe-eaf3414eee80"],
Cell[17780, 433, 488, 9, 34, "Text",ExpressionUUID->"3fda4992-ee4f-473e-9f58-f2b311147642"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18305, 447, 164, 3, 44, "Subsubsection",ExpressionUUID->"83b2b9d6-33e7-44dd-86c3-dbc0124e41dc"],
Cell[18472, 452, 1177, 22, 78, "Text",ExpressionUUID->"ed978ce0-12e4-4316-a01b-e954d2f887f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19686, 479, 171, 3, 44, "Subsubsection",ExpressionUUID->"81541d6b-07f5-4c65-b354-b57edb977b5b"],
Cell[19860, 484, 265, 4, 28, "Input",ExpressionUUID->"ed7d4ef5-6bff-4165-a51f-9302e0c1e9ab"],
Cell[20128, 490, 572, 10, 34, "Text",ExpressionUUID->"5384a2ed-c941-4fe9-98f0-ea5573088a1f"],
Cell[20703, 502, 462, 9, 28, "Input",ExpressionUUID->"3b153795-1ca5-4f91-ab2d-dab160a6f950"],
Cell[21168, 513, 523, 10, 56, "Text",ExpressionUUID->"35428bd9-4034-4f2b-af3a-3575d22249ab"],
Cell[21694, 525, 1780, 41, 105, "Input",ExpressionUUID->"f6725adb-381b-449c-9ef4-b5f4a099a279"],
Cell[23477, 568, 344, 7, 34, "Text",ExpressionUUID->"0d078073-38a1-45e2-a9ad-760d49c5f5f5"],
Cell[23824, 577, 989, 22, 143, "Input",ExpressionUUID->"e84dabff-7459-4f64-9494-06391c4ea71f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24862, 605, 309, 5, 53, "Subsection",ExpressionUUID->"8f04e260-d11b-40cb-871a-4f6a91dbddf8"],
Cell[CellGroupData[{
Cell[25196, 614, 164, 3, 44, "Subsubsection",ExpressionUUID->"23955c8f-04a4-4337-9855-f32aa099228e"],
Cell[25363, 619, 575, 10, 56, "Text",ExpressionUUID->"862a74ca-868d-4033-a090-6e1d29090e88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25975, 634, 177, 3, 44, "Subsubsection",ExpressionUUID->"d3cdd986-2436-4649-b8fe-b7c846d79b62"],
Cell[26155, 639, 456, 9, 56, "Text",ExpressionUUID->"01f98725-4025-4915-b452-4abec59b1033"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26648, 653, 171, 3, 44, "Subsubsection",ExpressionUUID->"cc21a6c4-2db9-4ef6-b76b-a68b72a83509"],
Cell[26822, 658, 1192, 19, 144, "Text",ExpressionUUID->"6fcabc0e-a51d-4edd-ba88-0cbd903cd34f"],
Cell[28017, 679, 753, 13, 28, "Input",ExpressionUUID->"195879ad-6964-4438-a00d-74e064a3aa4a"],
Cell[28773, 694, 407, 9, 56, "Text",ExpressionUUID->"41893f77-f564-4a32-94fb-0cde0213a753"],
Cell[29183, 705, 271, 4, 28, "Input",ExpressionUUID->"af4c2fd6-90e7-4bc2-87bf-17a0c352ff3e"],
Cell[29457, 711, 851, 14, 56, "Text",ExpressionUUID->"d305d85b-8867-4d2a-af49-b0e250d4ae75"],
Cell[30311, 727, 666, 16, 105, "Input",ExpressionUUID->"9dc75baf-d9f9-47ee-a25f-2a1366ab0792"],
Cell[30980, 745, 288, 5, 28, "Input",ExpressionUUID->"51207e65-5e65-41b8-8ddb-73299f520275"],
Cell[31271, 752, 251, 4, 28, "Input",ExpressionUUID->"6d42a7c2-d35b-4258-a8d5-26fcea7a19d5"],
Cell[31525, 758, 227, 5, 34, "Text",ExpressionUUID->"c46ac32c-5adb-437b-91e1-830c03cd30fb"],
Cell[31755, 765, 354, 7, 28, "Input",ExpressionUUID->"ef354c17-26f5-4a92-a243-b2e0fce359d0"],
Cell[32112, 774, 369, 7, 34, "Text",ExpressionUUID->"7d647f47-2ab2-42aa-9d7b-686dda43e2aa"],
Cell[32484, 783, 810, 18, 48, "Input",ExpressionUUID->"e6f96bf6-0c3d-4f16-bf33-68887663a38e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[33343, 807, 349, 7, 53, "Subsection",ExpressionUUID->"c5767d8d-3607-4906-bc25-ab1a8f4cda48"],
Cell[CellGroupData[{
Cell[33717, 818, 164, 3, 44, "Subsubsection",ExpressionUUID->"5425ca80-2e0e-4e49-8154-254b83a07fd3"],
Cell[33884, 823, 742, 12, 56, "Text",ExpressionUUID->"2ebe2f53-2553-44d5-b10f-7e8b7e24e84f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34663, 840, 177, 3, 44, "Subsubsection",ExpressionUUID->"2bcd8bdf-9ad7-4a12-98e4-bd3a167e035e"],
Cell[34843, 845, 1221, 20, 144, "Text",ExpressionUUID->"bfb15df5-4ee4-4f51-b2f5-b0d5b3ed11a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36101, 870, 171, 3, 44, "Subsubsection",ExpressionUUID->"5b2324ff-c15c-4db0-b8ff-3be53205b124"],
Cell[36275, 875, 695, 11, 78, "Text",ExpressionUUID->"679ada35-3a88-40c0-940d-3d7059476f78"],
Cell[36973, 888, 242, 4, 28, "Input",ExpressionUUID->"d3822027-a005-4231-8859-7236f9812975"],
Cell[37218, 894, 1099, 22, 86, "Input",ExpressionUUID->"d9da9faf-34c3-43a9-a637-7215fbb521b5"],
Cell[38320, 918, 772, 13, 56, "Text",ExpressionUUID->"d46c4352-945d-45a0-a5ba-565271be24c2"],
Cell[39095, 933, 350, 7, 28, "Input",ExpressionUUID->"46cdea8d-85d9-4992-adf3-34fe168bc6ff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39494, 946, 372, 7, 53, "Subsection",ExpressionUUID->"641d7c4e-00a7-44f3-b8de-ec644f397045"],
Cell[CellGroupData[{
Cell[39891, 957, 164, 3, 44, "Subsubsection",ExpressionUUID->"63c278d9-fd22-4e35-9e82-9f6cb7002b34"],
Cell[40058, 962, 565, 10, 34, "Text",ExpressionUUID->"466388c3-aa39-4c7d-84c8-12b022ed8d60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40660, 977, 177, 3, 44, "Subsubsection",ExpressionUUID->"45512cba-c7f7-46a4-aeee-671743c8985e"],
Cell[40840, 982, 640, 11, 56, "Text",ExpressionUUID->"e9a1464b-eff1-4c94-802d-03b8bec27695"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41517, 998, 171, 3, 44, "Subsubsection",ExpressionUUID->"4d937c56-654c-4b3e-a9f1-1511feca19da"],
Cell[41691, 1003, 478, 8, 56, "Text",ExpressionUUID->"bb4a3dd7-cb3c-4789-9f5a-b95c8d728248"],
Cell[42172, 1013, 797, 18, 67, "Input",ExpressionUUID->"b7e2a6b9-2808-4701-838d-88e597a0df54"],
Cell[42972, 1033, 1347, 20, 78, "Text",ExpressionUUID->"5cb41e44-8cc2-444d-9c4f-055b2f6f808f"],
Cell[44322, 1055, 624, 14, 67, "Input",ExpressionUUID->"8f1b06af-9ddb-40b1-b7ce-07018aa1d66d"],
Cell[44949, 1071, 300, 7, 34, "Text",ExpressionUUID->"0722cd85-3b67-476d-af71-04b7a598a5b8"],
Cell[45252, 1080, 350, 7, 28, "Input",ExpressionUUID->"83861167-a260-4df8-af4e-d5f43b5f3493"],
Cell[45605, 1089, 178, 3, 34, "Text",ExpressionUUID->"c67976ed-1668-447c-afcb-ead6a018245b"],
Cell[45786, 1094, 1105, 27, 86, "Input",ExpressionUUID->"054c0ea6-4b25-4293-84c0-6f6bb0714414"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46940, 1127, 454, 9, 53, "Subsection",ExpressionUUID->"9832afd5-a032-4b63-b1e9-9726497ec05d"],
Cell[CellGroupData[{
Cell[47419, 1140, 164, 3, 44, "Subsubsection",ExpressionUUID->"b4436d23-37c2-42d9-9e9c-e4bd31f00cb1"],
Cell[47586, 1145, 648, 11, 34, "Text",ExpressionUUID->"e869defa-d13f-4035-a095-303e840dc410"],
Cell[48237, 1158, 244, 6, 34, "Text",ExpressionUUID->"904e2594-3813-40fa-b01c-3cd097cf5857"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48518, 1169, 171, 3, 44, "Subsubsection",ExpressionUUID->"16aad963-7ae0-4845-92cd-e3e03ee20e25"],
Cell[48692, 1174, 403, 8, 34, "Text",ExpressionUUID->"a9240785-f209-4152-96d5-6ea8be64f423"],
Cell[49098, 1184, 3478, 69, 162, "Input",ExpressionUUID->"90cb3cc2-0434-4c97-bdcd-6fff01b98b6f"],
Cell[52579, 1255, 258, 6, 34, "Text",ExpressionUUID->"b36e5481-55f4-463d-b3cb-e4b1ad639a24"],
Cell[52840, 1263, 225, 3, 28, "Input",ExpressionUUID->"e2ebc918-1f8a-4544-97c1-8532a3f28c33"],
Cell[53068, 1268, 222, 5, 34, "Text",ExpressionUUID->"99fa105b-4b38-464b-b52d-8d254c1105a6"],
Cell[53293, 1275, 266, 5, 28, "Input",ExpressionUUID->"7e9efde0-201a-4404-bff2-7e52b2767659"],
Cell[53562, 1282, 350, 7, 28, "Input",ExpressionUUID->"a33bdeac-9110-4c82-a328-08f01ace0377"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53961, 1295, 467, 8, 53, "Subsection",ExpressionUUID->"0fea2c02-785c-4aa3-8234-36f9f7ece4fb"],
Cell[CellGroupData[{
Cell[54453, 1307, 164, 3, 44, "Subsubsection",ExpressionUUID->"05bbc73a-7db1-449a-950b-822c42cdd672"],
Cell[54620, 1312, 685, 12, 56, "Text",ExpressionUUID->"c2f12a3e-9683-44e5-961e-57d371bb9b30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55342, 1329, 177, 3, 44, "Subsubsection",ExpressionUUID->"bfa36419-a462-42f5-ad1d-ccb33a163c6a"],
Cell[55522, 1334, 318, 7, 34, "Text",ExpressionUUID->"0dafd423-634c-4e8d-8b95-37cc8038da1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55877, 1346, 171, 3, 44, "Subsubsection",ExpressionUUID->"7b3fd20b-0b0a-4c1b-a19b-9b55e62ec9f9"],
Cell[56051, 1351, 261, 6, 34, "Text",ExpressionUUID->"a51a177a-b0ac-4a75-afa1-e2a1e3024095"],
Cell[56315, 1359, 352, 7, 28, "Input",ExpressionUUID->"763c236c-4ebb-46b6-bd43-6aca323945d7"],
Cell[56670, 1368, 649, 11, 56, "Text",ExpressionUUID->"91487e0f-4b44-4237-bb9a-47fa937a864e"],
Cell[57322, 1381, 235, 3, 28, "Input",ExpressionUUID->"0e86c8dd-cd91-418f-bdbb-de10739833cc"],
Cell[57560, 1386, 227, 5, 34, "Text",ExpressionUUID->"61b136c2-67d0-4349-9f83-fde275d3ccaf"],
Cell[57790, 1393, 737, 17, 28, "Input",ExpressionUUID->"0339766d-8388-4572-8d6b-639b91e1e0ea"],
Cell[58530, 1412, 1146, 17, 100, "Text",ExpressionUUID->"4ee60f21-43c5-4f4f-bc14-fc64191ff389"],
Cell[59679, 1431, 245, 5, 34, "Text",ExpressionUUID->"7f6c8aff-e312-411e-a346-358c0f052fdc"],
Cell[59927, 1438, 235, 3, 28, "Input",ExpressionUUID->"c7dbb961-2c5f-4ebd-aeb0-a68dfd6acb48"],
Cell[60165, 1443, 420, 8, 34, "Text",ExpressionUUID->"b8ff6fa7-bbab-4793-abfb-bf8aee3fd4ae"],
Cell[60588, 1453, 278, 5, 28, "Input",ExpressionUUID->"72c12528-355a-4cbb-9ab0-5fde38b4e89d"],
Cell[60869, 1460, 1300, 20, 100, "Text",ExpressionUUID->"2583cd8f-9afd-4dc0-993e-2dda4bed660e"],
Cell[62172, 1482, 1546, 33, 86, "Input",ExpressionUUID->"d30c7146-0859-4686-9c29-5b8cd1de6671"],
Cell[63721, 1517, 755, 13, 78, "Text",ExpressionUUID->"14ed4ac1-386f-4f89-8218-5baeea52fb2b"],
Cell[64479, 1532, 1398, 32, 86, "Input",ExpressionUUID->"d64c8a47-4918-4bf5-bf5e-fb67d3259f62"],
Cell[65880, 1566, 256, 4, 28, "Input",ExpressionUUID->"2f286e00-df46-49a6-a393-bee5090dcf7c"],
Cell[66139, 1572, 366, 7, 28, "Input",ExpressionUUID->"f857a89e-41a7-43d3-a658-703e6eddc771"],
Cell[66508, 1581, 519, 10, 67, "Input",ExpressionUUID->"5818e0f6-2e1b-4305-bc2a-49a5147087da"],
Cell[67030, 1593, 297, 7, 28, "Input",ExpressionUUID->"704fba27-0704-44fc-8b58-691976706dbc"],
Cell[67330, 1602, 152, 3, 28, "Input",ExpressionUUID->"d53a3e67-4e5c-4c45-848b-b82bc3d4bff1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

