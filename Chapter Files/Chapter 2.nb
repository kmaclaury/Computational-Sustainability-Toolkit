(* Content-type: application/vnd.wolfram.cdf.text *)

(*** Wolfram CDF File ***)
(* http://www.wolfram.com/cdf *)

(* CreatedBy='WolframDesktop 12.0' *)

(***************************************************************************)
(*                                                                         *)
(*                                                                         *)
(*  Under the Wolfram FreeCDF terms of use, this file and its content are  *)
(*  bound by the Creative Commons BY-SA Attribution-ShareAlike license.    *)
(*                                                                         *)
(*        For additional information concerning CDF licensing, see:        *)
(*                                                                         *)
(*         www.wolfram.com/cdf/adopting-cdf/licensing-options.html         *)
(*                                                                         *)
(*                                                                         *)
(***************************************************************************)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[      1091,         20]
NotebookDataLength[    275679,       5093]
NotebookOptionsPosition[    263136,       4905]
NotebookOutlinePosition[    263479,       4920]
CellTagsIndexPosition[    263436,       4917]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Chapter 2: Additional Data Types and Sources", "Chapter",
 CellChangeTimes->{{3.7825181358923206`*^9, 
  3.7825181579233694`*^9}},ExpressionUUID->"3874914f-f6d9-416e-997d-\
aa4a8d2d1bc9"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.7825184147851725`*^9, 
  3.78251841901578*^9}},ExpressionUUID->"1297906f-a5c4-48c0-be6c-\
0f75da1c59fe"],

Cell["\<\
In the first chapter we demonstrated how to build  simple components to track \
electrical energy consumption by recording register readings from the face of \
the meter.  In this chapter we will explore how to define components to track \
other data types, such as records of bulk deliveries of commodities such as \
fuel oil, or wood. 

We will also explore how to import historical data into the application from \
a spreadsheet.  If you engage with your school administrators you will \
probably find that someone at your school has a spreadsheet of monthly \
utility bills that goes back many years.  Importing data from a spreadsheet \
will enable you to quickly add your school\[CloseCurlyQuote]s historical \
energy consumption to your application.  

You may also find that your school\[CloseCurlyQuote]s utility company makes \
historical bills, or even much finer grained data, available for download \
from their website.  Take some time to explore the website of your utility \
company, and keep an eye open for the \[OpenCurlyDoubleQuote]Green Button\
\[CloseCurlyDoubleQuote].  The Green Button Initiative defined a standard \
data format that many utilities use to enable their customers to download \
their data.  \
\>", "Text",
 CellChangeTimes->{{3.7825184279953423`*^9, 3.782518438173025*^9}, {
   3.7825185627408857`*^9, 3.782518584125287*^9}, {3.7825196254013453`*^9, 
   3.7825196644890404`*^9}, {3.7825197798474183`*^9, 3.782519855662917*^9}, {
   3.782521618473936*^9, 3.7825216484809933`*^9}, {3.7825218363655214`*^9, 
   3.782521874164909*^9}, {3.7825221132374754`*^9, 3.7825221136073666`*^9}, {
   3.7825225860286922`*^9, 3.782522618827344*^9}, {3.7825226875428247`*^9, 
   3.782522738101033*^9}, {3.7825229226349835`*^9, 3.7825229576488113`*^9}, {
   3.7825231593859234`*^9, 3.7825232235693054`*^9}, {3.7825235187504225`*^9, 
   3.782523548800327*^9}, {3.7825237417868333`*^9, 3.7825237473562455`*^9}, {
   3.7825243186199603`*^9, 3.782524336180976*^9}, {3.782524372213895*^9, 
   3.7825244052992334`*^9}, {3.78260422466164*^9, 3.7826043072922783`*^9}, 
   3.782604339243723*^9, {3.7826043735347214`*^9, 3.7826044816517153`*^9}, {
   3.7832134167852592`*^9, 3.783213424516701*^9}, {3.783213456590485*^9, 
   3.7832134739777174`*^9}, {3.7833825653187857`*^9, 3.783382589375515*^9}, {
   3.783382662765668*^9, 3.7833827459213333`*^9}, {3.784421465583664*^9, 
   3.784421531550855*^9}},ExpressionUUID->"36bde9a5-9c79-4e40-9b0f-\
e0b15ea86048"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WebImageSearch", "[", 
  RowBox[{"\"\<Green Button Initiative\>\"", ",", "\"\<Images\>\"", ",", 
   RowBox[{"MaxItems", "\[Rule]", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7826036732720895`*^9, 3.782603684721946*^9}, {
  3.782603725568551*^9, 3.782603760927023*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"e525e102-9263-4359-aa81-41888381f5e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
/h8oYv4rLolDEfu6WvxnuvMfuf9ZVB3bU8cHoKhTGUW6//806/8N9TtA33zz
zWsO/b+28z/B9P/Xf76e3P/7bhPy3J7O/9yi/j+I62of6UHnmfN/7BbyP7sX
Kr+jCznrqu3/88C/qAGlsvoTDQAOb6UGAPsffvghZX9hLLp/V1eZ/Z+986/r
/ws7/4tjUMTeZ/X8H9PzH7mvC4rc2wU1PtIPRZ104P8W9P+R8z+k/7eSxNei
7Qt98cn6/3Xnf2znf4M5//fMnKby+Z+3niDP7X7+99b1/7c6lYZqH+pB59fk
/zk7/xAbFjb/F9z41+wBYCsrxgBcA/LSqAa8TzUA4vHC/gH2586dS9lfFIfu
3/0cKn2+P2G/jMB+WTH2V2r/jvzn3QL+YX5t/D/nyH/kj51RE9CAE+lF0v9P
zv9iju6b8IDE16r93/riUzn/J57/td3/Ecz5f/g2uXT+/4+PkedusryTP/4L
4fxf68w0VOdgdzqvB56l83w4EP89C4n/zjL/+XL/vxP/5VT+mQaUZhoQjzXg
/fffL1QN+O///m/07rvvophJmP3PKPulgP18yn6Zn+2+X8u/FPvbz/8VDv9d
3Pk/zPiH9QHr5CfgvzPhP3J3J/TUIaYBt/j8H7n/A3N075jSEl+7T+3yxSc7
/6+7/8N2/1cw9//0+Wsv6fnKv1qP7AE+vjSlSM//tz6Zjh4G9mE+nfg/rvB/
upD4f9Hi32sPkGMOwKz0zQyqAdn9UdwHGYTPwtAAYP+tt95C0ZO7o3s/x+zv
eY78zdL5aTL7PmJ/p96fQuP/tML/ce/8V9/VCT19sD+KusXn/xstaU/v/xlx
j8TX6SunffHJ7v/R3f9lu/8zKSmpm1/+4buk4vPBd0vJ/Z9fJcnf/rqF9/+0
Pp6G6u3vQedRx/8Rzj+LAUT+WQ5QfPjX5ACiBmAOS12gGgCcQpwerh9g/803
36TsfxFP2b8wQGJf9P262L9I+f8C879H4Z/X/o6x3N+Nf8x+5M6OqPqOTugZ
0IBbdP8Pvf8zmXB015A7JL7ybuT54rNDhw6dDf39n7b7v4O5//eVVS9Jz1dm
ZnV2/3echv9ehX7/X5vjqaj+vh50/vYw/vcx/g8WHf8VOP+6OwB85ACyBmRY
GnBxAIr7Szr605/+FJbvA8H3ed544w3MPo75F2P293YT2M+Q2fcb+zuc/S8y
/g8y/vcx/vfI/Edu74Ae3I414ABem4dTC/3+P+AG7v+O+LCFxFapYff6Yp/d
/9vW0N//rf3+h9/7/6EeKT3jlErs+x9RnvgP5/2/bY6mogY/9aDz9mMngf8u
Av/CHoBLD0Dh8N/X1zkAWw6giwEUDYj9MAO9/vrrxHcH+wPsv/baayh6Cvb7
Xyag+3+y2C8tsG/3/cHH/reEf93e3+GuAv9dBP470XW0g/IfubUDeghrQLN9
fZXe3/Df/wt358D3Pyq/00Ri67EZ9X3xL9z/r/v+h/b7X36//7P1xBbpGe8d
W4bwT77/dQvv/2+HNaDRvp50vmDedjP+9zL+9z+r7AG47wGGnf/tev697gM4
xwB2DYj5azp65ZVXCMd+f+DfvPzyyxb7+7q7s+/F9wfY9+PnfgqVfx97f2Td
7LbzH7k5BdXe1hm12NevEO//74lafEe//wW1dJEtqLX7YZN9/8fp+1/a73/6
/f4f3EcsPiPcVwz8R8L3P9cFuAMoTN//icL21P4+qPr2jnS+dgbg38MeQGHw
X4nz75ADBKoDeNaAS1gDPspAs2fPRv/85z89PytnPwrY/4qxfzE49h19v8u9
X4XGf6DavxP/Oxn/24D/FMJ/5Kb2qP72Z1GbfQMK5/s/0Pu76ln00CftyF36
Iltw174fNrOysvYZzt//1H7/++DBg2v81gDLjigl9wB/2Jzwr//+d/i//9f8
QH/00LZOdJ4I/x3p/EEO51QDdNsDOFOY/Hs5C+gtD9BqwM+WBkTPy0CzZs1C
//mf/xnwOUEn5syZQ9i/72vM/n6B/Z+d2Q8U93uN/QuF/88x/z92Cbr2T9YR
538L439jexS5IRk9vrM7ard/YPi//we9Pys7oWo4foZamsgV1Nr8cMm+/+v0
/W/tGYCNGzfO88s/5CVSDyDOW4D/xss6uOwBhNADJNQAWx0YgOru6ELnB+Zp
O+N/lwP/HmuAhcJ/tp7/oGIABw0oI2kAHqt56Wj69OnoP/7jPxyfEdiHWCFq
KmZ/SSL1+/jfklqfR/Z9+37Nmf9C59+t9udQ+yfryeS/PeX/h2RU/Yf2qMku
vLb3qfyH1vvTjuz9dwhL759w9k/t/b/H0H8DoO28efNm+eW/69wucg/A6/VR
JH7+Bl8mBubf7x6gsAfQ9sBA9NjObiQmI/MDORrkaib/PmuAmYXFf0+Tf/Eu
cMcYIGQNYLFAQToqdXkgilqQ4agBEBu8+OKLzO+r7KeHxL6n+/5uBf9Off+B
an87hdx/C439Of+R3yehWhs6oOa7ewe59+fMP9n7C0Pvz6JFi2Y69P7e49AD
1GbixIlD/fI/45vp0nOWfeFBUgOovSiWfMs0PHuAcg0gCucATX7shWOx9nRe
Ngv8h1IDZDFAofHvcB+I2A8YOA/wpgHEFA34xz/+YT4bZ7/dVMY+jvlLY/bL
FISBfVvc7+77C4//zmGr/ZF1toHxvz4JRa5LRI9s7Ixa/9jXU+3fy94fnJt/
ZHEC/fbf4D9IXN34ucAXl3i+0xx6f+526gFo0KBBit8egC93L5ae8/7JFc09
gLbre1j8b9DzH8weQLM9fVCNDSkkF7P4Twm+BnCisPnvZPLvFAM45QF+NECr
A5jn0pcHoHafpKOpU6eif/u3fyMxP9QG2k2j+X4pYB//Nyr7ZX2z7yPuV+77
LVT+T4SQ+wu1P7Levmf8r01EkWsSUcPNz6J2fJ36qf1vEnz/Brn2X/m9pySm
Hp5axxf7wHCjRo3iHfb+72Z7AGIPgLkHmJeXl+/nbx3JPiw96z0j7yP8V5vX
mryPvz2AwDXAlnv6otqbOtJ5gPnYyPgPVAMI1Ack9AEUKv9iDCB9E8g5D3DT
AE86wDSgzcI0ogHAfvRLvdH9y5NQqQN29p25D8y+U9wv1vx13/sqNP7F2N+t
78c197dqfxL/3yWi6tie3ILX+Y8OtT8ftX849w9+E3JokSnIsf0wmZ+fnyfs
/al7/3exPQDdHmCU3z3An3/5Wb4HDMctfA/gyeUdw1oDbLe3P2q4Fc/buiSS
g5FYbGN7/zWAADlAYfBf+Xwf7TfBXPMATxqgxAKKDpQVNeDKAFT+UG9UaUsP
VGp3V1T6aE+TffXfiL9P5N4f+958f6Hw/1k0itjd2T32DzL3J+uP8J+AIlcn
oNpr26Pm23uFXPsDXsJx79e5c+f2uOz93cX2ALT3AO7evXuJ3xpAy1eaSc9L
vgOK36P+l4k4BwhfDbDpjp4k5iLjv57xH2wNwGUfsND4F+4FFb8L5poHuGiA
ayyg0wL87+A+sTLAPDa4X7CsyP5NHfeKz/fKvjbul7/zU/naLeJfF/uHlPsn
0XUI/K/C9m08arC+E2q7s2/wtb/1Vu0v1HO/e/fu/crQ3/sJ3N/ptgewcOHC
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
sbkXGw==
      "], {{0, 258}, {256, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{256, 258},
    PlotRange->{{0, 256}, {0, 258}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Mt7TJs7TNsrTOdZ3UcJ9btFb7APc7fw33hL/nc0vhjyf//v3WrLKLnQfVJ8/
y49e5CfgscG2IIpYNwsTUajKTEzrdDMansWuOhgeAlVtaBM4dzwiPCiIsZ6+
3tLSUkogJKrJS3R0dMCT0wNEhPjppfPN5/mzX/mn/90v8fNKpfLixYvt7e0A
eN8+KMAMlg6XnQW3XFVTfezEcRSQjtcXGT6PplgroMtMyYxpSoMLA89C1zEU
teoqP3WenzykuVBxpef3nTlRH/1003M7Fsh8rHbc7RDu4RDj6ZK42SVlq22S
l2nsBi7uHgbwLg8jAPmcF/djb6OXfLmfeDN72Zv75RbuV1u4V7Zyv97GvXov
99p9zN74lv4F3sH7+C0+87+buV9u5n7qw73kxb3gbfSCj8kLW0ye8zXe482l
bjLf6WOcsNE01t022dcl9T6HxC0g3CZ8k7n/3S6hXhuefjLiby++15Zdfbn3
iObieSGinGBdJSBXSILVCjc7peJnhBtXCZGAYLwkvMMTkCumT54+1dDUWFhc
lJufBwUipnDX1dWdPn2aYNYZxi6lvYKf4qK/LN4+7/d8044b3Rc0BtQyjXbR
AAHlTBaXlvT2942Oj1EHAM2wE76I9XugdIln7YyOFauWQY5CQcg/qVFM8aox
XnFcebltZPBPzVnRf37prpTvuYZ62cs22UR6wEnap26xSvU2SdzIJayHCzXZ
6WW024N7VgD4ZdC4xfjV+0zfut/idw9Z/+lR+7895vD+4057tzvu3e6w388p
w985M9AlJ8g1N8QtL2RBftiC/NAFuaFuOcGu2cEuWYGuGbAAhw9/aPe3x2z+
9D3L33/H7O0HTX59H/fzrdxPfLln4cA9uV2eXKo7l+phlu5tnuZtnuIJ9WKd
6A22bYM3uAV6bEx9LPYPL75T/XHDxf6jiosjrNuQ3ZpCOc16I1lFRvVmPGsE
pJkIYY8JzkHIBzCM6UxMTR4cOFRUUkxJhjT4gkeNdnBgYGByclJryBgXuz7+
y7P0EC91TnfQnGnUvOCWR0ZGGhsbCwoKKOuYnjZ+bGhoOHPuLGCmchHz8/EF
gqK45nngN1MzrCsY8niYn2EOWXE+53DdMx+/9vBLsrUxDyyK2AySraM3WSd5
miV7AGCG086NTDA87wOATX95n/nrD1j+9mHL9x5x+cd2oOu83885298tL2hB
YcjCotAFJWHOBUFOzEKcC4Mdi0KdikOcS2ROpaFOwpm9Lg5xKQrDb50LQ3HG
f2H/sTCMMZ8V5HrA3+WTHU4fPmnz3ves33nY/PUH8Ue5n2zlfuzDRMtud26n
B7w3Lg9C3S5qk1PopmXhW26P+faDPw7Z/dGvMw/XHlScP8dPDrN+P9bLrRKU
M/X14cwerZpJajG/hfEpPD0gffrsmebmZogNmjgAvwGk8ZzxJmQeCoL+iziY
KGaYiGUnDnV9AR7+PXgWD7EjTmcIN2jq0+DgICKUvXv3UiIcCbzKykq8zxJs
hJidgncx50F0PiqhA3ZGp1EJgT/CqHP8dK/mYu7xppdy33v05ahbI761OMh7
QbivRfA9FlEbrZI8TdO8GDN7BIZ/usX6N49av/tdu7887vzRDpd9gQuyghcW
yBYUh4NYx6Jg+5Jgh9IQ+/JgmJ1wxo9SsxPMtizEpjQYZlvCzH7WAtl/LAty
KA1yLAH5oS5FIagRzrlBi4vCl+TJFmYGL9gf4PqRn/1ff4jLAOHMe//YC5dn
vMvLKt0HVFtHbLQOXo8ocmGw182ybz30Yvjzmb/NHmroV164yE+P8TMkshRa
9bQKz0VHFV/62JVqlfgM4TqOHj2KBy7ObaT88LKyMjjqqakpXuKZxW+YX5Rf
gIf/0zzTIV6z+EJK9fDwcG9vb3FxMaXT0NQMPOempiaxT0mfNSSk0+vHvgXV
AYwhjKEnJ3jVCBv4UF7lFSf58ayzrak5b23Y/UPXIE8IUbfYzTYxXkYR9xgn
bTLd42P8rA8HSfwTX8s3H3T40w8c3n/SOSvEMR8eVeZSEuFcGmFfJrMtC7Ms
CzYrDTQtD4KZVASQGVX6mVb42VQEi3jDrMuDpGZbxow+QJ+xKAswL/ezKPOz
LA+0Kgu0KQ20Lva3KQxwKGbuHZ7ctRAmc8sPc8kJhoBx+OBHdn98zPyNh1DX
oHyM96ACekKHQGlDIDlE+9oGuzv6bbw7/bG0zDeyTjWf5Mcu8BOX+Mmr2kmw
PUNj7obVlvTPXHgtroeAx4jH29LSQtMkqXca/gTOpKurC4VCZUcKRCwyaZ7e
fybP4gVL+znFlHI8t87OTsCM54mnCv+Atg+v+/r6yEvQ82QpyoYUNZ564QS1
OK6ZnmIkz5xl43HyY/xYxkBN0vu/uHP3D5alfNs5brNj4hbIY4tULy7dk9vj
xTD+GSK4+01/+x37959clBO6uCDcJS/YJi/IqhiuNdS6LMyqPMy8LERgOMik
KoRZTTCZaW2ISW2gaU2gZUWQVUUQqLauFKwqBGZZHUIvYDai0WfqQixrg60E
s6kOheFNfINVWbBlKf50oHWR3mwLg+0Kgh3zgxcUyBZmh9h/8EOz3zxk9Kv7
uJe3ci/4Gj3jC3VkmuZjm7rZPmGzU4zP4vj7bk/97q69r+0/WHWEvywMVo5f
5qfGecWYWq4WqKaOTDFRitYTo7gPmvnQoUOFhYUsSBEOSoAB56IzERWITqKo
pYX71R1fP67/9BDvXQycqV6jNbxw4QKcMM0WoalGgLmiogJNoT5nUlAjTGAQ
wxR3C11x05qZCZZKoTmrG4dDPsKP5JxvTd3/mtfT2xeF+bgk+FrEuxvFrufi
1nOpG7k97twL3tzPN5v8/mHz9x+3z/AHMHCMjsVhdkUhVoUBVoUCVCUCYGXB
VuUhVpWhltVhZhXB5pUh5pVBMLOKQJhpeQDMoirYvDoYAFvUANRQ87pQi/ow
c1gde21Wy96H4TP4JBl9Cb3Gf7SqDEalsK0JA9tWAttw3XDjFqVBMPPiADQQ
TmXhzHvnhjhlBNh+8KTZu49wv9jCOlie8eZ2buISNnAx95jHbHCK8XIJ3LQ+
7bGkT17JvdB2lB87w0Y2JydY8olaoVWqKEWFBJ5Bs4myTS6XHzt2DNIOzpni
ROrnr6+vP336NME8fyaCKKH/Y3meM13i+PHjVVVVNK+Z2ju8xjM8d+4cfUZM
DSWemdgQ2FYLuQpCqo/6tGb0Eq9qlh9/Kuvtu9K+7ybzcYnebBm50SR+A5e2
kXVTPO3Jvehr9NoDNn993PGAvyskcYkMcgLcmhUHmBT6mZYEgF5rgzGWSgIZ
VOXBQNq2JlywMDuD2Vezs0gyGWEs8kwm/taqJtS+LtyuVobvYV9VKxNfg2QR
+Fnyq4ONy/3ROuDaADaUuWt5pFtJuFNeiGNmgM37T5i8BR3iyz3jiRs0SXM3
T9joEOvlHOWN279n5w+eyn6zYfLIOX7qhOoKHpGCZ8kh5KJZchfUtVZD0lon
LIBG2MC34OGLZUGqD74FqEvntYn9HmKN+E/jWSfJ4KJ3FAoFnlJ5efm+fftI
KlMk0tHRQevL0YPSGma/Cv9Xy3ozhIPNeOK1cl59UTdxXDv8RtmH9z0duDjU
1ync2y7OxzLek0vYyO3axD3jYfyTzZavf9vpr0+4HQiEl0M7blkQCIaNi/yM
S/0ghk0rA82qBJ9ZLvjk8hDLCmYg2aYayIXTm9YVobaVYXZVMphDpcyxKpyo
thOYFM2mTkasktkbzKGGmWNVmG1lCBmJEPhku5oQ21pmNjXBFtWB5lUBZpX+
ppX+XJWfUVWgMazc37TED1SbF/iZ5frhFpwKQiGw7f/+BNS1EVPXnia7PU1T
PM1jN1lHezpGeC4K9PJJ/9EbJR+c5scvaMcVQpagXDE16xwM6dDSlRwoOxrK
ubS0FEjTDHfgTSG5GFrOn3X7H8WzGE3whhoNwXby5EnqLALGTGNkZuTm5/Uf
OkidePS/CGz6j8KT1ysNuVoJWYiW9ITicvHRpsd+HHFn9INuwWyUzSbJhzXB
Ke6sy+Lnmy3f/rbr+9uXZocuypc5F4YyXVEaal4G2RAMhk2qg0xrgiEMzGqD
8CPTw5WhohHSRDXMrjoc5lATAXOqhsmca8JhTnURMMf6CKeGSDK8JnOoC3es
ZUafdK2NcKkJB9JkwBs1AmZbHQwDzNbVQeCZIV0diEsyrgngqv0JaapxrKKV
BVsUsypplxeMyBHi3+nDJ83efpD7mS/3nDd0tUmqp1Wih43M3TVg0x1R3/7O
nqC8Q7Un1VcnedVVxfiUapqUBk2YJWAIY+mSO5DT0H5iYI4DCgSN6fj4uDQk
FMdc/o151s2LeYlJPDEK7vAkEeiVlJRkZ2UUFRUgBNx3YG95ddWJM6enZhTC
PFM26qdUqDQqrWpGPTOtpHui7lMFc8taCOa24aFXiv62KsBnWZivSyTcsheL
+HZ5wllxv7jP7DcP23/0pN3+7fbZgfYFwYzk4mDTokCjEqERrww2rgxGlAdO
0LKTxIW3tGFxXBgMshlmVSOzrJVZ1YWzc02odW2YndTZMlYjYU51UZ9i9Bnn
mkjXmiiXavYC1QH/l3i2rQ5lHp7CQyGcxMWgosGEihaCGgcTLlVvTMyXBYFq
m+IQ++JQ3J1tpr/Nx0+yoUlGtQcUiHW6p1Oyt1vkpkVBG28K8nk+48228aEL
bGBRPalRyBVsCIY1cTqWGU56Q6GcGRufxBOekitUau2p02dLyyoys7Ny8nJz
8rJhQPrgwYMU1KAQRVHNSzKXpFLk83KrvcHxdRMsOaS1SZqNT86WF/Rwd3c3
reUidGZkZOVk1tRVnzx7hmX/6hWyRvwaPBX2oxD9qXgdBMYl7dSQ+uo/eioe
+3nCCtlW13Afq/ANZnEbmU/etZF70cv07e84fLDDOSvErSQCsR4K3bIoyKwY
QjTIpCzQqCLI2AAzjGCmTgnqiwDM8MYgWYTZuj5CMBm0BDQwzKEuDCb6YdHI
Pzs3Rom+WnTX8OEutVEwwtuBfYleTqOCkGhhUWFNKDQ5YUzhJIwhXR0Ko2vW
g10ealYK/R9kWRJiVy6DumZq6sMnjN64n/uxO5d+t3HyPdZJ7k4Jno7h7ovD
vL73v7F/acs/KD8/zCtZ3IGTkIGqE8QbRYiUSEuJBDiuXBmuqKrMyskuLC5A
Me3fvx8taW9vLyEttp7SDmreEPLzX54O+brgvc4h7ccQX9PCyPQanpmEGcRG
bi6r9XUN9RcuXaQeJLgI+hhNSKHcyBkNm8Q0rJRf0slP8xMNVwdfzP7D3cmP
2W5fbxfpbZu8xQxuOXUj95Q796v7rP78uP0+f4ecEPv8EJu8QIt8aM4As8JA
85JgBgD1vFWFGFeHECEEDCgSOtBkRLJ1bbje6mUM44Zw23pmDpAQDTKnhnDn
+nCcHRvD7ZtmzaE54romfsARbDdE2jVEkNk3stf4WqojFC2iCbCqCxOjSJge
aeFqRbNANFoVbl4WYlIYYJznZ5bvDwWCmmuTGwBd7frRduvXv83tvIdLuNMy
zcs21ccqZpOZ311rkx5+Lvt39VcOo3Ub0U1Na1murFKnkqsVU6oZxNfgWVAj
OsoWgI2MjNQ3NuzPOJBfOLs0WU9PD7lluVwu9VqirxbDn//rPPMGvSHNw6er
wjuIKQAzAkAa+9u/f29bR+uV4asIt0VVRh+m3ma1MNI3yauneN1VXnlEN5xz
uj3wd8867djkIPN23fUgF7eJS9zAeq5+vs3sd486fOIHklk3cmGwbakMAoNZ
aahVeZhVpcyiUga3DP9sUhMKAxVmNWESmEMFgCNs6vRmWx8JkmHEHqOxkWHs
3Bjh0hDh0hTpxBgOd2yJuJHht9dYS6R9c5TU7Joi6ZtZTamPANJoAmCgmgzX
ZkA6TIRZ76Urw3BHuC/WVV4UZJLvb1EagjNuf2Fh+MIDgZa/fZhlnvzYl0t3
5xLW26ZudYj2dQv2evLVlMyj9fAM0B5XlWNyYQrD6Ix8WqPSCeOtlH1KPOMY
Gxtr62gH0qSi4aXRtvb398NLz5mHOGfe/b8Avi/1kA5h0zvixAdUZIQYlMpV
XFy8d+9ePJO2trbLly/TfxG3C9GoIJjZFAmNTj2plF9WTqB9vMyrDmouP5X1
zh3pP3AO83ZO2GYS58klb+Ke9eX+9wHjdx61+YefU16YdW6gWV4AitW8Isy4
BMGdzLqClTh+FAUzPDPxTOqUetLQ1gMem4ZIqwYwzMy2MQJGjpRh3BQBjPUk
N4a7NkW4NUe6Nke6tFxjrq1RMOk7zs0Rs9YW7dQa5dgSKRp5b3w5/gQMzl90
1CLVEqT1XhrVkCFdwaJa3J1NZThuE3eNW7YoD2UtEaM60Dk/1G7vdvP3HkWz
ZfTSFi7+bqPYjW7J9zqGeNye+t30fa91TJy8IKR/XFGPT2gVap4NGrKHL8xr
Y1kxQnI1ymJ0dLylpQ3Fd+DAAaFhZXIRuhHFqjPMhRcZ0Bn6sr5u/r7sQ/Su
4o8ENsJAiC60VvQ02DTkrKyOjg6lfFqcE0d6g2kMYdMc/G8IPMTjeNpneXne
UGvSB7+6KfZ+mzAPs/CNxkme3J7NLHfo5c22H/q75Ec6FkdYF4Wg5TUuCjBl
TjiEK/Y3Kg5EEZuUBpuUh8AtG1UFM4zrZKa1YTDAbF4XSlEe8WzbGGVtMHhO
cp7EmzPQbSKDZ2Ywu7VEGSx6QSss5kZn+ozwsRjX1mjXZgCvN3wtvlw0hrTB
Uc/x1YQ0SIaZ18rYuZrJJ9OyEKhohAYwrtCPOe3qcPZmcZBNaahtYbBNhp/F
337A/Wob96wHgmXj+E3mkRtsIzwWyHwi3n2+8FjrGX7iMvwNr1RolQrlNDS1
WslmPkxPzyhmmDwGofLJaUTlXV1dtPQfChFFiRfitHHq95MqhH8DnnlJVCtu
UALljKAYT4DS5DKEAzBfvXxFM63ihQzPGaVaqdXPsRC+QaNUzyAMn+RVx7XD
n/RX+L+1BxrDJW6zafRGy52+xk+zcQTjtx9xzgi1yw62KQhGO2taFGhRHmxa
HsSVbOfKAy3qwk0r0DSjmQbA4QDYuDaUzKyOGQ3nMbcs9BjjDOds1cRgtmmK
ZjA3Rzkwv8qQm+N7gSixurAlZlFr/KLWWOl5cVvC4rY48Sy+vwS/aole3BS1
qFlvbk1Rro36mkJ/SO+oBaoJbAhsdm11TFfTGA25aASqrOOlKtxCaICY1cq4
ikCuxA9hL+tFLw2yKPS3yguwyfJ3yQ41/d2j3I89jJ7xtdjpbRG70TnWe4G/
B2Lq9zuLTvKAcnpCMwWVoVLN0NAVikOh1gBplqSHYprRjA6PoODgpWkhJurH
Q+GKUaHopf89DsKYXotD1UNDQ7Q+FdVoGkKdmJhggfSMhiWc61hYDZ5ptQol
m0mkmdTKx4V8jD82ZW95OsAl0MMh0sc2xdt8pze324v76TabPz3ukhXimBdm
nheAAN8E3rjEHzCbVQWZVgYKKUMBaJSNqkK5SnYGxiZ1Yab1MhjxDJhBCPlA
wsZK0BvEM2B2bI52ZPTCi87yTEi7tUUvaCeS45e06M9Ad2krGE5Y1pa4pD2R
zvQOzkvb4pa1xi1viVnWHA1b2hIDW9wSs6BZ77HB8yzSDbOimkJRhKW4Wlwz
s7pwoEv+2UKIC5igqgiFoOIqWVckdeiZFvmbFLJRGOuiYKssf7v9O2z/+rjJ
L+7lnvGw2O1lm+S1IG6bs5/73fHffaviH2f5UTYFeGaMPfyZKTbzhaUs6tNx
We/SDFtAAd64vb2dljqBd4JuLC8vh5amclcoFNRGi+H///VjTp/hqVOnSkpK
QLK4wklDQwMtmCxM8GOPTCMMT0G5IR5RaNmo3wQ/fVE3fpaf+H3D/ptDty4M
912+80Eu9A4u7m6jZz1tX/+Oy9+edN4faJ8daJ0fhFAIDS48kpACx9IqwDPM
uCoQAoOrDjaqCYERz4S0yDPru6gPtW0Is68PY10NjVG2gtIgmJ1aYiB3IXoJ
Y2LYpT3auS0K50WdcQtb4hY3xy1tYTBLz8taGcDSM3u/NXZpS+wSgeTlbfhf
MXiNN+HhmSZpY1LEqdUAtqDV8QJs2zXKcIUUmVo2yIhnQlqIZ/XCQzTwjEdh
XhZgVuoPMy0JMCtivR+O+cGuGYGOf/2B1WsPsLk2iXcbR65fuesRp0CPO+Mf
frvyo0HlhRFeMcXPKBCAq6blyhmNIb2ckc1aUlasIyMjzc3NlG9Do7rwV8eP
HxfTlsRh9M8LzzdTooiS48KFCzU1NQiHSTDjxvEjYBZT5qDKKAeUhRXMB2jH
1PIRtlqFvE959udFf1oddf/CqC3cjrWmse6mu7y5ZzZZvPbAgg/9FmeHOuYG
W+T4mRYEwBEBZuPyQJMyfzZ4XR5AQ9jgGTDP4Zn8s7ng5agvDqgAGARiONs3
QmYwz+zQMguzs4Cxm0A1zgs7YmF4B3qDEIXXJVveFn9do98y/9yZuKwrYVl7
3JJWeGb8d3j4WCaz22NdWE2JEepONJBmHtugQObwzJC+Mc8MZoS9FUHG5f4w
ozI/GJA2LWSj5K6FYYuyQlzef8L89Qcgp013+RhFrWfzXwI2rIm6/6Xs3/XO
nDnPT6BlHFVNKdkSCay7Q8OyGnm2mI/BTQ0PD7e0tBgm2mejiFGyp0+fNsyw
UEsHWT57/9s3oXdOelCoS5dEtZgwpuQW1OXR0VGWUi40RhAk4jpvcsX01IxC
rlOygT9+onli6Lm83znsWO+WuM022dc83YtLWm/6ky0O733f4cMnXLKCnAtZ
pGNWGMgivnJmXIW/XmNUBLCEB4SEVYxk7lqYzYR8IaKCOpZBCyOZ+oebY2Eg
2blVD5hgjGQAvLAtZlFbDCTx0o6EFZ2Jyzvil7bFwsAnXsNWdOL9hJVdifTj
HFvaGb+kM2FpTxLOgsaOW9Iev6g9bmFHnGtHrDNgJmsTIkeEkKzzJIo6QBjS
Qn8LLhiXLXppQlrf6VEVQiqa7p2rCuIqA7lKfzwZRjiER94O+4JAt4JQ19xg
h0+2W/3he9wLvniwFuk+bIp6yPqVUfdG/OHHjWODp3WjU0JWHkJy/WwgYS0I
jbCiL0GLoqyqqoLeKC0tpUi/qalpfHyc/wwrpX8KP980pKl3DnICsTDNtSwu
LsbN4q7hrnGntFwJix2E0cBJpULB+pm1U9qZSV55gZ/qlJ9O+fgVux0b7GO8
jeI3sPHrXfdY/frb1u88vCiHuWWrHH+L/ADE7yalwYj7uFJ/YExmTNk71axT
jjDmameVs1lDOPPMAsxWjczdsR45AWYa+GA+uSWOwdzGGBMshunkzrjFHXCw
pBZiV7bGr2yJW94Us6w1dllbNM7L22NWtMev6Ihd2ZGwsjOOXkvPEBjAnurC
svZ4cuYkNoC0iwizhGcYKRA90kJ/C1GNi2dVsj5iDtLmVTIYQmDcPmubgHRV
ACfEEcalLI3QLH+HZS7rynMA1Tlhdn98nCVUP8XSwi1TfCxC1i+L3Bb27nN1
wwMoiGHd1FXFuEIL2aEel0+JU110hv2Vzpw5A6ThnCGkP/nkE7gsmgIgzsz6
dKq/GPNf50GXAWIPHz4MjZGRkUEbgiAGPHnyJMGMz9BqD4LA0ECnzSAA4ZWX
dfKL/HT5+d6kD37lGuTpnLCNi17P8nt33829ca/p7x9aUhhulx+E0AbRn3lZ
CPPJZQFcOTMawpb0MIcZVYcZ18ioN0PfOyfxzNR22zSE2cI5M1TC7QWeoZld
mmNEnt2gkAV1QSJhWVMMGF7dkrSuLXVdc/ItjQmrWuJXtsUB75va429qS6Dz
qo6EVe2JOIvv6N8na068pTkRX4LzigbhOzsSSD87d0TD0BxAySxsZUiDbUfw
zEZhIsgIafBMSLN0awPPrFO9NpwZbryadVDTsD4eDoJEGOvqQcxYGGhcEGBV
EGqXF7ogL9zij9/jXrmPZbwkrrdO9nGN2+a4fYPsvedLz3dd5BUjwjJ9iGjY
+mnqGUpE5w0Z6Xhx7tw5mnjIVkQR5PTAwACNg/8b8Ey3cOLECeqdE7ctQ/wL
v02NEV4Qz2z6MFsQQ4vI8KJ26hKvrLzYz2AO8LIL9bSM9+YS7uFe3Gz++0eM
//LIksoo6wJ/qGWWsVAealYZxppUoZiYrqgIohQj1rAy78R45mrCPoVnwdFJ
YG6JhIFn56ZoqX8GzIvaYyF0l7fE3NQcd0tj3Jr6+LU1cbfVJN5Rn/I/DSm3
NSbd1vhZz3c0Jt9WE39HbcJd9Um31yasrU9g9aItEe4aXtqtkzUH+hahjckb
+O3PyXOEUV0EeDatluER0QNhHe8C0qjgZnURxpVhJniAJWGmBcFGmT9aXBVn
+eET3K+/ZfHTB7j49VzwnW6xW512bIz680tlF3vO8lNnVSNTvEIjtKi8MJQg
TlThhegPxU1rLlFnLMJ/+O1Pn4T1jUV6/t9Fc9PY2Eh5hhAbQBqBA+5OOrmS
F1JZmLuensKDGtUpLvCKdsXZtL1vLpN9yyHUyzrC0zzJy/zZLdxL3pZ//b5z
iYzL+YF5teCBy4K5siCugklE0hVwQYxwg5lUyYxhNeFcrYzJDD3MrOhFzawf
+xNIJpjtWiNBDvQG889tcJIxon9e3M7UwsqW2DXNCbe3pADj2yvj7yxP3FiR
ck9RwoZCWNKc88ai5I1FiXS+5v3iuLvzozYUxW4oib+rKOYefE9d4rIyGfw8
RAgkzYIuRjWrRB3Ri4Qg0aktmuqagWrW/WLTHGndpFcdouRgVNdEkAFp1Gty
yGR4bqYVYWaVMqNymXFFuEllBFeBKiDjCvxscgIX7Ati88pTNro8dT/CQ7tg
j4Uhm5P2vtYyfeoiP3NVM4G2VDUtFxccFpfgprzT7u5umogBnqGoAcClS5c+
BchvmpemvyXN6KN3JicnW1tbxXWY0Qzh1tg6t0q1RrIjiUo4eGG50EkNa9R6
lRd2vLFnRdS3bWVeNgm+pomeZk/5Wv7yAbf3ty8skFnk+3ElfkY1cDIhXHkw
YGYvqhnPzEWXB6K8QLI5Ky8UosykOhw8wx0JAaDMvB6yOdxC0MzAQCBZGPsz
wAyS7duiHFn3BWv3F7THwgSYIZtBWtzN3SkrGmNW18X5tD/3+MFX/PpfD+h4
NbDp1+FNb0Q0vhHZ8Oacc3TT21HNb0U1vhXZ9Kb0HN32Rnjzr6I63ozqeD24
9VdhfW8+eehV98ada5uSIEiWdMQtMigcwLxIuAZnAWlcG5lDS7RtSxSZnuqG
SLG7w7w2AsaQnlUd7JmwcaXyEPAMz8yVBjGrlLFnWBViVBFiluuHEHvxB352
r3wHj90k0R2No120j2uYz3d/GYdwZoxXTc4wpDVqpTiTBSXIlvQRXk9NTbe1
tZEHI19dXV1N63hc9/jsPH8VSM/5WhFmXpL7Sr/q6+spLMynFKxP9u6vqa0f
Hh5Vq7Uz04bFjXWs/4dlvPD8tEo5w2sv8ZNH1Jdj/vTy0oit8AzGcRu4ne7c
c54Wrz3g8v4TbplBtnmBrB+jNIiNjFQEzxqKQzA2VlIZSjKD+SUYycjacH0M
2BhBZtEQYUlI65GI0Lvltmhg48JAYu2+3joSl3QmLe1IWtGesLw5/qa62Dtr
U/0Pv/UHbWMG31PJH6/lj9drTtRrjzXMO9erj9dphuafG3THq9RHKlRHqvih
MvXhDFX3O8qaJ3pfW1eTvLI1EaHiYnYBsThT8LioMx5Io6VwMVCNC4YxmFui
rJsjrZrYHVmI3R314ai/EBVokihHhZDG84GxHADyBuVBXBk7G1WGMb9dEICH
vCAr2PWj7ZZvPsg972n8DMTeRuOQO9ckPRT61p62q0fZitbKSQ1bQ43RODE1
qVQx3ySfhrdSK2Y0k5Py8vLK3Oy8nKxsYZ+a3I6ONursErN66MW/PE9pfh3R
GabqiHtw4EeopvLy0v3797J5lPl5Wdm5A4cH2difkq2IwfK1ZtgixrxhXvak
buYKLz+qufL83rdXhGy2CLjHLs2XS7qL+/Em41e3OX7wxKL8MKeCEJbwWRLM
HEtJ4HySyVBqszGggWdTaMV6mYnAs0VTJBkAAAbgwa41GmDALYswu3ay5h4G
imALu5IWdyat6Ehe1Z58c1vy2oZk95qd0QPvFfCHuvlzx/ULO09duN75Io/Y
duq65/P85Bm2+u7UKX6im7+UyffLen53e0XKTU1JJDlYR0pn/HKhGwStg4g0
OWpcMMy2NdrmWqT1WrpeRFpmQFpG1Zw9H2GoVM8zWRn0G8v0sCwIdCoOW1Qo
s4OWfuNe7kUPLvEO+/TNDuEeS3Z4PPfxm4cmzkywxT2UbOCLjYOraG1eFtRr
QLUKrwYGjuTl5Ofl5GYeyMjLy4GdPn2alyyxIs3//6Yd4vI4tGclmiE0MVlZ
GQUFedm5Odn5eR09vWyyA+5fWEVNO8PymGkBzEmlYpzNy9YOaa++VfnxurD7
F8t8bSI9zNI8uafduVe2Of3jR255bGUhixw/4zx/y3JENzKuyH8+yXqbRzIZ
YDYVYLZsjrJsjoABAGAAHmDEBsHs1hXv0h3v1BsHc+lNYNaTtLAneVmnwHNT
AgLATUUp8V2/reePnuGHR/hpOa9iiyJe7ywsBjIz/yys5D8zLiwScpWXn+BH
CzUDoY1v3FWcdHM9c9FLBIaXdSaiHqFpWNKZsLgrYUEXQ9pFQNqhnV22XVsM
IS3yrNfSDREi0hQ4kJcmnq9Bmqw00JitLsJ68q0KAxyLgl3ygl32+bNl93bd
bffMNjbBNsB9Q/z3fpb57mnd6DivmNJNT6mmaS0xtimjUkdFrJzRqlSa5uZW
2vSWNgWorKxE3CTtpJUubvONOsQBelzk9PT0wYMHhX6bfXkFufsO7C+rqhyZ
mATIk1MzjGEl88hseWLcmlY9rlNM8Ooz/Pi+geq74x9ZEOTpHOXttHsbl3wX
96KX614/t4JQh6JQy6Ig4wJ/48JA0zLIY7SMIfq+izkwwz/Pg9msPhL2T3kG
HqJzdulmMDv0xTj3xTsLPC/oZnpjVWvSuubku+tSvAtSUtp/38OfGeGnFGwB
RJrccR3j9epqrumEFRLZWutswrXqCj9drR2CtF5flLqmLvmmlkT4ZCDNhl0A
c3siG3npjCeeyT+LPM9Bmno8wDOZ1EuzRKzquc+NdAh0NYScsTBtx6yYjSHa
FAQtKA63/+CHlq8/xMXfaZPi7RrjuzjU9/aohz7oLqFxlklQrZ1hi2kLt6VR
sAUhp6cYD+Pjk2CYdUd//FEuUx7ZCBWladLi4qXfqEMUQvTi1KlTlOkN57zv
wN7i0pITZ07TwlNQWbhZlVwpuGi2A45c8E5n+Yny893f/3W8jd9d9pFsETkE
19xPfJ0/2O6UHWSZ649G0LwKYXs4ohiuBM881KIyHD8KmjCEOuvE9AxKzJhN
N2oIJyOezZujzAWerVr0MNu1R8GIZ8eOGKdOxrNbN0PatTfWtSd+YW+CW2/i
wu4EtPurmhNX18ffWZXsmZ2Q3PxOt8CzXDWtUQmrus3bZJB28JlvbMnEaSWv
UAnZmGqlbuYqP1kzcySu9u1N+WnralLwh5a3xUNFL+1KFHme759h83lmkoNZ
JEzqpQlp4llq1KdnXo3w0J/l41WFQH6zVK4ilo/nlhfq9P6PzH/5AArFIs7D
McbHOczr3pdCCk+2ntQMj7K139lkFp2wcrpWodYpWHYHLVUzdPxYfmFBcXHh
vn2fAOysrCxSHWLH9b9cP1/3EGGmDjqao40oAE3NwYFDbO8SIdtQRyvZQmkI
+zsgLESbBYVZdbY36k8vOodusolxt0BA/exmo5d8Hf/yw+VlMWZZ242LAhC8
mAhel2N9TSGmZTK4aBa8s9KZ5XlOopEIMwWAgNmsKRIwW7REA2aRZ/sOZiLM
zl1x0BsLgHF37JKeuKU9ibDFvUngCsHg6paE1fWJd1WneOcmpbb+rpc/N86z
tVlYRKC9/v6DOukOawZj/2a0vFLIwhLiCYiWWsWRhLrfbMxNWVspjLC0J7AB
xO6k5V0pQBoXsKSbVSsgjRqHS8UFw+zbY2+AtJ5nqYuG6cNkg+oQkRbSPALZ
GCseZk0QW/cJ7xTssMkLtP3kRyv3h1v84n6T3T5mSV6OqfdaB24IeHt30fGW
S8L2MUqKn+QK1vJOa4lnivQ7u7tqa6szMvbTGmL19fVXr16VMvOvOuZ3a4g/
Ujoo3mltbS0sLKTlGvbt/bilpeny1StsaxuUHu0Yr+NprXy1VjWmRqw00T19
6vkDbztvX28bvZGLv8v2pW3czrsWfeTvlBFgsv9Jm8pwNIVsrBYBS2kAVx5i
xvIhI4xLguFSZv1ztR7mOTybGNwysyaZWXO4RWskzLo1CmbTFm3bHsNg7owx
wBzL3HJP/KKehGVdcTd1xa/qSlrVk7yiO3k5XrQngudVNXHryuLXZ8bHNr7d
yp9CGCvXCStKf86DJn2gZgsbRqjxPVUzh6Nr39qQk3hrZQJU+k1tLANkeXfi
yq4klrwEwdOTtKiHIY0ah3rHkO6KdeiIA9K4EdwO8UxIWzSFCxaJukz1mp4J
eyx4RLWsD9NICJyNSIGUscQtk2o8aj+ubDtX6c9GpsoCTfL97fKCHT7xc33f
j0PpPOXDJW20jvdx9nPfve/15rHDZ/kROauZWt2MilcKSb8qHcEMTT01La+p
qUJkSGvwou0GJESyuBfzv+SQdhXO6TykC7t48SINAlLeYGFB3vlzZ2ipT/2W
JWra84BJzSn11FXdxAVe/tuG/Wsj73eN8DBL2sCl38U9v8nhT993ORBgmbXD
qjSUKw5gvcoVAYznSmhmFgyalYdDRbN+JxpDqQ4Rk/M/hWfAbN4SAZgt22Zh
tuuIJf8s5dmtNwE8r+ic5XllTwqQBs83tyasbkq8rTIR1MU3v9PCeGbhDdvJ
QmfYsvCznbVCs4yajuowxSaRKarVR2Pq3r4nN3FNZcItjWxk3MAz675b3pNM
PC8w8AyYiWcYbgS3I7po2OfkmQ1F6VNfWG4ty+li+QOlbF6PbVmYTQ689A6n
v+7gXvTh0jaYpnnZRXjcJNv2s5I/nuLH2P5cCG3VKq0CVZNXTjFhzHYFE/b+
OHvmVEV5aWZmZlFREeXwXLp0iRdyIT7FRX/VXdA6Q76cTrrno3BQqlVbWxvt
806XfbC/d3xsRCdMBtTQvkxq/U5SE4rJKV4B55xzrHbrs35uYZ6Wkeu51Hu4
H2+0+s2Djp/8yDbb36KYjfRxZf5CIg2DmamO8lA2sFUujG0hPDfkf4rOGWZU
F2ZcLzOe45yv5dmqPdq6I8YWyrmD6Wfmn7tinbrjZnnuS1zWl7CsJ35Zd+Ly
nqRlvcxWdCauamM8r6tI2JSbHF3/Zid/Dn6VRoMoyPuMhkOl44Xte3RTbBs4
zXleXqM7FlHz2j258bdWx69uil/VEYc6tbw7/qZuRjVghuy5Ds9d8fadcTAg
fY3qaEHkK3ppiC6mvsTgAsaelfDoOHqSVcEsS7wygJJLYRzJj7IgFIRlYbB1
dpDjXn+L3z7KveTL7fQwirjHUebh+cyPMk/UnuaHUaBT05PCZmFs5izP67dr
YSt4TI4PHhkAEpDQNIUWqFC2P2/ostNebwm4r/rQGRYJEf+oTljujBecM61C
mZGRgTalqqpqbHRY2O9BWPhFp79U5tJZYvPkWdXwUf7yoz+LcPS7xzp8g1mi
O7frDsu3H3D9eLtDlr9VIXuGes9M+TPlbHIcdW6wsa2qsDn5+bMmwDyHZyhn
kWeCGcZgJvHcGQOYnSgG7Iknnpf0JQiWxOxgMs7LZnmO25SXGFv/Vjd/7irj
mboxboAu7TB7rbHeKh1bPn+GrSKiUvCqi/xkrW4osvq19dlxa6viVzfHMZ67
Ylb0xK3oAc/xy3qTwTNsYU+ia08C61HsjiOeCWkpz7Ab8az3z3X6hJZZnmsQ
gwRS0jiZQU7DdYdalIUBabusACBt9puHuD33cEkbLKI2OoVuuu+FoA7FifO6
kXHNlDBrVr96KfNg+nnNWni2uro6Wiydtgs5e/YsL7hosQtadJXzHeZXd2gl
i97whto0NTXV3NxMi0FRNTx+/LjeYSHuU6rE7RqhPcY1bKntQe2l1Pd/vjTc
xyr0HuskT+NdHtxLm5z/8cNFBSE2+f6WgpxggrkiWHDLLIkOZsb8s374T/TM
Is/wzOSc55Bs2szMrCXCfNY5R9l0CjB3xsAcmHOOde7Rw7ygL3FhPxhOFCxZ
b+C5K2FVG/Oct1XEeeQmxja82WPgWVijU6fVb078mUy/Ch/bBxPRvuoqP9mg
GYqpenVjTvxtlfFrWph/Xt4du7w3bkVfImx5X8qSvuTFfcmLepOIZ+cehrSU
Z1FFizxLkTZrAMyhs5JD6qINPBvmszDDC5ZPXh3GlbEsAovSEKu8ANe8UIcP
n+Be9uSe9jRP9zIPX+8QsD7+7y8P8ldGeeWoRi5MMzLwrEeFrWp88uRJSlKi
1I6WlpbR0VFRtfKSfB7+a/HS4h+VvqALOHLkCEimPDpcLc2ios2uATPrmxK0
pUqjViDw0UA2T2edaLgl4l632M3mtJbR815W7z7smLHdIS/AssDfvCKMDciW
+LMO0grmmQGzhZBixMZqrweziQAzbK5bhrVEwQCzhUFpAGbbrhgRZkcojZ44
l14GMwwwLzqYvHggaekhWMqygyk4L+9Lho69uTV+TWPc7eUxHrnxxPMVkWeh
m0JKLDno68KsE1bWop3BITN1bPfMyWb1UGzVq+7ZAs/NCTd3xsMzr+xPgq3o
T1nRn7q0P4V4dusVXHRvApB27E6ASZGGi0aAQH04hDRRLeWZkJ510bA6hjRL
6Kpga1HSbGLWxQGeWSTO5J95QYBNboD9gR3m7z0sTKf1Nk7Y6Jq4+Zbo+//W
XXiabU6kkPNsx1K1YTozQ1rYvgWuuKmpiZwzpfT09/dL6dVdu4j0V82z1rDT
ovQacExMTNTX1yMGpA2SKEVQuDZhxw6SzsIuvTMaNYTiBX6qS332+7+Od5F5
mkVvZDOnUu4yfuVbiAGtc/yt8wOhnAEwMKZMAzhnmJkeZiHvaHamSTBKgRVE
fQiZcUOoaZMMZoJzczgMbpmMeLYEz52xgBnmwBrrWMeeWGEcMN61LwHm1p/I
YAbGA8nLDyULIDFb2ZsMwFa3xq5tjLujPMYrJz6h4Y0ugecZGk0wFMRnilxo
bFh4OMTzKD/ZohqKr3zNPSvx9orEtU1JN3cmruhJWtmXclN/KmBeeTBt2cHU
JQLSC/oY0jR26dSTOIdn5qLbGNIQV5BYZJBb7LE0svpOeoyqP1cbSs+TXrAF
SYTVaSgTj5UCeBZSv4zLgi1KAi3y/ayytztlBbCVxJ7ZCCFtGrvBLXrL1ueC
WuWnLvKqUV4zqVORi2YYsH0faQiRh4uurKykCUq0ixZcNC+ZZ6r9opuwfIGD
yki6mwxdybFjx6jGHThwAJfa2dlJqxOQg2IfhhdimyOxya1TvPY0P/Vy0Z+d
/N2tIzYZJbqjjpv+8j6bv/zAMT/EojDQqjTUsiKMKwoAw5Y1EUalQcSzMGE5
lGaacLWC1QUTz1KYRZ6lMINkgpn5ZyhngWe77lgpz0QybMFB5pyXDKQuP5wC
nlceTAVOsJt7U9Z0Jqxribu9Ie6u8mif3PiE+tcF/zw5wzaBu14vs87QP3k9
0wp7FusHXHjNMC9vVh2T8nxLR9JN3ckCz2kr+xjPyw+lLRWQXtjPkHbtS4SB
5/lIw6CsYNQ/SWCLPEuR5oRpO8zqcDY0eYbMJRoQN6+NENYwCbAU9g4A0mzt
94+e5P53K9urKO4e+xhvl0CPZ7PfPaIbHuHVcra3haCkhWBBv7eWoJbhk0We
4f0GBwfnLPUvXVXpqz6kUxKoKg0PD6OW7d27l6ZTwTlfuHBB2KdKo4J64oXd
3CE5lGyGAsod7VHR8fa74r7nErHZLm0b239n5z0L/rrDLTPEqjDYuCTIvIKN
lXCFAQj9LKsiuBLwDJLDKDGD08McxGyeZ/5MPHdGWXdFE89k4Nm5L17KM5wz
8bxiIEXk+ZaelHWdibe3xv9Pfdz6smjf7LjEulf7+TPQCazLlXj+PAfKWdhH
np8WNvyEDm9UH4upemNTdsrtVcnrmlNXdyaD55t6U1f17VzZl35dnl1uzDOU
1Rye4aIZz2QC0rMu2sAzVxvGrEaYBFEVxlWEcmXBZjURcClcoT9ECJA2KfRD
M+p4wN/pr0/QujR2KVsXxty7Rvbt/YfqzrJlS4X9SxkEDAHaCZL6x65cuVJV
VUUzOz7++GNI04sXL/ISnr/OpA6dJN+PN6ynQaOBtHfPwMAArZ2o76YTOqrB
M1vmSBgNHFRf9ntt58roB2yjvM1Sfbi0jdZvP+L8Dz/nwjDzEpYSY1QaTGZa
EWZeFW7MhEeoUWUYi8FrRJ5D5vNs1BBKZjJPbIg8Q2zM5xnO+bo8Lz2cBqTB
86qDabBb+lJv7Uy+rTXxjoZ48Lw5Oy659vV+/vSoyPPnepJC0CRsD8jP6DRC
TZc3aI5Fg+fc1P+pTlnbmra6K+WWHsCMv85gXjGQvux6PDv3JhHPdt2MZ5vO
WBhihBvxLFUdN+RZQJrxDBddzrr9aRYAmztfGmBUwnpTXYrCXPb5W77zKLdr
k3GSp32M7/KI+x77aWLfzIXL/PSM0O5QG6Tv5NHp2K5kOh1c9L59+9Cg05Tw
w4cP6yRbdlJ32dfQvyEyLCZsjI+PQw5RxIpGBK9R10iHsLNWp1QwsIXZKNop
3fRFfuI3NR+vTfuuZeQm83gPLnG9+U+2LvzQzzojwKYyAprZmKUs6o30Mxsc
FDLoOMGY06iVMasL1Vt9GMyoQcY1hcOMmiOMmmXGLeEwk9ZZ2Qwz74yEWXRF
WXZH23TH2PbE2vfEOfTGE88sGBRgXniIiWeYwHPaqsOpNw8ISPelrelOX9eR
srYx/u6qWJ+s2OSGNw/y51FJlTrV520iaclfJitZ37yOxgfrNEOxtW9szE26
rSb51raU1d3JaBRWoXU4BM+cuow1GeySIIcQscJwtS79CUDasS8BN2LXG4fq
iftChWXVtjMW9Vd/70KNRgUXKnsEzLgxHMaem/AAmdGDrRFIrg5lRhmMbPpP
qD5xGuVSGgRDYVkVs30BnD7awf1iG5e60TLec0HcljWx336l9P0T/NiIdhrh
Eot6p1W0Ap6I0NjYWE1NDSX5gOfS0lK2oJAhP1McrfvSAZ5/iH+FuqBPnTol
rj8AquGcxU5yRrJSS0spTinl09pplHv9hb7v/DTCJszDOM6dS3Lndm+yf/OR
pZlhNiVhnIRkNouqnPFM2V8iz0aGrOZrkKayaBR4bg7nWiKMWsNhxLNUaczh
GaUv5Zn8s5TnJUfSlx1JJ55vPpQOnm/pSV/TmXZrU/yd1bFe8M8Nbx/iL+C+
ZhjPn69/SSfslca6atkKy0ybQYeD56ia193zkm+rTVnbnrymJ2V1X/LNB1PA
M8G84kj6UgPPOBPPrv1J4Nm+T+C5Nw484wZxm4gUiGd6CDDUbgHpT+WZkCae
xYTSSv3SUmx2m2AM7EJ/2xI2i9b23ce457yNUzZZxWxyDPG47/mQ2quHLmjH
hbCC5XIgHBQW8db7Q0B76NAhmrgEePACcaK4Ihz/dUkO6WgOuMUfbWpqoqui
jdWuXr1KcaKOVvrSCcvjaNRytWJEPXGBH/95wR9XRmy1CNtgmca2QjD96b3O
f/mRa06YdRmbuXYNyWSSnEa9c67RP3ajunCxIFihEM8tESLPgJl4JpiJZ5Qy
K+ge5pxR9IAZxjJC4Z/7E9wOMZgXDTCxwfTG4DU839yfvrp3561d6WubE74i
nmvVR8HzpvyUOTyvGkgnz0w8o64BZuLZ9WAieHbqT5TyjBsE0iLPs09Aj3Tk
HKSJavZI5yBdZUBatHJWQIQ0W9ky39+lIHzBJ8EWrzzIpW8yidnoGO29LHTz
C9m/P89PX1FNKoWNDuVyxRx+RkZGSEKDnAMHDtTW1srlcsKYNlb+0umdf1Ac
Kq5GTpPT84UDXhqXROsPiOvhsG0udWqVRjkjJIW2jg9tezbALcLXMtrdOMWD
e9bX/vePuRwIsskJtiqXsaDvWp5ZP/O1Wfqi2MCTl/Ksh1nCs3Ebg9m0TQ8z
ipWVrAAzK2gJz/BsrMmGlzuYCJ4B8+LDTDkzA8+DqTcfSbnlcNosz92pjOeq
eO+ceAPPiBZU/OcU0J/C8xz/fMuh1JsP7wTJsJWDO1HFiGecUftEnh36Z100
8Qy9QUiLZlAdepuDND3VWar1IWHobOZ/pd7PENVsiLaQrS/tmhFs994PjF7Y
zKVsck7/lpvM1z3l8fbJkxf5SQXPtOnENEuu1ElWAseZBuBohVI07nDRvGFh
Uv7r0s86/YRHNjubFu+iiwHSp0+fFtsLpoJ4fnKGjX6ipMb46RP88Ks1HzkG
ujvE+lgkeHLJ6y1//dCiA2EOBTLTgkCTItaJAVUmhXmWZzFnpmYWZuJZ75kN
ztmoNRIGmBnP7ZEws/Yo8w5WlChZxrMAs3UvgxmlDwZgTv0JzgLMCwaSiecl
RwSYj+5cfjQNPK8+knrLwM5bDu5c07drbU/aupbEu6oTwHNK42+IZyX/uf3J
p/AM/byuJpl4XtOfsnogDTyDZOJ5+eBOtB0UseJqcdluB5OdDybRvRDSuEGG
dFesRWcMbl80VHCYcYveEGvo/YDwDI0aIrh6CdI1ktQ7A8/XzD0sCzSrZFrR
NjPQ5eNAm7e/x+3xNkr0sIv0XhDk9XLuH07zE5d18mkmN9jUQv7aGabnz5+n
PB/Ag/CwurqaFxYG//KA/eeH2Dd4+fJlGrUk5VxfXw+GKT7laXd4FuygmFQI
A6/wU9WXex/8RaRlCFulhG2T/awvUxp5MrNCBBfBXFGgcclc5zyHZ5p1Qk/b
uD4CD1/fUF6jNBjPRDLMtCOKypHB3BkDmKU8EwCOBxOvyzMMPK8YSr9lMPWG
PDe8c4i/NIHq+yXxLOrnOTzfcmQXSIbddHQXeEbbQYpIyjNuRER6Ds9UqXEG
zGi2RJjn88xM4qLn8zzrn4WJh6bVMsuyMKucAIhGp/d3cC9t5ZI2WCf6OoR5
bn0msOJCzzl+YlSnEGZz6KSdveSHGxoaoFdpu3A46gsXLvBf47J1NM5O3Snt
7e20uj4uprCwcGhoiBfcsrg2O40RjKsnJ/npC/wEnPOSqK2IF1gYuMvT+tff
WbAvxDI7kCsKMK2JQDW3ZF1zEvH8qUpD/+RFmA3OmQPPbVHGHZEwwEw8M5I7
9Txb9sSgoG364mz74+0OMphhgNkFVEA8H551zrDlQ+kiz6sP71p9aNet/bvX
9aaD57trEn1yE8DzAH+ZeP68BaAz7DUs8nyVnwLP0bVvQD/fXpe6riPl1t7U
OTyvGtq94ugu4pkJ6cOpqIMLDqW4HEqW8owbxG1adcdJXbTIs0lrFGw+0vRU
4aKZSXgm1WEkEdIM6Ypg1lyWB8ERWRYGO+XLXPYFm731CPeMj1Gyp1WUx/KI
bT8r/PMpfuIqrxhXyfU9OYbkH+rHOH78OK00S8MrCMd4ITTjv5b8DfoTuJ7R
0VGoZch4Wr+rvLwc7+gki8PgPD0jV2kUk9qpUV7eMTn0vVfiLAPvNkv05FI3
Gj3vu/BvfosKIs3yWH4+W8ZH6P+5Ls+cYX6rCLPBOUfMKo0b8GzWGS3yzEpW
4Bm+aw7PgNl1IBkwLzoyqzSY2GA8p64+mrJmME3K863X8jzGZv9pvwDP+sFD
Cc/12mMxdW96FKT+T33abZ2pa/vSbj2YKvIM50w8Q0Jfl2dCmnjGbVr3xItI
i45akBwQHtGEtJTqT+HZSDLfUM9zpZCVxySHzKI4xDo3eGF+hMPft7Ps6OQN
Dju3mT5556O/iG0cHhRW+59R6lS0zTqlytO8aQhXqFbwTKuEVVRUACSKzr5S
/UxNgCgnjh07VlJSAvFMO5X39fVRdZOqI6V6Rserx3VTZ/iRd5sz1yQ9ZBp2
t2mKJ/eUp/mv7l+4L8ipINQodwelB4BnMyEeZA2ZZNY2xddiB52gmUXnbOC5
WeymYzDDTDoFazcg3cVgZiULl4VS7ouzEWC2P5TodCjJeSCZeGZi40jq4sG0
JUf1PK84tnPlsbSbh1KA9OqjO1cf3r2mfzfTG23Jd9cl+eYl7mp9r5+/OMom
a2uEfP7P0VBKeeaFKAN6AzzH1r/lWZgm5XnN4XTwDJjJlgshIblo6A1UQ+IZ
9yIiTTzb9CYAaZFnCdJ6nud46dkHWz8bEkpVtDiLdraAKoJNK9gWLRb5gc4F
4Y57/Y1f/zb3tBfifesIz5si7v1N9d5T2pEx7ZRaWNmAN7g7MZmNOu6IZ+B0
5MiROemjX6n2EPP2STbTquyi7KGmRN//rGazBKf4md6ZU0+8mmjhd6dFvDuX
7mH0kq/L3550zQi0zQ9im4uVBdOiPcKeJvqK/6l9GtfyPNvnjDCQwWzcHk08
k9747DyTf74Rz2uGdsFFg+dbr8+z7ivlefXgbnLOOK+QIA3/jMteOJDqOpAi
5RmtD/E8xz9/Cs8w48ZIkWcxJGTr/gmRi7EEaXGcBf6HrWJaFmKa52dXEOKS
E2z/9ye4l7dwOz3MYz0tnrjjuz+N7p48Mc4r1FCg/OwCMtIJp2jfqRcaThJR
ITlwcS2XrxRpXAMuAPWIsv5ANSS9KHjE2SvserSqUeXYJX7swGDlivAtDjGe
5ike3O5NJr+6d2l2qJ2QsW9RGmRUHAiSLarDSWmIMHOSbg29r6i/Bmb22Ocr
jfZokWeGdFc0eLboZjAzT3UDnl0FcwMYAsxLh6A0djE7vnPFccbzmqFU8Lzm
yO5bD+5Z25t+W3sKePbJS9zZBp4vfxU839GQfntXGnheeyiNeAbMNx/bQ3pj
1kUfSUMdXHQ4DTzjRnA7RDV4Zi66L8GqNx63jxpNhqeBOm6CRyQY8wBCBM2e
ocCzFGmuTu+i9ZH4vNiQMu5YJh60YgErUOfCUHgq5qKf8TRJ9nKI9l4W5PNR
V8l5zeiYepKlERoekdawuwp+7OjooJkgJKRptuyc/Qr/f6C90ZfQm2gRKBIk
2QNJL9X5vKECqphzVhzTXoz/+8s2fnc5pW+BrOKe87B+7xHX7CCr3B3WJUGW
cMjFgVxJoDDZZLYVk/bRMTN4ZpFnPHYOJuHZyOCcYcCYzKybFaJlD4MZJSvC
bCvA7DAgOOfDKW6CLTiSCp4B87Jju1Yc2w3nvOLErpUnUm85lnzrsbRbj+2W
8nxPfbKEZ42B58+R6DhfP4s8exWlE8/r+tPB861Hdq45ugcwk62UIA2e0aCA
Z7fDqbgRQho8o7YypPsTcde4fSAtUi0gHQMjnqVIcwLPhLRURev9s4C0lGf9
eh1lbGFMs9JAixLW5jpm+tv+9XHuBU9up6d96hbngE2hb+05qb0CF417nLOt
JEFLS5KioaeNSA4fPiyuLP2V+mfSEvX19ahNtJ8RGgjqMJRmrtJaSTM61Riv
qLnUdXv8Q9Zh640TNrD91H611Xmvn03Wdutif4symtQjzJFHsExJttf6Z71+
u47SMPB8rXLmOqJhxl3MiGeUIwpUgJnxbNV/Dc+Oh5OdjqS4HklxG2QwLxKc
M3hefnw3g/nk7ptOpq0+nnIr7NjuWwf3rD301Lq+nbd3pAo8J+9s++OXznNc
w9vE8/90p4PndQPpawd33Tr01KfwvPhI+oIjacQzIY27I57hokWeCWkpz1IX
zawpipvjom/AMyHNlilmQwaBtOeyeam/Rb6fbba/W2YQ9/q3uBe2cnHrnSN8
bg7eUn/54AjPdi/TGTJC6SFQ1sT4+Dilc9D+fbW1tZOTk7prj6+CZ15I3Uc9
onUjITlaW1tFnyxtR9jCR7z6Ij/5i6I/LAjytInxME735F70tnj3Ube8EOs8
P+vyILNSf654O+04zDJe/hnPIsx65wxrlnQ7C84ZMBt1xtyQ5/4464MMZjsJ
zM6DqdflGWJD5HntidS1x/esPfrUuoGnb+vfdV2ehdz1L5Nn8s9Snm85zs43
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
p2yajSOkB32mJvAKj0yNPcaTa4/qyVCWtMU1+bcnwt2MYuwNUpz4uc678+22
l9jtqLDdVGq+vdxqV4WNbrWTXp27brPvvtaAnW2B29oDIebFngbN3trN3rgJ
DkjTzjPYrKPec0mdFyJd7SVDmgaGYJyLVuFmFxY6AM+qDOk8e0WeGdIcz/KQ
0JKTHHMS8FDSgiQb5a/P8kKFc1x1NWxFm2zfuXXn8wEyNUJZYltysMxL2ShZ
iaSv535sdBzjGfAbGhp6Q565KBIeDTaxhW53R/f09LFKUWyBAh6Fyr5ZenTm
CZn6NPKvG5yOAM/K3ga8IL76NxchHJifiA8pJusoz1xfr5/gmdYgcaPk2TR5
uJKKPKuW2snSdOXOADNoP4hoYN2E1ROM5aOW0yQVNt5s9Fjd6Lm21WtDmw8I
5s2tPluaPTc3uG+sddlY5QQYb6y031Bhu6XSfhs450qHnRUOe0rt9xTb7Su0
071ny8+3F2XYHoi2PXfX89f3vigdaxomk48mnwB04JAnpSgMRiYmZ2iRmGzf
9v+MNKEtWKfwqBF9IrAehg4aAQ0yNjk1Njo5O/6IPKkj3YmTZZ7Zvz9+2+1A
jIMo2UGY6aiXZ7+30G5Xqc3OcuvtVVYKZrO92nFbncvOJq+dLX6wBoGohk+9
scWbNuvwYf1nVtGLs7zOc2mN+5JqD60qd7BF1dQ/V+IkaPUyB8VxnGpFjvML
HQBm5qLRS1OMZf6Z3UG6yCr4ZxnPcN8hdFKJNVf99iIvTMRz09WwN9C2PBD6
w2eDGIMQ1veP8UwHvs8ynuNi4iFoA+qA5/v375M3O9nNDYF9+PAh/E3WGjcm
Kra3t591QAKe4XbIJkJSnh+TyY/vfq7t8M48B5GSl4gXzFf77pJanBnwrJxk
PjcVywhf4JkhDdfh/8Izm9AEMIOxnDOQzGBmP+BkH2ys4Y5asdFjVYOHdpMH
3MpNcEObvTY2uG2qc91U7biu3H5tqfX6EuuNZTaA8Y4apx1VjmC7q5z2VDrt
rXDcW+awt8R+X7GNTqnl7uxrwnSb/ZFW7/3D4VeFX5ZOt/aTx6NkYnRmdArT
TdKJyWkJFb8Y20lelWe8yiAtRmZw5WWbC0j5Uwh/Jh9PD7ZJOkpIk1186Nvf
2u6PBZjt+Jl2/Fx7/QJ7nRLbPWXWuyqsdlZa7ayz2V5jtaXSYkOZ+cZyq80V
dttrnLfXuW9v9tre4r29zW9Lm++GZi9w1Gupo2Zdo4HnZbUejGc2MXlBpbNs
Ime5I8czGONZVS45fo5nMJmLlo+MZDzPE1vMizNX/f4S77oB8KxuJ1hpsT/o
2//oJ1Oj8j6WGAlKcIECpIG9/t6B+NgENoQCtC43EPnNeX7w4AHrjotziGLi
+/oGZmVHMbBaVcLmvNCtgQdk4vr3f1xle0jJQTjHU8gLEah/fxkzG0kWSkk4
vJi2H5H1XWSVoqx5nSLPSgo8I8yFtkzCqbJRxaXP9lDotDU38CooAmvcmIEs
hDsFPnlNo/u6Ro8NTe6bmzw2Nbqvr3EGXbG+3BYY3liG3zeX226psNleaQe2
u9phb7UjmE6V475Kh70V9nvL7IAW3WqrHYVXdmZfFWTZGkTbHf7GLizvzyWz
rX3k4TAZGZaMTEgmaeoS+SaSV/bPEonMFTCD1W56EoKhScySkie90s5SSZVt
hP/RH6xEMRb8dFu9bFtYNfQK7fRK7HRL7faW2+ypsNoFb7LWemuN5eZKi00V
5psqLDeXW28utdpYag2rz+Yap21NnkD11hYveKjhmmg3ea1p8oJLhFTXeSyv
9Vha7aZV6bKoAqfXIdIVzEXjxGT1Yge1IuDZfn6hHeNZ9Z6dSp7tvFwbJBlu
Vo4Vk9DKWQg27hLilsoznueIzcGbAc9qP17BKmgPPVU7/jJzQ++vf9sLlw39
IfuS8YySY3Z2oO9+QlwiU7mKc4Jem2fuZApIl8jISDZrHl6iv/8+x7MECxDg
HeB/xbYbZCLg698tszZWdhS95SGAxUXjx6sgnnFnEPRzGtZcscm58vFVMufM
gsF/yTPC/DzPmhUubICgVi32O2IDqlbUua1ucFvX5AYwb6h3XVfluLrMWrvE
al2x5YYSq01lVlvAfVXb76x2QKu021luu6fKATAGmJkxpAGVbYUX9Wost+Zf
3Z5tZpjvrnfH6vDf7W/c+7xc2tJHBp+SkVHpGKhfPFlBOx29Ks9MpbBjmBMz
0mnaJmiKTI+R4dbpttKZGu+EW8e/szQIv3Ygz3l72rU9+dZ7i6zBM+uU2+uU
2+6rsN1bab2bKY0aa2bbqmy2VlhtLbXYWGwBnxeWIXiKYVXa2uhBkfYApOFh
ZzyvrPdcXuu+DFRHlSvY4krkGUyRZ4b0yzyjc36JZ7in9Aihgn+GW59oBjxr
3LkGPL/lqQs8LzUzcPvrr7owBYrlWHLiZhjPYPf7BxPjkxjP4Ev7+vqeXbPX
zW+8zHNSgnhgYFB+w57jeYLMPiCT3n/9dKnVfmVnA+y5cd1A8/Y11QRz5QQz
CApwvCAWP8t4fsE/0+QGwqycZ8NWtHn3rFXybRjPYLjqlcoM1B3jmQ2thrsg
H+3qtrzWdUWt89p6t/V1LuuqndaU26wqNF+Rb6JdYLauyGxTiSVET+C7tpRb
bqu03lFtu6fGfl8N0GurU2mnW2UPxpCmhNvtLjHhV1rtLrbclmOmk+skTHM1
uGP3zt9s/73i68Kp6kHyaEgyODI7iteBVm+9audAvIE0TYVOWTIzRTdT+sij
RtJTRJrsY8Le/YfVkSRno0y79fHn95ba7iyx3lVqtafcBt6bDr5Ve3jb+6ps
4CPgp6i231Vlu6PCcnu5xY4yix0V1lvLbTYWW60tNF9dZL4O1qZap83Nbpta
PLXr8ZFfVe8OtrLOjY0CXwYLnALPmqUOGiX2jGcZ0vm2YC/wjPYzPM/NsFJK
s8RUQLwp6OeFd03pKRU9VQcB+GeXv3zC8SyV80wrs3B0/eDAEMBGt/Dwq7e3
l7uqb8jz4OBgREQEe0xe5nkGZSPyPE4kD8mU+19+ucR6P55M8eADz/BIMp7f
ijeZk4I13qifFXhGk292K/JMQw8bjmem4uaX2DGY4Wpj2FLpBAIDnTMdVQwk
w92B26Td4KJd7bi6wmZVkQWQvOoewGyyvtBsU5EpeK3NZTJjSAMAyAaFWb/K
gV/tqF/trFPrvK/OGQgR1TnplVqhPyx22J3nqJvpLBK7HrzrePIbl3+v+Fvx
VM0QeTgGN0U6Nj4zIZG+cifMqYlJ1mYTk/l4+nKyhzxqJ48zpfUWEaEfRnkZ
hNvuiTHXz7HbnWMBPhkEBjx68IZ1qx30ahz1apx1q53YAwj/AgaEw/9hZ7kl
8LytzHxrsfmWEktAel2RBSC9psRqTaXt2lqH9Y1u4KXXNoAq8+SQZjxzkuNl
ntUK7BjPYKg36M2aI+dZJctqHuWZHgjFWwwwK6daUueMvQsWhZuhf/bRn+8o
XGph5Pj5x11kdARVlpSTr4xnMOBZnJjM8dzT0/OGPHO1HxBahoeHM55hCVDk
mcWDjOcx6Qzw7PLnj5FnN5zYxbthoH77qirVG+CfcXMw1YLl617UG/I+SD/H
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
SMcPv3f7Q/2PlaS7jTzsw/AQFLR0eoqeSiOSIfTMT2PGqmxSfnskyvNgoptx
prvwHiYD9es9+I3u+g1u4JMPNvkeavY71BpwoDPIqDuA3+2n2+Uj7PbD122H
9+YJLy2odt9f7HU0y/d0lG8yqW7Cx3Z0fHYcK5pmaV0P3U/HRuF4JnG8lvTG
TJWfDPcRRNvuEJttTLu6NvMSXLo1GWeAZ/AJsNhpic8uFJ9ZlHJuSe5V3JYq
t9OqcNAottYottUssdcsdlQvdGQ8q91zZDyrynmmyednPGNj5CSzeYnmmomW
88OvqP71NC9YyHPUWWgj2ulw7IvsyCdkZmRqgvFMq5Bm6IFKCMwkLU2td368
y5Ib4E4BuTfp98W+mK6YmprKz8+PiIgACR1+J6KyEvvjYT8bMjs1MymRJw+n
ZiUQ1yc1FRqFmMy34s93E/F8+MqfHVsUcU0zzgwktHIyTbPT+jpW+w1XgOOZ
1dexjVRgWyXPVq3ADtyyZpHdomK7RYW2i/IsFmZeXZh6YWHSucVJZ5Ylnl2e
eGZ18uk1Kae0089pZ55dk3UODFwNSI4taZd2JV4TRlheDPetId3DAJSEpepZ
GItvGkJZzBXPguwfbiJ93wyIT4S7Hc71FpZ769Z56bX46LZ663b56XX787sD
Rd0hht2hRl1o+3tCRB3gn/1QkLT4APnAP7/SR1DmZVDgfrTI/3CcK3jdX9d9
nzbb1IxHS0bHcBdsdmRyFGfmkoHopyVeJV8Yh3vuT/URZHvwCzz4ENPVuEOw
iZ650fNAs9/bzQHvtAYdbg8+0Bls1B0k6vEHmA06/Qw7QEhDlIrkA89GRZ7v
Znifjw5MmKqAxwdWhCkpTn2XTs3Kkim0lhVu0xMy0Uoexk6UfRjhqxtuuT3J
FHgGhbYm/dzqzPNIdfq5VamgOs4vFZ9dlHxmYerZhZkXF+dfW1JqpVVqo1ls
DfdiYYmTRoEjFRv2moUuijyrZCjwnGoGoRAvGYveQTzPjzbRjDSZ+6f3eP4C
VTfRImtDgff5iOrsx2RyEm8DHjPDqRMz+KbhCRyfHGuoq7/z421ELjw8Ly+P
dTUn5I1K+tnvAr0lJSWsbA+WgOLi4vHJiRlaT0aHadK+CbNMGZKSR20nPnXR
tDFUdRbxPHTn/PvbSyJNF8aaqcabYv45w4qNf2U8K9Mh5hzPqJ8pyaDQ1AHm
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
IgUpSK8QTPSfaj53WzLbKnM89Bc4q9z1X5tk+XGQRU6IMYmyMywMMuZzTXgo
c2KiQcTfIIt9RHRhLLoclGenGuR5KM4VonEmPCe6SVK8y1PGCeb58tNi+atO
M1dvM49amNY2rN6I0xB0roSuUulDw4W1XEF0tJkVieHBiQy27SaB6N3ku73k
6wPaXjLH8dPb79sO3Qtt2b1jwVnVU7EHSUM1tEPTCp0pIdgF1lLpUXT3ML0d
WOfigbTnTNRnS/1yFowtSqY8j6iNG14bB+cQNKw6Ues8x+qGiRKYuYP9DeOC
ueAu2uSGOO+L4Lzgzdnoab5+knX2pDGLA94Wfwyeczsjk5FQGZq3k5JM+Wlp
aaFJPgEbsM9SqVStDc/4N/PMEgt7b25uhjuLjtrBgwPcIZzpJiYaHnZwQ3bJ
+shAtLpV2f2EkZ3ruR735rKhC6eZZ4/jLHblbPEy//PMEYVx0Dvm7J1JBzNx
8IenmU9heQYBzzYlETQQ2qESTHQU8OwgjXbGseiEUdJ415o4cAjdJMme5cnu
/DjP/Lhw0Ypa5jy40N8x966q7z1kuh+hekGPmV44nidMH9u2Mn3g7LUxcqpW
LBDf14JrbX5qS7f88yX70bZFe4RteITYkvd95FD76JFr1adVbzPT8pBpe8K0
P8SZ8dbrzKMK+fHInBXw5PIRJrlVxI+qxjHPYdI4OIFDqxMxkABH6uIG8Exg
foZnXGwFPOfOdRbFOOWEm7znB09bkw0TTBb72GVMjHl9yanWb1uYno7+Xhqc
20MyFtP4fGqiz549ixWmyApraK9du8boWGZtDbV/B8/slCW90Wpra+F4qImu
qqpqbW0Fnun0hFylpnGkcgz6wkwXLUzvFyeKPZfOdVg0xWL5hCGrPPR3T7D8
6yz7HHSkjQuDtSH9ePtrprwFuAwTeNbG9uPEt704BpGuRqRJ3xAuTaxrVayG
Z8k86Ox4FCeE1677pKNC0n9O3HOqpvtsddspKaj1DKj2CdU5aOtaz9e1nqVt
fduXGnV8Vdf+pbTjnLTjp7a1neefq7quL58r8sXnbucr3b/UtJ+taT9f24bH
drDtHDk8bNlj1rZPBR+uaT9d23umqvPEEfmFmtbjlW1HS3ua/nK7IFS4fDw/
xaMk0UUcBzyPrIkbWZ1A3QxqnImzEUN5pp6eLs8UZhzT4IVY5XOdCiPM/jbD
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

      "], {{0, 223}, {240, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{240, 223},
    PlotRange->{{0, 240}, {0, 223}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
UBmnB0xy933VI0u2d5iG44HcvOHnTbTXVh+mokBi798Rc3PdW86yuCGChBPG
gNIoyiShwXvAdKlU5lkbY0V3TZUqTvFdI7zeNtTbwoR8uXmzitREe221rb/T
wRMtg6R5IPrMrnfOlM6BKdQqetBuCuTTsJ9/osG1UqtI/fzssGMT6RVT4LbY
s40f9ibaG6Kuvk4vT1o5Aly2Zdt7PvwmM47N+z9xGUC7LM9PdlMpgWU/j64+
TD1rLfRaB4C86SsOjR72Jtoboka9cXc27GRjpv5oF/fy7utf4/RvTZu27UgH
PMgP35kfIsMsNfH+oU1mOrF4RxoXPuoPOvMN2z3dRHtj1SMk/XTURxFOnjSL
SddA8tUv/jyCbhm8HUSbzxEaQMGR0onHc6tt+dgSIeJl455cxNbAOjBNtDd2
3ChCryQZM9FB21DCmo09kXkqd3N4+rznMWlH6CaqvLT3Q+DqFm6VhyGcOVws
1MzNm0hjE+21RrteOVMk8cJinnRxcV9fLLHvdVz8U5dpAvPDKM18kSMjF5Zt
XdOSD3mEVYG+jvY8bgSGcwYaPexNtDdEvVzKnAubBZjfcQk4Px/30AlbLn7y
5EkD8Hh1dYrMzFnePpmnr++0VXGBYyTh+uvqw/vXB4bSRpI/XkH+l02781Sb
aK+trsz33kI38ZK7XrW/jNRbMABzdffHP/I29QQwWa4CAg5eOAZQh3Mx6uoY
W00Nbfjw/ofaRHttdTlN5i4Uqmgys6qK1DI+9zlq2xFuUa3fi0bZEKk8gkq/
HforLhpAhX6I9oYPbE20ifbaqjsXSuRfu4LG8fkqRhqhrNe/nZOiqhWkYeKF
q4fg/+8eO/LgwPof8ZbpHbsNH97/UJtor7HCjJ9N0xf3wJmX8R43FZWl6pxN
BVZwUVrcCxyueBV+58TLX/zRziTBmBsleZ0/KCTV5O3/Xu4xtNtE0iSk1hbe
nEDjFVwaFBdPLM9ZtKtVVe9mChe8rFROquce3pqwDuETMQjMtKO6MPhME+21
1VY6Yi8k27eQu8cPlo3RrOrUfY6KXvhLb7tzHVX+dGy7Z3uXZahjOhQzXRLT
sPPzXZtor/F4Mri8rTMXfv7AH3H5dxkpmlqdy2hXJiF/AZWi9MvtQryVe/hH
aDeeW+dezd47vjpNtNdUffkeZ9/KwO50+9bkpYnLcM7jSFXmKtr1dhIakuUy
Kv3tAufNdbsKCRvd1fBhnCVtor22istkZcMuPuof6nnp0AdVAHtFmausHSNd
T8uXrqObz+39wJVL2vioc/7svLtTbaK9toq3bDO405CFjSaHXz1fPYfUuVs1
Eq8DyAD5yr6bhx7fvtbJpEx0aA7WXa+VNtFeY82F27i4nYssproeolZnT4vK
5JjOSQEWo0oTqPTHg5v8m2OePKA96KabaL9bucfQ7uoPB9gYoN3Eh91U8rld
4KtWkDRXV5fwaq98Ht0g6ed9dMKWj1nYsI9ZsFenifbaqjtLuGkC95IrxJ18
8lFmw2H5rB7SnpOCM3mkwujXy/qS7sHkYg5vP2zjF0Kw8Se1ifbaqptP4JAd
HfTxhF1MWDPpv50TcUmxuSkSgqnnjf1/8+aSLYORRflOl0j46cYP4yxpE+21
VXshaeEJHxUKZDqc+fiv6HjvjvfKgKm5KVV0CxWDW57xCOn/EVaadhLufNTZ
34xA3q3cY2hvEUgzT7SzRNvWJz2F+P8IiQe3rb0mX6ndgN6l/GjD7KSoiB75
0s3E7IWwi4nYKNKT73Y2vdS7lnsM7W1MwpEjrHxsCR2GR2eOeIhOvXvzc2PJ
EslqGfdLVnD6e32rLWm6TD83kK8g9e1DnzupqF0M4ep/PC585164V6eJ9tqq
n4m7aNJVSJmA1eBaqbFAP7H64Ot4KGSkVaQKUnE+garpA1I/+eGucGPzILwz
girRzAs49YsPOqiwb7DXxsc8bHN16W7lHkO7j44B2t2DaTMbtQtxv5Dy9oUf
opI35AmMsnK5ipsa6GlYWsPC8NN2/rB89sHNabdAOrmwi4o6hG4LG3FSHQ0f
xlnSJtprq2DMjcLXJjpipQmM9mw0kInuunoU54Ypsqw3rtEzDxuwx+NHdT8+
Oc8uzaY8BdLFhuCXm9kEbtpOrWz4MM6SNtFeW/WwcXs24mBIGxO1UBEnG/Oy
8QCbeOfA1jHcqUaWZXVyhPXeRrUb6F8kP0J7+ou32sQ0kHYfE/YzSUC7oxDz
cKsaPoyzpE2011bdTAycPgC5m0/Ao52OAvJdXDzK/fYSugVoV/Qc2ym01zU3
8odhGRWzqvIyttdViJvZle1c1EvFrULaViD9TbTftdxjaDewDZgHBTsPgLew
UdAHBp4+LJ1CagWPg4Y0FQ+yqtW1GMEPwzLVanVkZMRJxSxiuIV5YpkQcw3E
7PkeEx/2so83fBhnSZtor62CMfeKKTDvtoEQAN4lJMBXNXFRf6Z3+PYBqTyG
o48KTnnHaFfKtRvon78KcIPBTSbhuwvmk3FtAlU+Optr+HDVWZtor4/aB5/e
uPNPuCwqjkBqupeqynVjMjgEJMOlwN8n4zZ54ES8evAvDR+WOmsT7fVRk5De
wL8loXHcZXUSfmpdU4FVSVJL2GWQsV5DI1H+xYYPS521ifb6aAsdI/o3XFOv
6mVmjBGuo23H36bIShl/tYQvygl08YG+edPntFbaRHt9tJUlH97cfXjiuPQD
hKv1asKnX08VnGI8peie8a7xI96BeV+P/U61ifb6qFUkA1tj1KUdFVwtD2na
JAJrN9A/J1Odi2X8gC+F+vn3rJNdsHnsM2kT7fVR+2DMk028fXhTGZWNYqNT
fKYeMvVdsgF7uMgb9300j7r61kqbaK+PWvMRGOrewbeMQYYRrqK6mXYd7TgI
Kal6OKiK5HXiW6b532vjTrWJ9vqoie+05RMd2efKMMhVvMZT1NT6JQ7os8mY
AfuqfBXdaM/2eLlEw4flF+p0CUqj/qpRvsxXSD66pfsBZrWZSS5hSRdNtnNx
Jx025cMuKvWT6sutbu9f89jW9a/s+Pgkul420vNqFxibZIwaWJbKBfXy09nX
2j/vduZ6Zvo95p09i2iyNRdz02lXDueKO3jCJgTbt65dzj1rF1b/iiPuLxDW
fNRNR9pzjb8Qv1CBxtiE+DK29wg6Y5SPVrBhqVdemI72CQPtknwGXQxke/BS
b6OH5T9Buzef+Hr8xNc3jn9fvHRm9OL58vXjI9+fKV04MXLq1PjJn9T91WNf
Vb47NPbdydHvcUAMDE5JreE2ykm067X7q6h04NrhLyrH9qDTM/2eE8VjJ6un
viudOVY6faL8/feV06fHvjl16wBcoNy14fX73lrBpZ1C1A7KRVzzZ3e8N5cE
tLezPfsq32JSIeHl1PpluKs/QLssHyp958+lGz4md4T2aZ0u1ucR4y/v/tt5
NILPCs6tiE9PGpExeuUZVC9Sr+80kJEKjEPCrkztTM7kkWRJLZdxBqBU0nBX
UWnG31MF4iMZV0evpK8iGX6VfFY789k32+LZ9Uv7CBcVBoPvnFfdIvxM0irG
4VG4sUdR8OmrSh0z3PXSpmWdvCNVEq/v9dDpeVSh+odo/2HZ4SV0uOfL332H
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
Ol3D0SVcePHWUGTwDf7al0UAeHWu9s6Y76JhQljRpDFU2V8+/uKXf1qWSy7a
9ritQDhE0kVFXP1hT4YAB8rChk35mlVVvdfUwhNOHgd4HdmQnyGXDfd484kl
2c7WIfK+gZW+vthzX36wc+zwbTSBN6ApTRs+K6KqstG/XEbqGJJOoiuffs+E
t/9mkZhcwuIaMgEhHuAINxNy8ISNbzxs5qmaedJOR/054sFcbFkm4hroAuth
3RX/333BB7m173+z6fvKaZy/q8mapjWxPmsi492tqmbsgKkg9ao6+tWVo08O
vurtT4Hr6ixETdzKxdnHbTTe0N1w2MxTtfF643Im5sqEQN1s1M5FWnKdpLBx
y8XCTdxWoIQqEirhCkH3av5uHURSZFwR1kiWxpvV9dIMh0un3z24+ZGB1Uv6
O/8/rsO+I+Yr4Ey8hsNmnirg3EJFWgXSsqPHJCSsA9FH2DW9e18/NXa2bGR6
SRVUrBo2p9gMNM6OyEoZGUMs6aonCKtlXLDhhnZr+/mhxK43XbkkbkDMxzy5
GeucNPXn1UsRuGYjH1sipm1Uzyr2xU9O0WfRVb0buwpuqVG0cTpVuymzI6oM
Ik2WX5psMIik8ugoPC0i6auxk6/t+ejBrWnnQNgz1GQyd6luLtxWSHmZ9LL+
3g17P9w7cRKHfjUVlWWwLdNQL1YrFakZkJk1wdtXJ00KjHJRk4E+yqgCzxVF
QxW8v3UClbZfG3xi14b72FUNh808Vc/OmHn7yieYpzZf5C+jEZyRWsLB9LJO
HvH4q4qiSEbEAC2Y2rzzRYyyyPpeKONGuDh6U9y7y5qPtgqRFj7cKhBWkXTy
cWCkvlw8wMbcNOHMhY1EPmc+buEjS6iadcaZc0rj3EV7JujIYpcTTtkmkiYu
EqAIz0DQlw0v4+IBIW5hw3isdsQe+vSZdw8PnFCu4h4QqnpvFDeaP6KoGijM
sJoq6fangtCoWv0SHX/1y48CW1MWJmnd2buEC7dmV/rZkHVgJUzWfjHu4aL2
XBCQABjwCQs238bBEuDIBISEjyNdVNiRDTpxKmnYyoQcIgl2YAkdbs0E/VTi
cfbpELd+3/jxi+hWGY8iOKTA1bEpaaJ9rog26SzpSRqAdrWqW3ilUq0ged/4
ifU73nd/TuI+bjtI+1DIvyNqoVeZsk94xGhbIQl23pWJ+BduTQNfPu1mYrYs
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
      "], {{0, 208}, {250, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
      Association[
       "XMP" -> Association[
         "BasicSchema" -> 
          Association["CreatorTool" -> "Adobe Photoshop CS6 (Windows)"], 
          "MediaManagementSchema" -> 
          Association[
           "DerivedFrom" -> 
            Association[
             "DerivedFrom" -> 
              Association[
               "InstanceID" -> "xmp.iid:D05139D9ABD411E49E438223A5D57D40", 
                "DocumentID" -> "xmp.did:D05139DAABD411E49E438223A5D57D40"]], 
            "DocumentID" -> "xmp.did:D05139DCABD411E49E438223A5D57D40", 
            "InstanceID" -> "xmp.iid:D05139DBABD411E49E438223A5D57D40"], 
          "RightsManagementSchema" -> 
          Association[
           "DerivedFrom" -> 
            Association[
             "DerivedFrom" -> 
              Association[
               "InstanceID" -> "xmp.iid:D05139D9ABD411E49E438223A5D57D40", 
                "DocumentID" -> "xmp.did:D05139DAABD411E49E438223A5D57D40"]]],
           "PagedTextSchema" -> 
          Association[
           "DerivedFrom" -> 
            Association[
             "DerivedFrom" -> 
              Association[
               "InstanceID" -> "xmp.iid:D05139D9ABD411E49E438223A5D57D40", 
                "DocumentID" -> 
                "xmp.did:D05139DAABD411E49E438223A5D57D40"]]]]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{250, 208},
    PlotRange->{{0, 250}, {0, 208}}]}], "}"}]], "Output",
 CellChangeTimes->{3.787878395294609*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"840f60c8-81ad-4c66-a127-f03e0e4ad785"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WebSearch", "[", 
  RowBox[{"\"\<Green Button\>\"", ",", 
   RowBox[{"MaxItems", "\[Rule]", "5"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.782603784148283*^9, 3.7826037944961367`*^9}, {
  3.782604078711113*^9, 3.7826040895023427`*^9}, {3.782604138786166*^9, 
  3.7826041473225393`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"6aedad36-7e09-417a-8708-98c5e5c0261c"],

Cell[BoxData[
 TemplateBox[{
  "WebSearch","nval",
   "\"Invalid value for parameter \\!\\(\\*RowBox[{\\\"\\\\\\\"Language\\\\\\\
\"\\\"}]\\) in service \
\\!\\(\\*RowBox[{\\\"\\\\\\\"BingSearch\\\\\\\"\\\"}]\\).\"",2,21,2,
   24244199267821990584,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.787878397887621*^9},
 CellLabel->
  "During evaluation of \
In[21]:=",ExpressionUUID->"1114d379-af80-4368-8f73-ce96f58bf587"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 5, "Length" -> 5, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"PageTitle", "Snippet", "Hyperlink"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 5], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "PageTitle"} -> 1, {All, "Snippet"} -> 
           1, {All, "Hyperlink"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "PageTitle" -> 
              TypeSystem`PackageScope`AtomShape[480.00000000000006`], 
              "Snippet" -> 
              TypeSystem`PackageScope`AtomShape[480.00000000000006`], 
              "Hyperlink" -> 
              TypeSystem`PackageScope`AtomShape[460.80000000000007`]]]], 
           5, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1108147916], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"PageTitle", "Snippet", "Hyperlink"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 5], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1108147916]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"PageTitle\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"PageTitle\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 182591554][{
                    All, "PageTitle"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[All, "PageTitle"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Snippet\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Snippet\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 182591554][{
                    All, "Snippet"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[All, "Snippet"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Hyperlink\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Hyperlink\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 182591554][{
                    All, "Hyperlink"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[All, "Hyperlink"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                "The Green Button - the standardized way to get your energy \
...", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[1, 
                   Key["PageTitle"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "The Green Button initiative is an industry-led effort to \
respond to a White Hous \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[1, 
                   Key["Snippet"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["http://www.greenbuttondata.org/", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[1, 
                   Key["Hyperlink"]]], "Mouse"], 
                ImageSize -> {{460.80000000000007`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["TheGreenButton.tv - Index page", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[2, 
                   Key["PageTitle"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "The Green Button has risen from the grave. Brought back to \
life by a few enthusi \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[2, 
                   Key["Snippet"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["http://www.thegreenbutton.tv/forums/", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[2, 
                   Key["Hyperlink"]]], "Mouse"], 
                ImageSize -> {{460.80000000000007`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Green Button | Department of Energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[3, 
                   Key["PageTitle"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "What is Green Button? The Green Button initiative is an \
industry-led effort that \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[3, 
                   Key["Snippet"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["https://www.energy.gov/data/green-button", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[3, 
                   Key["Hyperlink"]]], "Mouse"], 
                ImageSize -> {{460.80000000000007`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Welcome to the Green Button! - Data.gov", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[4, 
                   Key["PageTitle"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Welcome to the Green Button! The Green Button initiative \
gives utility customers \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[4, 
                   Key["Snippet"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["https://www.data.gov/energy/welcome-green-button", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[4, 
                   Key["Hyperlink"]]], "Mouse"], 
                ImageSize -> {{460.80000000000007`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["The Green Button for Residential Use", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[5, 
                   Key["PageTitle"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Thank you for your interest in the Green Button! The \"Green \
Button\" is a way to  \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[5, 
                   Key["Snippet"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["http://greenbuttondata.org/residential.html", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
                  GeneralUtilities`Slice[5, 
                   Key["Hyperlink"]]], "Mouse"], 
                ImageSize -> {{460.80000000000007`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 182591554][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 182591554]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[182591554][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {1500., {80., 86.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.7878784015949616`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"4bc308bc-a4b3-4610-a569-8bd3376b48ea"]
}, Open  ]],

Cell["\<\
At the end of this chapter we will have all of the tools necessary to build \
an application that can track all of the fuel consumption of a single \
building.  In Chapter 3 we will pull everything together to deploy a working \
application.  \
\>", "Text",
 CellChangeTimes->{{3.7832167162516255`*^9, 3.7832168232069206`*^9}, {
  3.7833828871037035`*^9, 
  3.7833829823462343`*^9}},ExpressionUUID->"066af97f-4680-42a2-a984-\
ad7233d05aaf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["User Stories", "Section",
 CellChangeTimes->{{3.7832147742525043`*^9, 
  3.783214776486792*^9}},ExpressionUUID->"a2653a56-1706-4bc8-be5b-\
ab543eda3781"],

Cell[CellGroupData[{

Cell["Plot Fuel Oil Deliveries Over Time", "Subsection",
 CellChangeTimes->{{3.783214679448919*^9, 
  3.7832147032498026`*^9}},ExpressionUUID->"0364e56f-e1e1-4f10-bd60-\
a67a320d5725"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"1cd356d8-9f8c-4306-b403-\
34d7b3c739e1"],

Cell["\<\
As a participant in my school\[CloseCurlyQuote]s energy tracking initiative,  \
I want to plot my school\[CloseCurlyQuote]s fuel oil deliveries  over time.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, {
  3.7823477238829556`*^9, 3.782347765264*^9}, {3.783213616465279*^9, 
  3.783213695293866*^9}, {3.783214597068052*^9, 3.783214601767187*^9}, {
  3.7838156964686613`*^9, 
  3.78381570531289*^9}},ExpressionUUID->"748dcee7-f4e8-42f2-93da-\
3e74b2d6a6a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"ee3de24e-ceac-44b6-bee3-\
bcb66f530214"],

Cell["\<\
Some energy sources such as fuel oil, or wood, are delivered in large \
quantities, at irregular intervals, stored on site, and consumed over time.   \
 Plots of the delivery of these commodities over time may benefit from  \
different presentation than plots of regular time series data due to the \
irregularity of the deliveries .  For instance, if you wish to create a \
monthly plot of fuel oil deliveries, you may find that some months have \
several deliveries, while some have none.  A continuous line plot depicting \
this type of data can make it difficult to discern when deliveries occur.  \
\>", "Text",
 CellChangeTimes->{{3.7823477770614805`*^9, 3.782347780995039*^9}, {
   3.7823478159672375`*^9, 3.782347935689645*^9}, 3.782422137812658*^9, {
   3.782422310673532*^9, 3.7824223725137696`*^9}, {3.7832137172366886`*^9, 
   3.7832137962396326`*^9}, {3.7832148341339684`*^9, 
   3.7832148946466722`*^9}, {3.783214955073513*^9, 
   3.783214964686789*^9}},ExpressionUUID->"b0e5cea6-ee86-4bf4-ba37-\
4f5179a3d61d"],

Cell["\<\
It is also worth remembering that the time of delivery and time of \
consumption are quite different.  In later sections we will examine ways of \
estimating the time of consumption from the operation time of boilers, or \
thermostat data that provides information about when fuel is being used.\
\>", "Text",
 CellChangeTimes->{{3.7824221419228444`*^9, 3.782422156167042*^9}, {
  3.782422540544016*^9, 3.782422595172253*^9}, {3.782423070815074*^9, 
  3.7824230866048503`*^9}, {3.782423229065263*^9, 3.7824232564343634`*^9}, {
  3.782423313630209*^9, 3.7824234049412518`*^9}, {3.7832138249078727`*^9, 
  3.783213826739625*^9}},ExpressionUUID->"d2d469e7-270b-46bd-aebe-\
54fabe586f6c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"aa103892-67b2-4777-a996-\
4c7059c7d91f"],

Cell["\<\
First, we create a list of time-value pairs that account for the deliveries \
to a single location over a year.  \
\>", "Text",
 CellChangeTimes->{{3.7832138492895327`*^9, 
  3.783213894821068*^9}},ExpressionUUID->"0f59e036-1e17-42d1-8199-\
ecd18e19f696"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fueloildeliveries", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "1", ",", "10"}], "}"}], "]"}], ",", "250"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "1", ",", "25"}], "}"}], "]"}], ",", "200"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "3", ",", "5"}], "}"}], "]"}], ",", "370"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "3", ",", "20"}], "}"}], "]"}], ",", "250"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "5", ",", "1"}], "}"}], "]"}], ",", "260"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "6", ",", "30"}], "}"}], "]"}], ",", "150"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "8", ",", "30"}], "}"}], "]"}], ",", "110"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "10", ",", "5"}], "}"}], "]"}], ",", "200"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "11", ",", "15"}], "}"}], "]"}], ",", "220"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", 
         RowBox[{"2019", ",", "12", ",", "14"}], "}"}], "]"}], ",", "270"}], 
      "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.782348237086318*^9, 3.7823482788585997`*^9}, 
   3.7861040475997887`*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"bbbc88fa-7e98-4cda-994f-40db9207c8b7"],

Cell["Now we create a TimeSeries of the data and plot it.", "Text",
 CellChangeTimes->{{3.7832139292735705`*^9, 
  3.783213949210739*^9}},ExpressionUUID->"cf00e8b1-d03a-431e-b169-\
fbe95d0ad083"],

Cell[BoxData[
 RowBox[{"fueloildeliveriesTimeSeries", "=", 
  RowBox[{"TimeSeries", "[", "fueloildeliveries", "]"}]}]], "Input",
 CellChangeTimes->{{3.782349752070755*^9, 3.7823497996196775`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"212771d5-8895-4cd2-8241-94a1588bdde1"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", "fueloildeliveriesTimeSeries", "]"}]], "Input",
 CellChangeTimes->{{3.782349772999341*^9, 3.7823498097446766`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2885b6a7-d835-44cc-b60a-4f8d984d8e3f"],

Cell["\<\
Since the data is irregular, it may be useful to regularize the data into \
monthly totals. The TimeSeriesAggregate function allows us to do that.\
\>", "Text",
 CellChangeTimes->{{3.7824197889973097`*^9, 3.782419819543386*^9}, {
  3.783214031800453*^9, 
  3.783214125397977*^9}},ExpressionUUID->"3dd8c3c3-6312-4fa9-9e68-\
d91620472cee"],

Cell[BoxData[
 RowBox[{"fueloildeliveriesTimeSeriesAggregate", "=", 
  RowBox[{"TimeSeriesAggregate", "[", 
   RowBox[{
    RowBox[{"TimeSeries", "[", "fueloildeliveriesTimeSeries", "]"}], ",", 
    "\"\<Month\>\"", ",", "Total"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.782349828149951*^9, 3.782349861938423*^9}, {
  3.782349894043723*^9, 
  3.782349933492323*^9}},ExpressionUUID->"2282018d-12af-45b0-80aa-\
826fe34ff61a"],

Cell["\<\
This plot has both the monthly aggregate, and individual delivery time \
series.  \
\>", "Text",
 CellChangeTimes->{{3.7824198248988113`*^9, 3.7824198382166796`*^9}, {
   3.782420094403119*^9, 3.782420149610607*^9}, {3.7832142945483203`*^9, 
   3.7832143183774805`*^9}, {3.7832150164290266`*^9, 3.78321508522871*^9}, 
   3.7832969330962524`*^9},ExpressionUUID->"1f29a52d-f37a-4248-87dd-\
dd179272c0e4"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fueloildeliveriesTimeSeries", ",", 
     "fueloildeliveriesTimeSeriesAggregate"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Deliveries\>\"", ",", "\"\<Monthly Totals\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7823499146161156`*^9, 3.7823499612031364`*^9}, {
  3.782428412467269*^9, 3.782428413826743*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"e52a1c55-f6d5-460b-b06d-05deed94f03b"],

Cell["\<\
An alternate presentation that clarifies each discrete time point is to use \
the DateListStepPlot. \
\>", "Text",
 CellChangeTimes->{{3.783214209600233*^9, 3.783214282095298*^9}, 
   3.783214327947667*^9},ExpressionUUID->"4271f4e6-e56f-45f8-9a74-\
1c618ea4cc4a"],

Cell[BoxData[
 RowBox[{"DateListStepPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fueloildeliveriesTimeSeries", ",", 
     "fueloildeliveriesTimeSeriesAggregate"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Deliveries\>\"", ",", "\"\<Monthly Totals\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7823500174015784`*^9, 3.782350031040827*^9}, {
  3.7823500754373417`*^9, 3.782350080328532*^9}, {3.782350181562868*^9, 
  3.7823501912525153`*^9}, {3.7824282101348248`*^9, 3.7824282939298334`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"124bf195-8829-40c4-9279-31814e910638"],

Cell["\<\
Setting Joined to False on a DateListPlot also clarifies the individual \
deliveries, and their spacing over time.\
\>", "Text",
 CellChangeTimes->{{3.782428760472994*^9, 3.782428768524995*^9}, {
   3.782428912713748*^9, 3.782428961291758*^9}, {3.78321441126976*^9, 
   3.7832144664418325`*^9}, 3.7832151127409678`*^9, {3.78338313669354*^9, 
   3.7833831375905533`*^9}},ExpressionUUID->"d6e45859-a6af-4800-b779-\
b784a78dd9b8"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"fueloildeliveriesTimeSeries", ",", "\[IndentingNewLine]", 
   RowBox[{"Filling", "->", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"Last", "@", "#1"}], ",", "Above"}], "]"}], " ", "&"}], 
     ")"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.782351054622991*^9, 3.7823510863210597`*^9}, {
  3.7823513563504806`*^9, 3.782351368618893*^9}, {3.7824278174870057`*^9, 
  3.782427876105569*^9}, {3.7824289772676363`*^9, 3.782428990309209*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"01ad6447-12b3-46dc-b850-b8e145d6c913"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "fueloildeliveriesTimeSeries", ",", 
     "fueloildeliveriesTimeSeriesAggregate"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Filling", "->", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Deliveries\>\"", ",", "\"\<Monthly Totals\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.782351054622991*^9, 3.7823510863210597`*^9}, {
  3.7823513563504806`*^9, 3.782351368618893*^9}, {3.7823514696130886`*^9, 
  3.7823514806270375`*^9}, {3.782428322412281*^9, 3.782428340163123*^9}, {
  3.7824292713929625`*^9, 3.782429274460479*^9}, {3.78242931967974*^9, 
  3.782429322709369*^9}, {3.782429477138751*^9, 3.7824294780483327`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"1142f7dd-ea8f-4b3d-a042-ec045e8c3f0c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Create a form for entering fuel oil deliveries that allows the user to \
specify the date.\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.7824348243728476`*^9, 
  3.7824349083561964`*^9}},ExpressionUUID->"410ac7d2-c813-4dd5-be15-\
9e01b7d37134"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"82205d40-868c-4f8d-8ebe-\
eaf3414eee80"],

Cell["\<\
As a participant  in my school\[CloseCurlyQuote]s energy tracking initiative \
I want to be able to record fuel oil deliveries in a form, and specify the \
date that the delivery occurred.  \
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, {
  3.78243037000322*^9, 3.7824303893207693`*^9}, {3.7824304643802395`*^9, 
  3.7824304891173863`*^9}, {3.783216889279603*^9, 
  3.783216891388103*^9}},ExpressionUUID->"3fda4992-ee4f-473e-9f58-\
f2b311147642"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.7832169111291203`*^9, 
  3.783216913100068*^9}},ExpressionUUID->"83b2b9d6-33e7-44dd-86c3-\
dbc0124e41dc"],

Cell[TextData[{
 "In Chapter 1 the forms for entering register readings  assumed the date was \
Yesterday or Today.  In this form we add a new field to specify the date.   \
The Wolfram Language Interpreter function allows you to specify a wide \
variety of ways of interpreting a form\[CloseCurlyQuote]s fields.  In this \
case, we specify that the form be interpreted as a \
\[OpenCurlyDoubleQuote]Date\[CloseCurlyDoubleQuote], which according to",
 ButtonBox[" the documentation ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/interpreter/Date.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/interpreter/Date.html"],
 "will accept \[OpenCurlyDoubleQuote]any standard format or in natural \
language\[CloseCurlyDoubleQuote].  A \[OpenCurlyDoubleQuote]Hint\
\[CloseCurlyDoubleQuote] is added, which suggests the format that the user \
should enter, although it does not actually restrict the format.  "
}], "Text",
 CellChangeTimes->{{3.783216958342289*^9, 3.783217026746956*^9}, {
  3.7832173460903745`*^9, 
  3.7832173502986865`*^9}},ExpressionUUID->"ed978ce0-12e4-4316-a01b-\
e954d2f887f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"81541d6b-07f5-4c65-b354-\
b57edb977b5b"],

Cell[BoxData[
 RowBox[{"DeleteCloudExpression", "[", 
  "\"\<fueloildeliveriesCloudExpression\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7839592677379956`*^9, 3.7839592758357387`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"ed7d4ef5-6bff-4165-a51f-9302e0c1e9ab"],

Cell["\<\
First, we create a CloudExpression to hold the fuel oil deliveries.\
\>", "Text",
 CellChangeTimes->{{3.781564472131273*^9, 3.7815645101045523`*^9}, {
  3.781564561788581*^9, 3.7815645722421255`*^9}, {3.7815650688108115`*^9, 
  3.7815651165439577`*^9}, {3.781565167645939*^9, 3.781565246202303*^9}, {
  3.7815656487300854`*^9, 3.7815656783538065`*^9}, {3.781830502189267*^9, 
  3.7818305025591187`*^9}, {3.782435574639546*^9, 3.7824355863986464`*^9}, {
  3.7824356596980515`*^9, 
  3.782435680774643*^9}},ExpressionUUID->"5384a2ed-c941-4fe9-98f0-\
ea5573088a1f"],

Cell[BoxData[
 RowBox[{"fueloildeliveriesCloudExpression", "=", 
  RowBox[{"CreateCloudExpression", "[", 
   RowBox[{
   "fueloildeliveries", ",", "\"\<fueloildeliveriesCloudExpression\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7815645816959*^9, 3.7815646164664345`*^9}, {
  3.7818285868165627`*^9, 3.781828605668002*^9}, {3.782430983683997*^9, 
  3.7824310133471813`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"3b153795-1ca5-4f91-ab2d-dab160a6f950"],

Cell["\<\
The first Argument of FormPage creates a Date field that will interpret the \
entered value as a Date.  Try entering Dates in different formats within the \
Date field to test the flexibility of the Date Interpreter.  This form will \
add records of fuel oil deliveries to the CloudExpression from the prior \
story.  \
\>", "Text",
 CellChangeTimes->{{3.783217176949232*^9, 3.7832173139151697`*^9}, {
  3.7832174037534547`*^9, 
  3.7832175128652444`*^9}},ExpressionUUID->"35428bd9-4034-4f2b-af3a-\
3575d22249ab"],

Cell[BoxData[
 RowBox[{"fuelOilFormPage", "=", 
  RowBox[{"FormPage", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Date\>\"", "\[Rule]", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"Interpreter", "->", "\"\<Date\>\""}], ",", 
         RowBox[{
         "\"\<Hint\>\"", "\[Rule]", "\"\<Example January 15, 2019\>\""}]}], 
        "|>"}]}], ",", 
      RowBox[{"\"\<Gallons\>\"", "\[Rule]", "\"\<Integer\>\""}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{
       RowBox[{
       "CloudExpression", "[", "\"\<fueloildeliveriesCloudExpression\>\"", 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"#Date", ",", "#Gallons"}], "}"}]}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"AppearanceRules", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{
       "\"\<Title\>\"", "\[Rule]", "\"\<Enter a fuel oil delivery\>\""}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
       "\"\<Description\>\"", "\[Rule]", 
        "\"\<Enter a date and the number of gallons delivered\>\""}]}], 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.782431380212435*^9, 3.782431382648143*^9}, {
   3.78243158042542*^9, 3.7824317094936113`*^9}, {3.7824318868197193`*^9, 
   3.782431895788891*^9}, {3.782432197758339*^9, 3.782432321643605*^9}, {
   3.7824326532872458`*^9, 3.7824326815925903`*^9}, {3.7824328083079157`*^9, 
   3.78243283398748*^9}, 3.782433058666377*^9, {3.7824335544937973`*^9, 
   3.7824335885251856`*^9}, 3.7824337555033555`*^9, {3.7832170921137524`*^9, 
   3.7832171375023623`*^9}, {3.7850820586651974`*^9, 3.785082069195261*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f6725adb-381b-449c-9ef4-b5f4a099a279"],

Cell["\<\
As you enter new values in the form, evaluate the DateListPlot below to see \
if the form successfully added a record to the CloudExpression.\
\>", "Text",
 CellChangeTimes->{{3.782435947965622*^9, 3.7824360243312716`*^9}, {
  3.7832175182778244`*^9, 
  3.783217531276106*^9}},ExpressionUUID->"0d078073-38a1-45e2-a9ad-\
760d49c5f5f5"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"TimeSeries", "[", "\[IndentingNewLine]", 
    RowBox[{"Get", "[", 
     RowBox[{
     "CloudExpression", "[", "\"\<fueloildeliveriesCloudExpression\>\"", 
      "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Filling", "->", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"Last", "@", "#1"}], ",", "Above"}], "]"}], " ", "&"}], 
     ")"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.782432482664812*^9, 3.7824325081121087`*^9}, 
   3.7824325552086115`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"e84dabff-7459-4f64-9494-06391c4ea71f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import Monthly Bills from a Spreadsheet to a CloudExpression", \
"Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.7826034987631035`*^9, 
  3.782603512912363*^9}},ExpressionUUID->"8f04e260-d11b-40cb-871a-\
4f6a91dbddf8"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"23955c8f-04a4-4337-9855-\
f32aa099228e"],

Cell["\<\
-As a participant in my school\[CloseCurlyQuote]s energy tracking initiative \
I want to be able to import the school\[CloseCurlyQuote]s monthly bill data \
stored in a spreadsheet into a CloudExpression so that the data can be used \
by an application, or user with access to the CloudExpression.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.7826035203406916`*^9, 3.7826036175244665`*^9}, {
   3.783297115358287*^9, 
   3.7832971317873497`*^9}},ExpressionUUID->"862a74ca-868d-4033-a090-\
6e1d29090e88"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"d3cdd986-2436-4649-b8fe-\
b7c846d79b62"],

Cell["\<\
It is likely that someone in your school keeps a spreadsheet with years of \
utility bill data.  If you can access that spreadsheet, the data in it can be \
imported into the Wolfram Language and stored in a CloudExpression with a few \
lines of code.  \
\>", "Text",
 CellChangeTimes->{{3.7832159156055946`*^9, 3.783215958098325*^9}, {
  3.783216468421407*^9, 
  3.7832165262665076`*^9}},ExpressionUUID->"01f98725-4025-4915-b452-\
4abec59b1033"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"cc21a6c4-2db9-4ef6-b76b-\
a68b72a83509"],

Cell["\<\
In this story we will briefly touch upon additional data structures within \
the Wolfram Language.  In the first chapter we worked with lists of \
date-value pairs.  We still want to store the data as lists of date-value \
pairs, but the data will be imported into a Dataset structure, transformed \
into a structure that uses Associations, and is finally transformed to the \
list of date-value pairs that we will store in the cloud expression.

Dataset is similar to a typical table structure in a relational database, or \
even a spreadsheet.  The imported Dataset has columns with column Headers \
that define the data. The SemanticImport function will import data in a \
spreadsheet or similar file format, and return a Dataset object.\
\>", "Text",
 CellChangeTimes->{{3.782605491471799*^9, 3.7826055671338005`*^9}, {
  3.782605740285879*^9, 3.7826057478170185`*^9}, {3.783815971508592*^9, 
  3.7838161166539288`*^9}, {3.783816154046994*^9, 3.783816338452961*^9}, {
  3.783816387886318*^9, 3.7838165154701104`*^9}, {3.7838171420180225`*^9, 
  3.783817143148555*^9}, {3.7838171783564806`*^9, 
  3.7838172436941204`*^9}},ExpressionUUID->"6fcabc0e-a51d-4edd-ba88-\
0cbd903cd34f"],

Cell[BoxData[
 RowBox[{"monthlyBillDataset", "=", 
  RowBox[{
  "SemanticImport", "[", 
   "\"\<C:\\\\Users\\\\kylem\\\\Documents\\\\GitHub\\\\Computational-\
Sustainability-Toolkit\\\\Sample Data\\\\Sample_Monthly_Bills.csv\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.782605260943576*^9, 3.782605277223777*^9}, {
  3.7826053129286957`*^9, 3.7826053150586863`*^9}, {3.7826058725638595`*^9, 
  3.782605878351966*^9}, {3.782607942110058*^9, 3.7826079466745267`*^9}, {
  3.7833835043112726`*^9, 3.7833835453029385`*^9}, {3.785889754087166*^9, 
  3.7858897571541643`*^9}, {3.785889880564657*^9, 3.7858898820579576`*^9}, {
  3.785889932899312*^9, 3.7858899367603793`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"195879ad-6964-4438-a00d-74e064a3aa4a"],

Cell["\<\

   The use of Normal in the code below transforms the Dataset to a list of \
pairs of Associations.   \
\>", "Text",
 CellChangeTimes->{{3.782608007538926*^9, 3.782608039146466*^9}, {
  3.7832159935943885`*^9, 3.783216050861543*^9}, {3.7838172642131176`*^9, 
  3.7838172810018425`*^9}, {3.7871797141700535`*^9, 
  3.7871797155298285`*^9}},ExpressionUUID->"41893f77-f564-4a32-94fb-\
0cde0213a753"],

Cell[BoxData[
 RowBox[{"normalmonthlyBillDataset", "=", 
  RowBox[{"Normal", "[", "monthlyBillDataset", "]"}]}]], "Input",
 CellChangeTimes->{{3.7826079576433163`*^9, 3.7826079825781364`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"af4c2fd6-90e7-4bc2-87bf-17a0c352ff3e"],

Cell["\<\
The Map function, applies a function to each entry in a list.  In this case \
the code below takes each pair of associations, and creates a list of pairs \
of  Bill Date and KWH values.  This is the form that we save in the \
CloudExpression.\
\>", "Text",
 CellChangeTimes->{{3.782605758358466*^9, 3.7826057712479925`*^9}, {
   3.782606149411418*^9, 3.7826061775800133`*^9}, {3.7826063039752383`*^9, 
   3.7826063854693327`*^9}, {3.7826066321693482`*^9, 
   3.7826066720536027`*^9}, {3.7826067215020003`*^9, 3.782606772206865*^9}, {
   3.7826068095679574`*^9, 3.782606893738783*^9}, 3.782608002303982*^9, 
   3.782608049132856*^9, {3.782608126561119*^9, 3.7826081583710527`*^9}, {
   3.783216109724594*^9, 3.7832161363549976`*^9}, {3.7832161708648834`*^9, 
   3.783216255745957*^9}},ExpressionUUID->"d305d85b-8867-4d2a-af49-\
b0e250d4ae75"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"listofMonthlyBills", "=", 
    RowBox[{"Map", "[", "\n", "\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", "\"\<Bill Date\>\"", "]"}], ",", " ", 
         RowBox[{"#", "[", "\"\<KWH\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
      "\n", "\t\t", "normalmonthlyBillDataset"}], "]"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{
  3.782605866769375*^9, {3.782605904529055*^9, 3.782605975252324*^9}, {
   3.7826080722895517`*^9, 3.782608095600955*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"9dc75baf-d9f9-47ee-a25f-2a1366ab0792"],

Cell[BoxData[
 RowBox[{"CreateCloudExpression", "[", 
  RowBox[{"listofMonthlyBills", ",", "\"\<listofMonthlyBills\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7826069280200377`*^9, 3.78260694447195*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"51207e65-5e65-41b8-8ddb-73299f520275"],

Cell[BoxData[
 RowBox[{"DeleteCloudExpression", "[", "\"\<listofMonthlyBills\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7839593713613615`*^9, 3.7839594128079376`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"6d42a7c2-d35b-4258-a8d5-26fcea7a19d5"],

Cell["\<\
Now we can retrieve the values from the CloudExpression, and plot them.  \
\>", "Text",
 CellChangeTimes->{{3.7826076507759914`*^9, 
  3.7826076754796658`*^9}},ExpressionUUID->"c46ac32c-5adb-437b-91e1-\
830c03cd30fb"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<listofMonthlyBills\>\"", "]"}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826073448391848`*^9, 3.782607420402771*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"ef354c17-26f5-4a92-a243-b2e0fce359d0"],

Cell["\<\
Now we can tie the set of functions above into a single operation that we \
could could use on other spreadsheets.\
\>", "Text",
 CellChangeTimes->{{3.7826081817168484`*^9, 3.7826082586744604`*^9}, {
  3.7826083509774323`*^9, 3.7826083865993657`*^9}, {3.783383732087945*^9, 
  3.7833837411496935`*^9}},ExpressionUUID->"7d647f47-2ab2-42aa-9d7b-\
686dda43e2aa"],

Cell[BoxData[
 RowBox[{"CreateCloudExpression", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", "\"\<Bill Date\>\"", "]"}], ",", " ", 
        RowBox[{"#", "[", "\"\<KWH\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
     RowBox[{"Normal", "[", 
      RowBox[{"SemanticImport", "[", "\"\<enter file path\>\"", "]"}], 
      "]"}]}], "]"}], ",", "\"\<Monthly Bills\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.782607781952243*^9, 3.7826078417631474`*^9}, {
  3.782607897061167*^9, 3.782607902285023*^9}, {3.782608289776026*^9, 
  3.78260832806606*^9}, {3.7833837089608727`*^9, 3.7833837141242867`*^9}, {
  3.783384481184347*^9, 
  3.783384481689581*^9}},ExpressionUUID->"e6f96bf6-0c3d-4f16-bf33-\
68887663a38e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Import Interval Data from a Spreadsheet into a New CloudExpression\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
   3.7813835709195538`*^9, 3.781383573336465*^9}, 3.782691137393975*^9, {
   3.783118833560048*^9, 
   3.7831188341354427`*^9}},ExpressionUUID->"c5767d8d-3607-4906-bc25-\
ab1a8f4cda48"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"5425ca80-2e0e-4e49-8154-\
254b83a07fd3"],

Cell["\<\
As a participant in my School\[CloseCurlyQuote]s energy tracking initiative I \
want to be able to  import the interval data that is in a spreadsheet into a \
new CloudExpression so that the data can be stored in a central location and \
shared so that other users or applications can view or analyze the data.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.782691235351514*^9, 3.7826913583860674`*^9}, {
   3.7831192095670633`*^9, 3.7831193128373604`*^9}, {3.7831194636253924`*^9, 
   3.7831194975888443`*^9}, 3.7832974220274897`*^9, {3.7833837647302656`*^9, 
   3.783383787952819*^9}, 
   3.7871798184808207`*^9},ExpressionUUID->"2ebe2f53-2553-44d5-b10f-\
7e8b7e24e84f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"2bcd8bdf-9ad7-4a12-98e4-\
bd3a167e035e"],

Cell["\<\
Modern electrical meters, often referred to as \[OpenCurlyDoubleQuote]smart \
meters\[CloseCurlyDoubleQuote] are capable of recording and reporting energy \
consumption within relatively short intervals.  Many utilities now program \
their meters to record intervals of 15 , 30 or 60 minutes.  Many meters are \
capable of recording intervals as short as 1 minute, but the cost of \
processing and storing the volume of data resulting from 1 minute intervals \
is considerable.  

Interval data provides significant insight into how a building uses energy.  \
You can see when a building uses energy during the day, and infer what the \
major consumers are at different points of the day.  \
\>", "Text",
 CellChangeTimes->{{3.782691542488536*^9, 3.7826916991495686`*^9}, {
   3.7826919602175627`*^9, 3.7826921793229604`*^9}, {3.782692355899662*^9, 
   3.782692396842759*^9}, {3.7826924280934896`*^9, 3.782692444542083*^9}, {
   3.782692484522188*^9, 3.7826925159026957`*^9}, {3.782692566937211*^9, 
   3.782692620666343*^9}, {3.7826927913147354`*^9, 3.782692932730089*^9}, 
   3.7832974701673884`*^9, {3.787179835602309*^9, 
   3.7871798470307145`*^9}},ExpressionUUID->"bfb15df5-4ee4-4f51-b2f5-\
b0d5b3ed11a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"5b2324ff-c15c-4db0-b8ff-\
3be53205b124"],

Cell["\<\
One can use the same code to import interval data as we used to import \
monthly bill data.  The primary difference here is that the column headers on \
the imported file are different, and we name this CloudExpression \
\[OpenCurlyDoubleQuote]Interval Data\[CloseCurlyDoubleQuote].\[LineSeparator]\
\>", "Text",
 CellChangeTimes->{{3.782693096509152*^9, 3.782693133022027*^9}, {
  3.7826932640482492`*^9, 3.782693275936928*^9}, {3.782693358187136*^9, 
  3.782693371616357*^9}, {3.7826936083919754`*^9, 3.7826936356440516`*^9}, {
  3.783383893733053*^9, 3.783383910286925*^9}, {3.7833853753397093`*^9, 
  3.783385376808918*^9}},ExpressionUUID->"679ada35-3a88-40c0-940d-\
3d7059476f78"],

Cell[BoxData[
 RowBox[{"DeleteCloudExpression", "[", "\"\<Interval Data\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.78346432694279*^9, 3.7834643352491865`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"d3822027-a005-4231-8859-7236f9812975"],

Cell[BoxData[
 RowBox[{"CreateCloudExpression", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
        RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
     RowBox[{"Normal", "[", 
      RowBox[{
      "SemanticImport", "[", 
       "\"\<C:\\\\Users\\\\kylem\\\\Documents\\\\GitHub\\\\Computational-\
Sustainability-Toolkit\\\\Sample Data\\\\Sample_Interval_September.csv\>\"", 
       "]"}], "]"}]}], "]"}], ",", "\"\<Interval Data\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.782607781952243*^9, 3.7826078417631474`*^9}, {
   3.782607897061167*^9, 3.782607902285023*^9}, {3.782608289776026*^9, 
   3.78260832806606*^9}, {3.7826934505814857`*^9, 3.7826935923145733`*^9}, {
   3.783383847810232*^9, 3.783383882664234*^9}, 3.7833854127553062`*^9, {
   3.7858900708835397`*^9, 3.78589009847038*^9}, {3.785890229172728*^9, 
   3.7858902424117823`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"d9da9faf-34c3-43a9-a637-7215fbb521b5"],

Cell["\<\
Here we plot the interval data.  Notice the density of the data points.  A \
meter recording 15 minute interval data generates 96 data points in a day if \
it is measuring a single time series.  This is 2880 data points in a month \
compared to the single data point  that was available in the era of manually \
collected meter readings.  \
\>", "Text",
 CellChangeTimes->{{3.7832975271847477`*^9, 3.7832975458844433`*^9}, {
   3.783297831562169*^9, 3.7832979110805945`*^9}, {3.7832980062278557`*^9, 
   3.783298072879308*^9}, 3.7832981164851522`*^9, {3.783298164369691*^9, 
   3.783298235970495*^9}, {3.7832982799850197`*^9, 3.783298281635127*^9}, {
   3.787179942763199*^9, 
   3.7871799595417433`*^9}},ExpressionUUID->"d46c4352-945d-45a0-a5ba-\
565271be24c2"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826936656989613`*^9, 3.7826937078480787`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"46cdea8d-85d9-4992-adf3-34fe168bc6ff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Add Interval Data from a Spreadsheet  to an Existing CloudExpression\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.783118803258808*^9, 
  3.783118824886382*^9}, {3.7831198825690403`*^9, 
  3.783119888750103*^9}},ExpressionUUID->"641d7c4e-00a7-44f3-b8de-\
ec644f397045"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"63c278d9-fd22-4e35-9e82-\
9f6cb7002b34"],

Cell["\<\
As a participant in my school\[CloseCurlyQuote]s energy tracking initiative I \
want to be able to upload interval readings in a spreadsheet to an existing \
CloudExpression that contains additional interval data.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, 3.7831198955092444`*^9, {3.7831199373025646`*^9, 
   3.783119978793053*^9}, {3.783128318854502*^9, 3.783128320248164*^9}, {
   3.7833839962864833`*^9, 
   3.7833840088867497`*^9}},ExpressionUUID->"466388c3-aa39-4c7d-84c8-\
12b022ed8d60"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"45512cba-c7f7-46a4-aeee-\
671743c8985e"],

Cell["\<\
In the first story uploading interval data to a CloudExpression we created \
the CloudExpression, and uploaded a complete list of time-value pairs within \
the same function.  We require different code to add incremental data to an \
existing CloudExpression. \
\>", "Text",
 CellChangeTimes->{{3.7831270991645746`*^9, 3.7831272175759735`*^9}, {
   3.7831272578188086`*^9, 3.783127315062298*^9}, {3.7831273533869658`*^9, 
   3.783127356236942*^9}, {3.783127433114335*^9, 3.7831274856136947`*^9}, {
   3.7831275745387383`*^9, 3.783127591399539*^9}, 
   3.78759221552769*^9},ExpressionUUID->"e9a1464b-eff1-4c94-802d-\
03b8bec27695"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"4d937c56-654c-4b3e-a9f1-\
1511feca19da"],

Cell["\<\
First, we will use our code to create a list of time-value pairs of the \
incremental data that we wish to add.  The spreadsheet used here contains \
data for the month following the data imported in the prior user story.\
\>", "Text",
 CellChangeTimes->{{3.7831275982945127`*^9, 3.7831276030218906`*^9}, {
  3.7831277303392086`*^9, 3.7831277654815397`*^9}, {3.7833840860592117`*^9, 
  3.7833841261827607`*^9}},ExpressionUUID->"bb4a3dd7-cb3c-4789-9f5a-\
b95c8d728248"],

Cell[BoxData[
 RowBox[{"incrementalIntervalData", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
       RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], " ", "&"}], ",", 
    RowBox[{"Normal", "[", 
     RowBox[{
     "SemanticImport", "[", 
      "\"\<C:\\\\Users\\\\kylem\\\\Documents\\\\GitHub\\\\Computational-\
Sustainability-Toolkit\\\\Sample Data\\\\Sample_Interval_October.csv\>\"", 
      "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.783125221793974*^9, 3.7831252296811943`*^9}, {
  3.7833840644447603`*^9, 3.7833840815835257`*^9}, {3.7871810465822487`*^9, 
  3.7871810737990446`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"b7e2a6b9-2808-4701-838d-88e597a0df54"],

Cell["\<\
Where we used AppendTo to add new register readings to an existing \
CloudExpression in the first chapter, that function would be very inefficient \
in the context of adding thousands of new records to a CloudExpression, as \
AppendTo returns an updated CloudExpression with each incremental value. This \
code uses the Put function to fully replace the existing content of \
CloudExpression \[OpenCurlyDoubleQuote]Interval Data\[CloseCurlyDoubleQuote] \
with completely new content.  The new content is a union of the existing data \
within the CloudExpression and the incrementalIntervalData.\
\>", "Text",
 CellChangeTimes->{{3.7831277751907916`*^9, 3.7831282812778897`*^9}, {
  3.783128352562916*^9, 3.7831283790073996`*^9}, {3.7831284120704737`*^9, 
  3.7831284292839947`*^9}, {3.783128471699484*^9, 3.7831284851570454`*^9}, {
  3.7832986014346313`*^9, 3.7832986192866116`*^9}, {3.783384208895087*^9, 
  3.7833842942901535`*^9}, {3.7833843260105224`*^9, 3.783384386220423*^9}, {
  3.783464537786643*^9, 3.7834646712577314`*^9}, {3.7834647147342424`*^9, 
  3.783464747172994*^9}, {3.783464951339049*^9, 3.7834649529213915`*^9}, {
  3.78346516594335*^9, 3.783465212208404*^9}, {3.783465332781146*^9, 
  3.7834653662864776`*^9}, {3.783465408501912*^9, 
  3.783465484151333*^9}},ExpressionUUID->"5cb41e44-8cc2-444d-9c4f-\
055b2f6f808f"],

Cell[BoxData[
 RowBox[{"Put", "[", 
  RowBox[{
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Get", "[", 
      RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
     ",", "\[IndentingNewLine]", "incrementalIntervalData"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.78346367786073*^9, 3.783463765043811*^9}, 
   3.783463821349887*^9, 3.783463862951646*^9, {3.783472156515688*^9, 
   3.7834721612262836`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"8f1b06af-9ddb-40b1-b7ce-07018aa1d66d"],

Cell["\<\
We can now visualize the CloudExpression to see an additional month of data \
has been added.\
\>", "Text",
 CellChangeTimes->{{3.7833845284557133`*^9, 3.7833845520776043`*^9}, {
  3.7875922840599146`*^9, 
  3.7875922858521214`*^9}},ExpressionUUID->"0722cd85-3b67-476d-af71-\
04b7a598a5b8"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826936656989613`*^9, 3.7826937078480787`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"83861167-a260-4df8-af4e-d5f43b5f3493"],

Cell["The code below ties it all together.", "Text",
 CellChangeTimes->{{3.783298706485909*^9, 
  3.783298720757865*^9}},ExpressionUUID->"c67976ed-1668-447c-afcb-\
ead6a018245b"],

Cell[BoxData[
 RowBox[{"Put", "[", 
  RowBox[{
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Get", "[", 
      RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
          RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], " ", "&"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"Normal", "[", 
        RowBox[{
        "SemanticImport", "[", 
         "\"\<C:\\\\Users\\\\kylem\\\\OneDrive\\\\Holderness \
Project\\\\Computational Sustainability \
Toolkit\\\\Sample_Interval_October.csv\>\"", "]"}], "]"}]}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7834657000303*^9, 3.7834657339979143`*^9}, {
   3.783471511296405*^9, 3.783471520426447*^9}, 3.7834721985571885`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"054c0ea6-4b25-4293-84c0-6f6bb0714414"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Not Complete- Use a Form to Add Interval Data from a Spreadsheet to an \
existing CloudExpression\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.7832118171159477`*^9, 
  3.783211901259347*^9}, {3.783384668158696*^9, 3.7833846860882835`*^9}, {
  3.7871812554479475`*^9, 
  3.787181260217619*^9}},ExpressionUUID->"9832afd5-a032-4b63-b1e9-\
9726497ec05d"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"b4436d23-37c2-42d9-9e9c-\
e4bd31f00cb1"],

Cell["\<\
As a participant in my school\[CloseCurlyQuote]s energy tracking initiative I \
want to be able to upload interval data from a CSV file to an existing \
CloudExpression through a web form.  \
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.7829532021676865`*^9, 3.7829532213222027`*^9}, {
   3.7829533459935102`*^9, 3.7829533789758043`*^9}, {3.783211640302099*^9, 
   3.7832116588135805`*^9}, {3.7832117710021877`*^9, 
   3.7832117921484303`*^9}, {3.7832121137773113`*^9, 3.783212143748186*^9}, 
   3.7871812315286965`*^9},ExpressionUUID->"e869defa-d13f-4035-a095-\
303e840dc410"],

Cell["\<\
To date I can\[CloseCurlyQuote]t get the form, either cloud deployed or \
locally to work.\
\>", "Text",
 CellChangeTimes->{{3.7871812693297315`*^9, 
  3.7871812858100233`*^9}},ExpressionUUID->"904e2594-3813-40fa-b01c-\
3cd097cf5857"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"16aad963-7ae0-4845-92cd-\
e3e03ee20e25"],

Cell["\<\
This code takes our function that appends interval data to an existing \
CloudExpression and places it in a FormPage.  The inputs to the page are a \
CSV file, and the name of the CloudExpression.  \
\>", "Text",
 CellChangeTimes->{{3.783212255620867*^9, 3.7832124068863907`*^9}, {
  3.7832125377825656`*^9, 
  3.7832125421147366`*^9}},ExpressionUUID->"a9240785-f209-4152-96d5-\
6ea8be64f423"],

Cell[BoxData[
 RowBox[{"intervalDataForm", "=", 
  RowBox[{"FormPage", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<CSV\>\"", "\[Rule]", "\"\<CSV\>\""}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<ExpressionName\>\"", ",", "\"\<Expression Name\>\""}], 
        "}"}], "\[Rule]", "\"\<String\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Put", "[", 
      RowBox[{
       RowBox[{"Union", "[", 
        RowBox[{
         RowBox[{"Get", "[", 
          RowBox[{"CloudExpression", "[", "#ExpressionName", "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", "\"\<IntervalEnd\>\"", "]"}], ",", " ", 
              RowBox[{"#", "[", "\"\<Quantity\>\"", "]"}]}], "}"}], "&"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Normal", "[", 
            RowBox[{"SemanticImport", "[", "#CSV", "]"}], "]"}]}], "]"}]}], 
        "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"CloudExpression", "[", "#ExpressionName", "]"}]}], "]"}], 
     "&"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AppearanceRules", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{
       "\"\<Title\>\"", "\[Rule]", 
        "\"\<Upload a CSV with interval data\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<Description\>\"", "\[Rule]", 
        "\"\<Select a CSV file and provide Cloud Expression name.  The CSV \
should have columns with headers named IntervalEnd and Quantity.\>\""}]}], 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.782953404173899*^9, 3.7829534059051695`*^9}, {
   3.7829534688150473`*^9, 3.7829535124524827`*^9}, {3.782953644374713*^9, 
   3.7829536476870604`*^9}, {3.782955059154894*^9, 3.7829550602804956`*^9}, {
   3.782955167067848*^9, 3.78295517207465*^9}, {3.7829552063687754`*^9, 
   3.782955207270015*^9}, {3.7829562872398486`*^9, 3.78295631450456*^9}, {
   3.7829563680529413`*^9, 3.78295636893655*^9}, {3.7829565116259494`*^9, 
   3.7829565337792735`*^9}, {3.7829585578643885`*^9, 3.782958560898571*^9}, {
   3.782958897043867*^9, 3.782958961852641*^9}, {3.7829590162611694`*^9, 
   3.782959017686178*^9}, {3.7832102211083937`*^9, 3.7832102600584345`*^9}, {
   3.783210294965558*^9, 3.7832103202420893`*^9}, {3.783210396172617*^9, 
   3.7832104574043555`*^9}, {3.7832105772305527`*^9, 
   3.7832106252249546`*^9}, {3.7832122356504407`*^9, 3.78321223911904*^9}, 
   3.7832123427118287`*^9, {3.7832125780344543`*^9, 3.7832126095507326`*^9}, {
   3.783212647821923*^9, 3.783212722805827*^9}, 3.7832129829779587`*^9, 
   3.7833855653976994`*^9, {3.7834658298428946`*^9, 3.7834658570500484`*^9}, 
   3.7834659870300255`*^9, 3.783466041904434*^9, {3.7834714681745605`*^9, 
   3.7834714759056764`*^9}, {3.7834715764881144`*^9, 
   3.7834716099706917`*^9}, {3.7834716829093018`*^9, 
   3.7834716863539677`*^9}, {3.7834723086533184`*^9, 3.783472395561101*^9}, 
   3.783472438724613*^9, 3.7834724946669536`*^9, {3.7834729844942985`*^9, 
   3.783473038668968*^9}, {3.783473156697112*^9, 3.7834731686988235`*^9}, {
   3.7834733376596537`*^9, 3.783473349276293*^9}, {3.7834734674138255`*^9, 
   3.7834735052842236`*^9}, {3.783513654124173*^9, 3.783513749207389*^9}, 
   3.7835138894551554`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"90cb3cc2-0434-4c97-bdcd-6fff01b98b6f"],

Cell["\<\
When the form is defined we can CloudDeploy it so that anyone with permission \
can use it to upload data.  \
\>", "Text",
 CellChangeTimes->{{3.783298868569607*^9, 
  3.783298973251873*^9}},ExpressionUUID->"b36e5481-55f4-463d-b3cb-\
e4b1ad639a24"],

Cell[BoxData[
 RowBox[{"CloudDeploy", "[", "intervalDataForm", "]"}]], "Input",
 CellChangeTimes->{{3.7832112827479143`*^9, 3.78321129721129*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"e2ebc918-1f8a-4544-97c1-8532a3f28c33"],

Cell["\<\
We can plot the data again to see that additional data has been added.\
\>", "Text",
 CellChangeTimes->{{3.7833846167866187`*^9, 
  3.783384651147871*^9}},ExpressionUUID->"99fa105b-4b38-464b-b52d-\
8d254c1105a6"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.783514119473675*^9, 3.783514119703454*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"7e9efde0-201a-4404-bff2-7e52b2767659"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826936656989613`*^9, 3.7826937078480787`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"a33bdeac-9110-4c82-a328-08f01ace0377"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Specify the window of interval data displayed in a DateListPlot\
\>", "Subsection",
 CellChangeTimes->{{3.781383247113061*^9, 3.781383291124697*^9}, {
  3.7813835709195538`*^9, 3.781383573336465*^9}, {3.782695233487632*^9, 
  3.7826952462265472`*^9}, {3.782695342503796*^9, 3.78269539095397*^9}, {
  3.7826955610668364`*^9, 3.7826955729152975`*^9}, {3.7832990759202123`*^9, 
  3.783299084620849*^9}},ExpressionUUID->"0fea2c02-785c-4aa3-8234-\
36f9f7ece4fb"],

Cell[CellGroupData[{

Cell["Story Details", "Subsubsection",
 CellChangeTimes->{{3.781383391065668*^9, 
  3.781383407691759*^9}},ExpressionUUID->"05bbc73a-7db1-449a-950b-\
822c42cdd672"],

Cell["\<\
-As a participant in my school\[CloseCurlyQuote]s energy tracking initiative \
trying to understand how my school consumes electricity, I want to be able to \
specify the time window of interval data displayed in a DateListPlot or \
similar visualization.\
\>", "Text",
 CellChangeTimes->{{3.781383413844165*^9, 3.78138346837156*^9}, 
   3.782434088746277*^9, {3.7826955858562403`*^9, 3.7826956387851954`*^9}, {
   3.7826956814125843`*^9, 3.782695690396172*^9}, {3.7828655050393853`*^9, 
   3.7828655058107*^9}, {3.7832991035782843`*^9, 3.783299115701083*^9}, {
   3.7875923783058386`*^9, 
   3.7875923805460043`*^9}},ExpressionUUID->"c2f12a3e-9683-44e5-961e-\
57d371bb9b30"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Information", "Subsubsection",
 CellChangeTimes->{{3.7813835003952417`*^9, 
  3.7813835103187327`*^9}},ExpressionUUID->"bfa36419-a462-42f5-ad1d-\
ccb33a163c6a"],

Cell["\<\
In this story we introduce Manipulate, which is a primary function through \
which users of the system can manipulate the variables of an expression.  \
Manipulate \
\>", "Text",
 CellChangeTimes->{{3.7838180332605686`*^9, 
  3.7838181163361835`*^9}},ExpressionUUID->"0dafd423-634c-4e8d-8b95-\
37cc8038da1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Explanation", "Subsubsection",
 CellChangeTimes->{{3.7813835151643105`*^9, 
  3.7813835224884386`*^9}},ExpressionUUID->"7b3fd20b-0b0a-4c1b-a19b-\
9b55e62ec9f9"],

Cell["\<\
To simplify our code later, first we will define a local TimeSeries object \
with our CloudExpression data.\
\>", "Text",
 CellChangeTimes->{{3.7828420452558374`*^9, 
  3.7828420899979925`*^9}},ExpressionUUID->"a51a177a-b0ac-4a75-afa1-\
e2a1e3024095"],

Cell[BoxData[
 RowBox[{"intervaldataTimeSeries", "=", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7828420045171933`*^9, 3.78284203227662*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"763c236c-4ebb-46b6-bd43-6aca323945d7"],

Cell["\<\
If you want to plot only a portion of a TimeSeries, instead of a complete \
TimeSeries, you apply the TimeSeriesWindow function to a TimeSeries object.  \
The first argument of the TimeSeriesWindow is the TimeSeries, and the second \
and third arguments (or perhaps second) are the first time and last time of \
the window that you wish to select.  First we will plot the complete \
TimeSeries.\
\>", "Text",
 CellChangeTimes->{{3.7828420982786417`*^9, 3.7828422078220887`*^9}, {
  3.782842353650498*^9, 3.7828424217060537`*^9}, {3.7828424625893726`*^9, 
  3.7828424743512974`*^9}},ExpressionUUID->"91487e0f-4b44-4237-bb9a-\
47fa937a864e"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", "intervaldataTimeSeries", "]"}]], "Input",
 CellChangeTimes->{{3.7828424460451655`*^9, 3.7828424561651306`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"0e86c8dd-cd91-418f-bdbb-de10739833cc"],

Cell["\<\
Here we will use TimeSeriesWindow to visualize a full day of interval data.\
\>", "Text",
 CellChangeTimes->{{3.7828426099337234`*^9, 
  3.782842639974512*^9}},ExpressionUUID->"61b136c2-67d0-4349-9f83-\
fde275d3ccaf"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"TimeSeriesWindow", "[", 
   RowBox[{"intervaldataTimeSeries", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"2019", ",", "10", ",", "14", ",", "0", ",", "0"}], "}"}], 
       "]"}], ",", 
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"2019", ",", "10", ",", "15", ",", "0", ",", "0"}], "}"}], 
       "]"}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7826972194301133`*^9, 3.7826973500716305`*^9}, {
  3.782697384353961*^9, 3.7826973970699635`*^9}, {3.7828424874563227`*^9, 
  3.782842494932201*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"0339766d-8388-4572-8d6b-639b91e1e0ea"],

Cell["\<\
That works, but we don\[CloseCurlyQuote]t really want to make people type in \
a date every time they want to select a different window.  We can make the \
user\[CloseCurlyQuote]s life easier by integrating Manipulate into the \
expression.  Manipulate is the primary function that allows users to interact \
with data on the screen.  The manipulate function allows you to manipulate \
multiple variables within an expression.  In this case we will allow the user \
to manipulate both the lower bound, and the upper bound of the \
TimeSeriesWindow.  To do this, we will take advantage of the TimeSeries \
properties \[OpenCurlyDoubleQuote]FirstTime\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]LastTime\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.782842687231789*^9, 3.782842743747988*^9}, {
   3.7828430073958445`*^9, 3.7828431769756517`*^9}, {3.7828432402442837`*^9, 
   3.7828433530267963`*^9}, 3.7828624900730195`*^9, {3.7828625261031275`*^9, 
   3.7828625283618174`*^9}, {3.7828655777924166`*^9, 3.7828656191542797`*^9}, 
   3.7875924281264715`*^9},ExpressionUUID->"4ee60f21-43c5-4f4f-bc14-\
fc64191ff389"],

Cell["\<\
To retrieve a property of a TimeSeries you can use the following form.\
\>", "Text",
 CellChangeTimes->{{3.782843377196599*^9, 3.782843400208971*^9}, 
   3.7828635977778864`*^9},ExpressionUUID->"7f6c8aff-e312-411e-a346-\
358c0f052fdc"],

Cell[BoxData[
 RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.78284336123862*^9, 3.782843370651904*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"c7dbb961-2c5f-4ebd-aeb0-a68dfd6acb48"],

Cell["\<\
This output is UnixTime, which is precise, but not exactly meaningful.  To \
see a human readable value we can wrap that in a DateObject.\
\>", "Text",
 CellChangeTimes->{{3.7828434099479523`*^9, 3.782843466743167*^9}, 
   3.7828596727766647`*^9, {3.7828597126974993`*^9, 3.7828597179882917`*^9}, {
   3.7828656404140253`*^9, 
   3.782865641774828*^9}},ExpressionUUID->"b8ff6fa7-bbab-4793-abfb-\
bf8aee3fd4ae"],

Cell[BoxData[
 RowBox[{"DateObject", "[", 
  RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7828431913205805`*^9, 3.782843218567355*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"72c12528-355a-4cbb-9ab0-5fde38b4e89d"],

Cell["\<\
In a Manipulate expression you specify the variables within the expression \
that you wish to manipulate, and then you define the parameters for each \
variable individually.  In this case \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote] \
define the window of the TimeSeriesWindow function.  The syntax used here to \
define each variable is {{variable, default value, \
\[OpenCurlyDoubleQuote]label\[CloseCurlyDoubleQuote]}, the lower bound of the \
window, and the upper bound of the window}. Note that the default value, and \
the lower and upper bounds of the window are defined as the \
\[OpenCurlyDoubleQuote]FirstTime\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]LastTime\[CloseCurlyDoubleQuote] of the TimeSeries \
being visualized.  This ensures that the complete TimeSeries can be viewed, \
and prevents selection of dates outside of the TimeSeries.\
\>", "Text",
 CellChangeTimes->{{3.7828613486030803`*^9, 3.7828614091279483`*^9}, 
   3.782862486508301*^9, {3.7828625452071824`*^9, 3.78286279932487*^9}, {
   3.782862839234349*^9, 3.7828628410932903`*^9}, {3.782862871926119*^9, 
   3.782863002947194*^9}, {3.78286363876204*^9, 
   3.7828636444452753`*^9}},ExpressionUUID->"2583cd8f-9afd-4dc0-993e-\
2dda4bed660e"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
    RowBox[{"TimeSeriesWindow", "[", 
     RowBox[{"intervaldataTimeSeries", ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", 
       RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], 
       ",", "\"\<Start Date\>\""}], "}"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<LastTime\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", 
       RowBox[{"intervaldataTimeSeries", "[", "\"\<LastTime\>\"", "]"}], ",", 
       "\"\<End Date\>\""}], "}"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
     RowBox[{"intervaldataTimeSeries", "[", "\"\<LastTime\>\"", "]"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7827802351623907`*^9, 3.782780272008725*^9}, {
  3.7827803096397114`*^9, 3.7827803339345407`*^9}, {3.7827804737115955`*^9, 
  3.782780590356553*^9}, {3.7827806295469475`*^9, 3.7827806977720594`*^9}, {
  3.7827813804067087`*^9, 3.782781578272168*^9}, {3.782781614232648*^9, 
  3.7827816512798414`*^9}, {3.7827817544642057`*^9, 3.782781763027568*^9}, {
  3.782859768452764*^9, 3.7828598719551096`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"d30c7146-0859-4686-9c29-5b8cd1de6671"],

Cell["\<\
Here we will define our first Function.  Functions allow you to simplify the \
task of using code that you will use repeatedly.  In the expression below we \
name the function manipulateDateListPlotTimeSeries, and name the argument \
timeseries_.  The code of the function is identical to the code above, but \
\[OpenCurlyDoubleQuote]timeseries\[CloseCurlyDoubleQuote] is used in every \
instance within the function that a specific TimeSeries would be specified.  \
After you evaluate the Function, you can use it with any TimeSeries as the \
argument.  \
\>", "Text",
 CellChangeTimes->{{3.78286306420121*^9, 3.782863410640526*^9}, {
  3.7875925017346163`*^9, 
  3.787592502494918*^9}},ExpressionUUID->"14ed4ac1-386f-4f89-8218-\
5baeea52fb2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"manipulateDateListPlotTimeSeries", "[", "timeseries_", "]"}], ":=", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
     RowBox[{"TimeSeriesWindow", "[", 
      RowBox[{"timeseries", ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", 
        RowBox[{"timeseries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
        "\"\<Start Date\>\""}], "}"}], ",", 
      RowBox[{"timeseries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
      RowBox[{"timeseries", "[", "\"\<LastTime\>\"", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"b", ",", 
        RowBox[{"timeseries", "[", "\"\<LastTime\>\"", "]"}], ",", 
        "\"\<End Date\>\""}], "}"}], ",", 
      RowBox[{"timeseries", "[", "\"\<FirstTime\>\"", "]"}], ",", 
      RowBox[{"timeseries", "[", "\"\<LastTime\>\"", "]"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7828601158118153`*^9, 3.782860126913407*^9}, {
  3.782860246622946*^9, 3.7828603427945557`*^9}, {3.7828607907363124`*^9, 
  3.7828607916698704`*^9}, {3.7828608639614534`*^9, 3.7828609607818375`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"d64c8a47-4918-4bf5-bf5e-fb67d3259f62"],

Cell[BoxData[
 RowBox[{"manipulateDateListPlotTimeSeries", "[", "intervaldataTimeSeries", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7828607663046145`*^9, 3.782860772263241*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"2f286e00-df46-49a6-a393-bee5090dcf7c"],

Cell[BoxData[
 RowBox[{"manipulateDateListPlotTimeSeries", "[", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{"Get", "[", 
    RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.782865127605563*^9, 3.782865167612151*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"f857a89e-41a7-43d3-a658-703e6eddc771"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CloudDeploy", "[", 
   RowBox[{"Delayed", "[", "\[IndentingNewLine]", 
    RowBox[{"manipulateDateListPlotTimeSeries", "[", 
     RowBox[{"Get", "[", 
      RowBox[{"CloudExpression", "[", "\"\<Interval Data\>\"", "]"}], "]"}], 
     "]"}], "]"}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.782905083981124*^9, 3.782905131791093*^9}, {
  3.78290522346834*^9, 3.7829052453197556`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"5818e0f6-2e1b-4305-bc2a-49a5147087da"],

Cell[BoxData[
 RowBox[{"CloudObjectInformation", "[", 
  RowBox[{
  "CloudObject", "[", 
   "\"\<https://www.wolframcloud.com/obj/b3f01761-a460-4540-be31-f76123eed2c9\
\>\"", "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[4]:=",ExpressionUUID->"704fba27-0704-44fc-8b58-691976706dbc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.787181627986189*^9, 
  3.787181657656258*^9}},ExpressionUUID->"d53a3e67-4e5c-4c45-848b-\
b82bc3d4bff1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1352, 829},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[1513, 35, 193, 3, 67, "Chapter",ExpressionUUID->"3874914f-f6d9-416e-997d-aa4a8d2d1bc9"],
Cell[CellGroupData[{
Cell[1731, 42, 158, 3, 67, "Section",ExpressionUUID->"1297906f-a5c4-48c0-be6c-0f75da1c59fe"],
Cell[1892, 47, 2479, 38, 188, "Text",ExpressionUUID->"36bde9a5-9c79-4e40-9b0f-e0b15ea86048"],
Cell[CellGroupData[{
Cell[4396, 89, 376, 6, 28, "Input",ExpressionUUID->"e525e102-9263-4359-aa81-41888381f5e5"],
Cell[4775, 97, 174955, 2893, 148, "Output",ExpressionUUID->"840f60c8-81ad-4c66-a127-f03e0e4ad785"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179767, 2995, 390, 7, 28, "Input",ExpressionUUID->"6aedad36-7e09-417a-8708-98c5e5c0261c"],
Cell[180160, 3004, 445, 11, 21, "Message",ExpressionUUID->"1114d379-af80-4368-8f73-ce96f58bf587"],
Cell[180608, 3017, 20124, 378, 185, "Output",ExpressionUUID->"4bc308bc-a4b3-4610-a569-8bd3376b48ea"]
}, Open  ]],
Cell[200747, 3398, 450, 9, 56, "Text",ExpressionUUID->"066af97f-4680-42a2-a984-ad7233d05aaf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201234, 3412, 159, 3, 67, "Section",ExpressionUUID->"a2653a56-1706-4bc8-be5b-ab543eda3781"],
Cell[CellGroupData[{
Cell[201418, 3419, 184, 3, 53, "Subsection",ExpressionUUID->"0364e56f-e1e1-4f10-bd60-a67a320d5725"],
Cell[CellGroupData[{
Cell[201627, 3426, 164, 3, 44, "Subsubsection",ExpressionUUID->"1cd356d8-9f8c-4306-b403-34d7b3c739e1"],
Cell[201794, 3431, 497, 9, 34, "Text",ExpressionUUID->"748dcee7-f4e8-42f2-93da-3e74b2d6a6a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202328, 3445, 177, 3, 44, "Subsubsection",ExpressionUUID->"ee3de24e-ceac-44b6-bee3-bcb66f530214"],
Cell[202508, 3450, 1035, 16, 78, "Text",ExpressionUUID->"b0e5cea6-ee86-4bf4-ba37-4f5179a3d61d"],
Cell[203546, 3468, 694, 11, 56, "Text",ExpressionUUID->"d2d469e7-270b-46bd-aebe-54fabe586f6c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204277, 3484, 171, 3, 44, "Subsubsection",ExpressionUUID->"aa103892-67b2-4777-a996-4c7059c7d91f"],
Cell[204451, 3489, 265, 6, 34, "Text",ExpressionUUID->"0f59e036-1e17-42d1-8199-ecd18e19f696"],
Cell[204719, 3497, 2157, 67, 67, "Input",ExpressionUUID->"bbbc88fa-7e98-4cda-994f-40db9207c8b7"],
Cell[206879, 3566, 195, 3, 34, "Text",ExpressionUUID->"cf00e8b1-d03a-431e-b169-fbe95d0ad083"],
Cell[207077, 3571, 275, 4, 28, "Input",ExpressionUUID->"212771d5-8895-4cd2-8241-94a1588bdde1"],
Cell[207355, 3577, 237, 3, 28, "Input",ExpressionUUID->"2885b6a7-d835-44cc-b60a-4f8d984d8e3f"],
Cell[207595, 3582, 347, 7, 34, "Text",ExpressionUUID->"3dd8c3c3-6312-4fa9-9e68-d91620472cee"],
Cell[207945, 3591, 425, 9, 28, "Input",ExpressionUUID->"2282018d-12af-45b0-80aa-826fe34ff61a"],
Cell[208373, 3602, 412, 8, 34, "Text",ExpressionUUID->"1f29a52d-f37a-4248-87dd-dd179272c0e4"],
Cell[208788, 3612, 565, 14, 48, "Input",ExpressionUUID->"e52a1c55-f6d5-460b-b06d-05deed94f03b"],
Cell[209356, 3628, 273, 6, 34, "Text",ExpressionUUID->"4271f4e6-e56f-45f8-9a74-1c618ea4cc4a"],
Cell[209632, 3636, 643, 14, 28, "Input",ExpressionUUID->"124bf195-8829-40c4-9279-31814e910638"],
Cell[210278, 3652, 437, 8, 34, "Text",ExpressionUUID->"d6e45859-a6af-4800-b779-b784a78dd9b8"],
Cell[210718, 3662, 947, 18, 124, "Input",ExpressionUUID->"01ad6447-12b3-46dc-b850-b8e145d6c913"],
Cell[211668, 3682, 1126, 23, 124, "Input",ExpressionUUID->"1142f7dd-ea8f-4b3d-a042-ec045e8c3f0c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[212843, 3711, 347, 7, 53, "Subsection",ExpressionUUID->"410ac7d2-c813-4dd5-be15-9e01b7d37134"],
Cell[CellGroupData[{
Cell[213215, 3722, 164, 3, 44, "Subsubsection",ExpressionUUID->"82205d40-868c-4f8d-8ebe-eaf3414eee80"],
Cell[213382, 3727, 488, 9, 34, "Text",ExpressionUUID->"3fda4992-ee4f-473e-9f58-f2b311147642"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213907, 3741, 164, 3, 44, "Subsubsection",ExpressionUUID->"83b2b9d6-33e7-44dd-86c3-dbc0124e41dc"],
Cell[214074, 3746, 1177, 22, 78, "Text",ExpressionUUID->"ed978ce0-12e4-4316-a01b-e954d2f887f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215288, 3773, 171, 3, 44, "Subsubsection",ExpressionUUID->"81541d6b-07f5-4c65-b354-b57edb977b5b"],
Cell[215462, 3778, 265, 4, 28, "Input",ExpressionUUID->"ed7d4ef5-6bff-4165-a51f-9302e0c1e9ab"],
Cell[215730, 3784, 572, 10, 34, "Text",ExpressionUUID->"5384a2ed-c941-4fe9-98f0-ea5573088a1f"],
Cell[216305, 3796, 462, 9, 28, "Input",ExpressionUUID->"3b153795-1ca5-4f91-ab2d-dab160a6f950"],
Cell[216770, 3807, 523, 10, 56, "Text",ExpressionUUID->"35428bd9-4034-4f2b-af3a-3575d22249ab"],
Cell[217296, 3819, 1780, 41, 105, "Input",ExpressionUUID->"f6725adb-381b-449c-9ef4-b5f4a099a279"],
Cell[219079, 3862, 344, 7, 34, "Text",ExpressionUUID->"0d078073-38a1-45e2-a9ad-760d49c5f5f5"],
Cell[219426, 3871, 989, 22, 143, "Input",ExpressionUUID->"e84dabff-7459-4f64-9494-06391c4ea71f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[220464, 3899, 309, 5, 53, "Subsection",ExpressionUUID->"8f04e260-d11b-40cb-871a-4f6a91dbddf8"],
Cell[CellGroupData[{
Cell[220798, 3908, 164, 3, 44, "Subsubsection",ExpressionUUID->"23955c8f-04a4-4337-9855-f32aa099228e"],
Cell[220965, 3913, 575, 10, 56, "Text",ExpressionUUID->"862a74ca-868d-4033-a090-6e1d29090e88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221577, 3928, 177, 3, 44, "Subsubsection",ExpressionUUID->"d3cdd986-2436-4649-b8fe-b7c846d79b62"],
Cell[221757, 3933, 456, 9, 56, "Text",ExpressionUUID->"01f98725-4025-4915-b452-4abec59b1033"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222250, 3947, 171, 3, 44, "Subsubsection",ExpressionUUID->"cc21a6c4-2db9-4ef6-b76b-a68b72a83509"],
Cell[222424, 3952, 1192, 19, 144, "Text",ExpressionUUID->"6fcabc0e-a51d-4edd-ba88-0cbd903cd34f"],
Cell[223619, 3973, 753, 13, 28, "Input",ExpressionUUID->"195879ad-6964-4438-a00d-74e064a3aa4a"],
Cell[224375, 3988, 407, 9, 56, "Text",ExpressionUUID->"41893f77-f564-4a32-94fb-0cde0213a753"],
Cell[224785, 3999, 271, 4, 28, "Input",ExpressionUUID->"af4c2fd6-90e7-4bc2-87bf-17a0c352ff3e"],
Cell[225059, 4005, 851, 14, 56, "Text",ExpressionUUID->"d305d85b-8867-4d2a-af49-b0e250d4ae75"],
Cell[225913, 4021, 666, 16, 105, "Input",ExpressionUUID->"9dc75baf-d9f9-47ee-a25f-2a1366ab0792"],
Cell[226582, 4039, 288, 5, 28, "Input",ExpressionUUID->"51207e65-5e65-41b8-8ddb-73299f520275"],
Cell[226873, 4046, 251, 4, 28, "Input",ExpressionUUID->"6d42a7c2-d35b-4258-a8d5-26fcea7a19d5"],
Cell[227127, 4052, 227, 5, 34, "Text",ExpressionUUID->"c46ac32c-5adb-437b-91e1-830c03cd30fb"],
Cell[227357, 4059, 354, 7, 28, "Input",ExpressionUUID->"ef354c17-26f5-4a92-a243-b2e0fce359d0"],
Cell[227714, 4068, 369, 7, 34, "Text",ExpressionUUID->"7d647f47-2ab2-42aa-9d7b-686dda43e2aa"],
Cell[228086, 4077, 810, 18, 48, "Input",ExpressionUUID->"e6f96bf6-0c3d-4f16-bf33-68887663a38e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[228945, 4101, 349, 7, 53, "Subsection",ExpressionUUID->"c5767d8d-3607-4906-bc25-ab1a8f4cda48"],
Cell[CellGroupData[{
Cell[229319, 4112, 164, 3, 44, "Subsubsection",ExpressionUUID->"5425ca80-2e0e-4e49-8154-254b83a07fd3"],
Cell[229486, 4117, 742, 12, 56, "Text",ExpressionUUID->"2ebe2f53-2553-44d5-b10f-7e8b7e24e84f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230265, 4134, 177, 3, 44, "Subsubsection",ExpressionUUID->"2bcd8bdf-9ad7-4a12-98e4-bd3a167e035e"],
Cell[230445, 4139, 1221, 20, 144, "Text",ExpressionUUID->"bfb15df5-4ee4-4f51-b2f5-b0d5b3ed11a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231703, 4164, 171, 3, 44, "Subsubsection",ExpressionUUID->"5b2324ff-c15c-4db0-b8ff-3be53205b124"],
Cell[231877, 4169, 695, 11, 78, "Text",ExpressionUUID->"679ada35-3a88-40c0-940d-3d7059476f78"],
Cell[232575, 4182, 242, 4, 28, "Input",ExpressionUUID->"d3822027-a005-4231-8859-7236f9812975"],
Cell[232820, 4188, 1099, 22, 86, "Input",ExpressionUUID->"d9da9faf-34c3-43a9-a637-7215fbb521b5"],
Cell[233922, 4212, 772, 13, 56, "Text",ExpressionUUID->"d46c4352-945d-45a0-a5ba-565271be24c2"],
Cell[234697, 4227, 350, 7, 28, "Input",ExpressionUUID->"46cdea8d-85d9-4992-adf3-34fe168bc6ff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[235096, 4240, 372, 7, 53, "Subsection",ExpressionUUID->"641d7c4e-00a7-44f3-b8de-ec644f397045"],
Cell[CellGroupData[{
Cell[235493, 4251, 164, 3, 44, "Subsubsection",ExpressionUUID->"63c278d9-fd22-4e35-9e82-9f6cb7002b34"],
Cell[235660, 4256, 565, 10, 34, "Text",ExpressionUUID->"466388c3-aa39-4c7d-84c8-12b022ed8d60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[236262, 4271, 177, 3, 44, "Subsubsection",ExpressionUUID->"45512cba-c7f7-46a4-aeee-671743c8985e"],
Cell[236442, 4276, 640, 11, 56, "Text",ExpressionUUID->"e9a1464b-eff1-4c94-802d-03b8bec27695"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237119, 4292, 171, 3, 44, "Subsubsection",ExpressionUUID->"4d937c56-654c-4b3e-a9f1-1511feca19da"],
Cell[237293, 4297, 478, 8, 56, "Text",ExpressionUUID->"bb4a3dd7-cb3c-4789-9f5a-b95c8d728248"],
Cell[237774, 4307, 797, 18, 67, "Input",ExpressionUUID->"b7e2a6b9-2808-4701-838d-88e597a0df54"],
Cell[238574, 4327, 1347, 20, 78, "Text",ExpressionUUID->"5cb41e44-8cc2-444d-9c4f-055b2f6f808f"],
Cell[239924, 4349, 624, 14, 67, "Input",ExpressionUUID->"8f1b06af-9ddb-40b1-b7ce-07018aa1d66d"],
Cell[240551, 4365, 300, 7, 34, "Text",ExpressionUUID->"0722cd85-3b67-476d-af71-04b7a598a5b8"],
Cell[240854, 4374, 350, 7, 28, "Input",ExpressionUUID->"83861167-a260-4df8-af4e-d5f43b5f3493"],
Cell[241207, 4383, 178, 3, 34, "Text",ExpressionUUID->"c67976ed-1668-447c-afcb-ead6a018245b"],
Cell[241388, 4388, 1105, 27, 86, "Input",ExpressionUUID->"054c0ea6-4b25-4293-84c0-6f6bb0714414"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[242542, 4421, 454, 9, 53, "Subsection",ExpressionUUID->"9832afd5-a032-4b63-b1e9-9726497ec05d"],
Cell[CellGroupData[{
Cell[243021, 4434, 164, 3, 44, "Subsubsection",ExpressionUUID->"b4436d23-37c2-42d9-9e9c-e4bd31f00cb1"],
Cell[243188, 4439, 648, 11, 34, "Text",ExpressionUUID->"e869defa-d13f-4035-a095-303e840dc410"],
Cell[243839, 4452, 244, 6, 34, "Text",ExpressionUUID->"904e2594-3813-40fa-b01c-3cd097cf5857"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244120, 4463, 171, 3, 44, "Subsubsection",ExpressionUUID->"16aad963-7ae0-4845-92cd-e3e03ee20e25"],
Cell[244294, 4468, 403, 8, 34, "Text",ExpressionUUID->"a9240785-f209-4152-96d5-6ea8be64f423"],
Cell[244700, 4478, 3478, 69, 162, "Input",ExpressionUUID->"90cb3cc2-0434-4c97-bdcd-6fff01b98b6f"],
Cell[248181, 4549, 258, 6, 34, "Text",ExpressionUUID->"b36e5481-55f4-463d-b3cb-e4b1ad639a24"],
Cell[248442, 4557, 225, 3, 28, "Input",ExpressionUUID->"e2ebc918-1f8a-4544-97c1-8532a3f28c33"],
Cell[248670, 4562, 222, 5, 34, "Text",ExpressionUUID->"99fa105b-4b38-464b-b52d-8d254c1105a6"],
Cell[248895, 4569, 266, 5, 28, "Input",ExpressionUUID->"7e9efde0-201a-4404-bff2-7e52b2767659"],
Cell[249164, 4576, 350, 7, 28, "Input",ExpressionUUID->"a33bdeac-9110-4c82-a328-08f01ace0377"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[249563, 4589, 467, 8, 53, "Subsection",ExpressionUUID->"0fea2c02-785c-4aa3-8234-36f9f7ece4fb"],
Cell[CellGroupData[{
Cell[250055, 4601, 164, 3, 44, "Subsubsection",ExpressionUUID->"05bbc73a-7db1-449a-950b-822c42cdd672"],
Cell[250222, 4606, 685, 12, 56, "Text",ExpressionUUID->"c2f12a3e-9683-44e5-961e-57d371bb9b30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250944, 4623, 177, 3, 44, "Subsubsection",ExpressionUUID->"bfa36419-a462-42f5-ad1d-ccb33a163c6a"],
Cell[251124, 4628, 318, 7, 34, "Text",ExpressionUUID->"0dafd423-634c-4e8d-8b95-37cc8038da1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[251479, 4640, 171, 3, 44, "Subsubsection",ExpressionUUID->"7b3fd20b-0b0a-4c1b-a19b-9b55e62ec9f9"],
Cell[251653, 4645, 261, 6, 34, "Text",ExpressionUUID->"a51a177a-b0ac-4a75-afa1-e2a1e3024095"],
Cell[251917, 4653, 352, 7, 28, "Input",ExpressionUUID->"763c236c-4ebb-46b6-bd43-6aca323945d7"],
Cell[252272, 4662, 649, 11, 56, "Text",ExpressionUUID->"91487e0f-4b44-4237-bb9a-47fa937a864e"],
Cell[252924, 4675, 235, 3, 28, "Input",ExpressionUUID->"0e86c8dd-cd91-418f-bdbb-de10739833cc"],
Cell[253162, 4680, 227, 5, 34, "Text",ExpressionUUID->"61b136c2-67d0-4349-9f83-fde275d3ccaf"],
Cell[253392, 4687, 737, 17, 28, "Input",ExpressionUUID->"0339766d-8388-4572-8d6b-639b91e1e0ea"],
Cell[254132, 4706, 1146, 17, 100, "Text",ExpressionUUID->"4ee60f21-43c5-4f4f-bc14-fc64191ff389"],
Cell[255281, 4725, 245, 5, 34, "Text",ExpressionUUID->"7f6c8aff-e312-411e-a346-358c0f052fdc"],
Cell[255529, 4732, 235, 3, 28, "Input",ExpressionUUID->"c7dbb961-2c5f-4ebd-aeb0-a68dfd6acb48"],
Cell[255767, 4737, 420, 8, 34, "Text",ExpressionUUID->"b8ff6fa7-bbab-4793-abfb-bf8aee3fd4ae"],
Cell[256190, 4747, 278, 5, 28, "Input",ExpressionUUID->"72c12528-355a-4cbb-9ab0-5fde38b4e89d"],
Cell[256471, 4754, 1300, 20, 100, "Text",ExpressionUUID->"2583cd8f-9afd-4dc0-993e-2dda4bed660e"],
Cell[257774, 4776, 1546, 33, 86, "Input",ExpressionUUID->"d30c7146-0859-4686-9c29-5b8cd1de6671"],
Cell[259323, 4811, 755, 13, 78, "Text",ExpressionUUID->"14ed4ac1-386f-4f89-8218-5baeea52fb2b"],
Cell[260081, 4826, 1398, 32, 86, "Input",ExpressionUUID->"d64c8a47-4918-4bf5-bf5e-fb67d3259f62"],
Cell[261482, 4860, 256, 4, 28, "Input",ExpressionUUID->"2f286e00-df46-49a6-a393-bee5090dcf7c"],
Cell[261741, 4866, 366, 7, 28, "Input",ExpressionUUID->"f857a89e-41a7-43d3-a658-703e6eddc771"],
Cell[262110, 4875, 519, 10, 67, "Input",ExpressionUUID->"5818e0f6-2e1b-4305-bc2a-49a5147087da"],
Cell[262632, 4887, 297, 7, 28, "Input",ExpressionUUID->"704fba27-0704-44fc-8b58-691976706dbc"],
Cell[262932, 4896, 152, 3, 28, "Input",ExpressionUUID->"d53a3e67-4e5c-4c45-848b-b82bc3d4bff1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

